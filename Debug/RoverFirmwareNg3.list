
RoverFirmwareNg3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e6c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  0800906c  0800906c  0001906c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009234  08009234  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08009234  08009234  00019234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800923c  0800923c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0800923c  0800923c  0001923c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  0800924c  0800924c  0001924c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800925c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000559c  20000078  080092d4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005614  080092d4  00025614  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002678b  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005256  00000000  00000000  00046831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b90  00000000  00000000  0004ba88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019c8  00000000  00000000  0004d618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d2e2  00000000  00000000  0004efe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021319  00000000  00000000  0007c2c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110366  00000000  00000000  0009d5db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ad941  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a40  00000000  00000000  001ad994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  001b53d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  001b53f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	08009054 	.word	0x08009054

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	08009054 	.word	0x08009054

08000240 <__aeabi_ldivmod>:
 8000240:	b97b      	cbnz	r3, 8000262 <__aeabi_ldivmod+0x22>
 8000242:	b972      	cbnz	r2, 8000262 <__aeabi_ldivmod+0x22>
 8000244:	2900      	cmp	r1, #0
 8000246:	bfbe      	ittt	lt
 8000248:	2000      	movlt	r0, #0
 800024a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800024e:	e006      	blt.n	800025e <__aeabi_ldivmod+0x1e>
 8000250:	bf08      	it	eq
 8000252:	2800      	cmpeq	r0, #0
 8000254:	bf1c      	itt	ne
 8000256:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800025a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800025e:	f000 b9bf 	b.w	80005e0 <__aeabi_idiv0>
 8000262:	f1ad 0c08 	sub.w	ip, sp, #8
 8000266:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800026a:	2900      	cmp	r1, #0
 800026c:	db09      	blt.n	8000282 <__aeabi_ldivmod+0x42>
 800026e:	2b00      	cmp	r3, #0
 8000270:	db1a      	blt.n	80002a8 <__aeabi_ldivmod+0x68>
 8000272:	f000 f84d 	bl	8000310 <__udivmoddi4>
 8000276:	f8dd e004 	ldr.w	lr, [sp, #4]
 800027a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027e:	b004      	add	sp, #16
 8000280:	4770      	bx	lr
 8000282:	4240      	negs	r0, r0
 8000284:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000288:	2b00      	cmp	r3, #0
 800028a:	db1b      	blt.n	80002c4 <__aeabi_ldivmod+0x84>
 800028c:	f000 f840 	bl	8000310 <__udivmoddi4>
 8000290:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000294:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000298:	b004      	add	sp, #16
 800029a:	4240      	negs	r0, r0
 800029c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a0:	4252      	negs	r2, r2
 80002a2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a6:	4770      	bx	lr
 80002a8:	4252      	negs	r2, r2
 80002aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ae:	f000 f82f 	bl	8000310 <__udivmoddi4>
 80002b2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ba:	b004      	add	sp, #16
 80002bc:	4240      	negs	r0, r0
 80002be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c2:	4770      	bx	lr
 80002c4:	4252      	negs	r2, r2
 80002c6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ca:	f000 f821 	bl	8000310 <__udivmoddi4>
 80002ce:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d6:	b004      	add	sp, #16
 80002d8:	4252      	negs	r2, r2
 80002da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <_ZN8protocol14packet_decoderC1Ev>:
        /** Salida por timeout (agotado tiempo máximo para recibir datos de un paquete). */
		timeout
	};

    /** Constructor por defecto. */
	packet_decoder()	
 80005e4:	b5b0      	push	{r4, r5, r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
                &packet_decoder::handle_pkt_state_expecting_start_sync1,			
                &packet_decoder::handle_pkt_state_expecting_length,
                &packet_decoder::handle_pkt_state_expecting_payload,
                &packet_decoder::handle_pkt_state_expecting_crc,
                &packet_decoder::handle_pkt_state_expecting_terminator
		    }
 80005ec:	4a0d      	ldr	r2, [pc, #52]	; (8000624 <_ZN8protocol14packet_decoderC1Ev+0x40>)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4a0c      	ldr	r2, [pc, #48]	; (8000628 <_ZN8protocol14packet_decoderC1Ev+0x44>)
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	4a0c      	ldr	r2, [pc, #48]	; (800062c <_ZN8protocol14packet_decoderC1Ev+0x48>)
 80005fc:	f103 0408 	add.w	r4, r3, #8
 8000600:	4615      	mov	r5, r2
 8000602:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000604:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000606:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000608:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800060e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    {   
	    this->reset();
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f000 f853 	bl	80006be <_ZN8protocol14packet_decoder5resetEv>
    }
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4618      	mov	r0, r3
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bdb0      	pop	{r4, r5, r7, pc}
 8000622:	bf00      	nop
 8000624:	08009130 	.word	0x08009130
 8000628:	000f4240 	.word	0x000f4240
 800062c:	0800906c 	.word	0x0800906c

08000630 <_ZN8protocol14packet_decoder4feedEh>:

    /** Esta función debe ser llamada por la aplicación cada vez que se recibe un caracter. */
	void feed(uint8_t c)
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	460b      	mov	r3, r1
 800063a:	70fb      	strb	r3, [r7, #3]
    {
        this->last_received_char = c;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	78fa      	ldrb	r2, [r7, #3]
 8000640:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
        (this->*(state_handlers[static_cast<int>(this->current_state)]))();
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800064a:	687a      	ldr	r2, [r7, #4]
 800064c:	3301      	adds	r3, #1
 800064e:	00db      	lsls	r3, r3, #3
 8000650:	4413      	add	r3, r2
 8000652:	685b      	ldr	r3, [r3, #4]
 8000654:	105b      	asrs	r3, r3, #1
 8000656:	461a      	mov	r2, r3
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	1898      	adds	r0, r3, r2
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	3301      	adds	r3, #1
 8000666:	00db      	lsls	r3, r3, #3
 8000668:	4413      	add	r3, r2
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	f003 0301 	and.w	r3, r3, #1
 8000670:	2b00      	cmp	r3, #0
 8000672:	d017      	beq.n	80006a4 <_ZN8protocol14packet_decoder4feedEh+0x74>
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800067a:	687a      	ldr	r2, [r7, #4]
 800067c:	3301      	adds	r3, #1
 800067e:	00db      	lsls	r3, r3, #3
 8000680:	4413      	add	r3, r2
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	105b      	asrs	r3, r3, #1
 8000686:	461a      	mov	r2, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4413      	add	r3, r2
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 8000694:	4611      	mov	r1, r2
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	3101      	adds	r1, #1
 800069a:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
 800069e:	4413      	add	r3, r2
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	e007      	b.n	80006b4 <_ZN8protocol14packet_decoder4feedEh+0x84>
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80006aa:	461a      	mov	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	3201      	adds	r2, #1
 80006b0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80006b4:	4798      	blx	r3
    }    
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <_ZN8protocol14packet_decoder5resetEv>:
        }
        */
    }    

    /** Llevar el decodificador a su estado inicial. */
	void reset()
 80006be:	b580      	push	{r7, lr}
 80006c0:	b082      	sub	sp, #8
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
    {    
        this->current_state = pkt_state::pkt_state_idle;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2200      	movs	r2, #0
 80006ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        this->received_payload_index = 0;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2200      	movs	r2, #0
 80006d2:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
        this->start_of_packet_t0 = get_current_time_ms();
 80006d6:	f000 fa9d 	bl	8000c14 <_Z19get_current_time_msv>
 80006da:	4602      	mov	r2, r0
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	639a      	str	r2, [r3, #56]	; 0x38
        this->crc8 = 0;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2200      	movs	r2, #0
 80006e4:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
    }    
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <_ZN8protocol14packet_decoder21handle_pkt_state_idleEv>:

    /** Tamaño del payload. */
	uint8_t payload_length;

    /** Handler de FSM para estado inicial. */
	void handle_pkt_state_idle()
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
    {
        if (PACKET_SYNC_0_CHAR == this->last_received_char)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 80006fe:	2b40      	cmp	r3, #64	; 0x40
 8000700:	d103      	bne.n	800070a <_ZN8protocol14packet_decoder21handle_pkt_state_idleEv+0x1a>
        {
            this->current_state =
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2201      	movs	r2, #1
 8000706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                    pkt_state::pkt_state_expecting_start_sync1;
        }
    }
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr

08000716 <_ZN8protocol14packet_decoder38handle_pkt_state_expecting_start_sync1Ev>:

    /** Handler de FSM para recepción de secuencia de sincronismo 1. */
	void handle_pkt_state_expecting_start_sync1()
 8000716:	b580      	push	{r7, lr}
 8000718:	b082      	sub	sp, #8
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
    {
        if (PACKET_SYNC_1_CHAR == this->last_received_char)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8000724:	2b3c      	cmp	r3, #60	; 0x3c
 8000726:	d104      	bne.n	8000732 <_ZN8protocol14packet_decoder38handle_pkt_state_expecting_start_sync1Ev+0x1c>
        {
            this->current_state = pkt_state::pkt_state_expecting_length;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2202      	movs	r2, #2
 800072c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        else
        {
            this->set_error(error_code::bad_sync);
            this->reset();
        }
    }    
 8000730:	e009      	b.n	8000746 <_ZN8protocol14packet_decoder38handle_pkt_state_expecting_start_sync1Ev+0x30>
            this->set_error(error_code::bad_sync);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	3304      	adds	r3, #4
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	2101      	movs	r1, #1
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	4798      	blx	r3
            this->reset();
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f7ff ffbc 	bl	80006be <_ZN8protocol14packet_decoder5resetEv>
    }    
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <_ZN8protocol14packet_decoder33handle_pkt_state_expecting_lengthEv>:

    /** Handler de FSM para recepción de tamaño de paquete. */
	void handle_pkt_state_expecting_length()
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
    {
        this->payload_length = this->last_received_char;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	f893 2147 	ldrb.w	r2, [r3, #327]	; 0x147
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
        if (this->payload_length && (this->payload_length <= PAYLOAD_BUFFER_SIZE))
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8000768:	2b00      	cmp	r3, #0
 800076a:	d004      	beq.n	8000776 <_ZN8protocol14packet_decoder33handle_pkt_state_expecting_lengthEv+0x28>
        {
            this->current_state = pkt_state::pkt_state_expecting_payload;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2203      	movs	r2, #3
 8000770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        else
        {
            this->set_error(error_code::invalid_length);
            this->reset();
        }
    }
 8000774:	e009      	b.n	800078a <_ZN8protocol14packet_decoder33handle_pkt_state_expecting_lengthEv+0x3c>
            this->set_error(error_code::invalid_length);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	3304      	adds	r3, #4
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	2102      	movs	r1, #2
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	4798      	blx	r3
            this->reset();
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff ff9a 	bl	80006be <_ZN8protocol14packet_decoder5resetEv>
    }
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <_ZN8protocol14packet_decoder34handle_pkt_state_expecting_payloadEv>:

    /** Handler de FSM para recepción de payload. */
	void handle_pkt_state_expecting_payload()
 8000792:	b580      	push	{r7, lr}
 8000794:	b082      	sub	sp, #8
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
    {
        this->received_payload_buffer[this->received_payload_index] = this->last_received_char;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 80007a0:	4619      	mov	r1, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	f893 2147 	ldrb.w	r2, [r3, #327]	; 0x147
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	440b      	add	r3, r1
 80007ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        if (++this->received_payload_index == this->payload_length)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 80007b6:	3301      	adds	r3, #1
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 80007cc:	429a      	cmp	r2, r3
 80007ce:	bf0c      	ite	eq
 80007d0:	2301      	moveq	r3, #1
 80007d2:	2300      	movne	r3, #0
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d01b      	beq.n	8000812 <_ZN8protocol14packet_decoder34handle_pkt_state_expecting_payloadEv+0x80>
        {        
            this->expected_crc8 = calc_crc8( this->received_payload_buffer, this->received_payload_index);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	f103 0241 	add.w	r2, r3, #65	; 0x41
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 80007e6:	4619      	mov	r1, r3
 80007e8:	4610      	mov	r0, r2
 80007ea:	f000 fa35 	bl	8000c58 <_Z9calc_crc8PKhh>
 80007ee:	4603      	mov	r3, r0
 80007f0:	b29a      	uxth	r2, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
            this->received_payload_buffer[this->received_payload_index] = '\0';
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 80007fe:	461a      	mov	r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4413      	add	r3, r2
 8000804:	2200      	movs	r2, #0
 8000806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            this->current_state = pkt_state::pkt_state_expecting_crc;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2204      	movs	r2, #4
 800080e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        }
    }    
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <_ZN8protocol14packet_decoder30handle_pkt_state_expecting_crcEv>:

    /** Handler de FSM para recepción de CRC. */
	void handle_pkt_state_expecting_crc()
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
    {
        this->crc8 = this->last_received_char;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	f893 2147 	ldrb.w	r2, [r3, #327]	; 0x147
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
        if(this->crc8 == this->expected_crc8)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	f893 3146 	ldrb.w	r3, [r3, #326]	; 0x146
 8000834:	461a      	mov	r2, r3
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800083c:	429a      	cmp	r2, r3
 800083e:	d104      	bne.n	800084a <_ZN8protocol14packet_decoder30handle_pkt_state_expecting_crcEv+0x30>
        {
            this->current_state = pkt_state::pkt_state_expecting_terminator;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2205      	movs	r2, #5
 8000844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        {
            this->set_error(error_code::bad_crc);
            this->reset();
        }
        
    }    
 8000848:	e009      	b.n	800085e <_ZN8protocol14packet_decoder30handle_pkt_state_expecting_crcEv+0x44>
            this->set_error(error_code::bad_crc);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	3304      	adds	r3, #4
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	2103      	movs	r1, #3
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	4798      	blx	r3
            this->reset();
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f7ff ff30 	bl	80006be <_ZN8protocol14packet_decoder5resetEv>
    }    
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <_ZN8protocol14packet_decoder37handle_pkt_state_expecting_terminatorEv>:

    /** Handler de FSM para recepción de carácter terminador. */
	void handle_pkt_state_expecting_terminator()
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
    {
        if (PACKET_TERMINATOR_CHAR == this->last_received_char)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8000874:	2b0a      	cmp	r3, #10
 8000876:	d110      	bne.n	800089a <_ZN8protocol14packet_decoder37handle_pkt_state_expecting_terminatorEv+0x34>
        {
            this->last_received_packet_t0 = get_current_time_ms();
 8000878:	f000 f9cc 	bl	8000c14 <_Z19get_current_time_msv>
 800087c:	4602      	mov	r2, r0
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	63da      	str	r2, [r3, #60]	; 0x3c
            this->handle_packet(this->received_payload_buffer, this->received_payload_index);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	f102 0141 	add.w	r1, r2, #65	; 0x41
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	f892 2142 	ldrb.w	r2, [r2, #322]	; 0x142
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	4798      	blx	r3
 8000898:	e006      	b.n	80008a8 <_ZN8protocol14packet_decoder37handle_pkt_state_expecting_terminatorEv+0x42>
        }
        else
        {
            this->set_error(error_code::bad_terminator);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	3304      	adds	r3, #4
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2104      	movs	r1, #4
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	4798      	blx	r3
        }
        this->reset();	
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f7ff ff08 	bl	80006be <_ZN8protocol14packet_decoder5resetEv>
    }
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <_ZN27ApplicationGeneralTelemetryC1Ev>:
#define APPLICATION_FRAME_ID_GENERAL_TELEMETRY 0
#define APPLICATION_FRAME_ID_MOTOR_CONTROL_TELEMETRY 1


#pragma pack(1)
struct ApplicationGeneralTelemetry
 80008b6:	b480      	push	{r7}
 80008b8:	b083      	sub	sp, #12
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2200      	movs	r2, #0
 80008c8:	705a      	strb	r2, [r3, #1]
 80008ca:	2200      	movs	r2, #0
 80008cc:	709a      	strb	r2, [r3, #2]
 80008ce:	2200      	movs	r2, #0
 80008d0:	70da      	strb	r2, [r3, #3]
 80008d2:	2200      	movs	r2, #0
 80008d4:	711a      	strb	r2, [r3, #4]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2200      	movs	r2, #0
 80008da:	715a      	strb	r2, [r3, #5]
 80008dc:	2200      	movs	r2, #0
 80008de:	719a      	strb	r2, [r3, #6]
 80008e0:	2200      	movs	r2, #0
 80008e2:	71da      	strb	r2, [r3, #7]
 80008e4:	2200      	movs	r2, #0
 80008e6:	721a      	strb	r2, [r3, #8]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2200      	movs	r2, #0
 80008ec:	725a      	strb	r2, [r3, #9]
 80008ee:	2200      	movs	r2, #0
 80008f0:	729a      	strb	r2, [r3, #10]
 80008f2:	2200      	movs	r2, #0
 80008f4:	72da      	strb	r2, [r3, #11]
 80008f6:	2200      	movs	r2, #0
 80008f8:	731a      	strb	r2, [r3, #12]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2200      	movs	r2, #0
 80008fe:	735a      	strb	r2, [r3, #13]
 8000900:	2200      	movs	r2, #0
 8000902:	739a      	strb	r2, [r3, #14]
 8000904:	2200      	movs	r2, #0
 8000906:	73da      	strb	r2, [r3, #15]
 8000908:	2200      	movs	r2, #0
 800090a:	741a      	strb	r2, [r3, #16]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2200      	movs	r2, #0
 8000910:	745a      	strb	r2, [r3, #17]
 8000912:	2200      	movs	r2, #0
 8000914:	749a      	strb	r2, [r3, #18]
 8000916:	2200      	movs	r2, #0
 8000918:	74da      	strb	r2, [r3, #19]
 800091a:	2200      	movs	r2, #0
 800091c:	751a      	strb	r2, [r3, #20]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2200      	movs	r2, #0
 8000922:	755a      	strb	r2, [r3, #21]
 8000924:	2200      	movs	r2, #0
 8000926:	759a      	strb	r2, [r3, #22]
 8000928:	2200      	movs	r2, #0
 800092a:	75da      	strb	r2, [r3, #23]
 800092c:	2200      	movs	r2, #0
 800092e:	761a      	strb	r2, [r3, #24]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2200      	movs	r2, #0
 8000934:	765a      	strb	r2, [r3, #25]
 8000936:	2200      	movs	r2, #0
 8000938:	769a      	strb	r2, [r3, #26]
 800093a:	2200      	movs	r2, #0
 800093c:	76da      	strb	r2, [r3, #27]
 800093e:	2200      	movs	r2, #0
 8000940:	771a      	strb	r2, [r3, #28]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4618      	mov	r0, r3
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <_ZN32ApplicationMotorControlTelemetryC1Ev>:
#pragma pack(0)



#pragma pack(1)
struct ApplicationMotorControlTelemetry{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2201      	movs	r2, #1
 800095c:	701a      	strb	r2, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4618      	mov	r0, r3
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <_ZN11ApplicationC1Ev>:

#include <cstring>

Application App;

Application::Application()
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff fe34 	bl	80005e4 <_ZN8protocol14packet_decoderC1Ev>
 800097c:	4a2b      	ldr	r2, [pc, #172]	; (8000a2c <_ZN11ApplicationC1Ev+0xc0>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	f503 73a5 	add.w	r3, r3, #330	; 0x14a
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff ff94 	bl	80008b6 <_ZN27ApplicationGeneralTelemetryC1Ev>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	f203 1367 	addw	r3, r3, #359	; 0x167
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff ffdb 	bl	8000950 <_ZN32ApplicationMotorControlTelemetryC1Ev>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2200      	movs	r2, #0
 800099e:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2200      	movs	r2, #0
 80009a6:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2200      	movs	r2, #0
 80009ae:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2200      	movs	r2, #0
 80009b6:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2200      	movs	r2, #0
 80009be:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2200      	movs	r2, #0
 80009c6:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2200      	movs	r2, #0
 80009ce:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2200      	movs	r2, #0
 80009d6:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2200      	movs	r2, #0
 80009de:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	f04f 0200 	mov.w	r2, #0
 80009e8:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	f04f 0200 	mov.w	r2, #0
 80009f2:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	f04f 0200 	mov.w	r2, #0
 80009fc:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f04f 0200 	mov.w	r2, #0
 8000a06:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
{

}
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4618      	mov	r0, r3
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	08009120 	.word	0x08009120

08000a30 <_ZN11ApplicationD1Ev>:

Application::~Application()
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <_ZN11ApplicationD1Ev+0x1c>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	601a      	str	r2, [r3, #0]
{

}
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4618      	mov	r0, r3
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	08009120 	.word	0x08009120

08000a50 <_ZN11Application13handle_packetEPKhh>:

void Application::handle_packet(const uint8_t* payload, uint8_t n)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	4613      	mov	r3, r2
 8000a5c:	71fb      	strb	r3, [r7, #7]
	ReceivedPackets++;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000a64:	1c5a      	adds	r2, r3, #1
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4

	// FIXME: check for available mailboxes
	if ( true )
	{
		LastPacketStatus = LastPacketStatusCode::Ok;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	2201      	movs	r2, #1
 8000a70:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc

		std::memcpy(&CommandMailbox[CurrentCommandMailboxIdx], payload, n);
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f893 33e4 	ldrb.w	r3, [r3, #996]	; 0x3e4
 8000a7a:	330f      	adds	r3, #15
 8000a7c:	015b      	lsls	r3, r3, #5
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	4413      	add	r3, r2
 8000a82:	3304      	adds	r3, #4
 8000a84:	79fa      	ldrb	r2, [r7, #7]
 8000a86:	68b9      	ldr	r1, [r7, #8]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f008 f9a5 	bl	8008dd8 <memcpy>

		App.LasOsResult1 = osMessageQueuePut(
				App.Config->CommandReceiverQueueHandle,
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <_ZN11Application13handle_packetEPKhh+0x94>)
 8000a90:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000a94:	6858      	ldr	r0, [r3, #4]
				&CurrentCommandMailboxIdx,
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	f503 7179 	add.w	r1, r3, #996	; 0x3e4
		App.LasOsResult1 = osMessageQueuePut(
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f005 face 	bl	8006040 <osMessageQueuePut>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <_ZN11Application13handle_packetEPKhh+0x94>)
 8000aaa:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
				0, // priority ignored.
				0 // Required because running in interrupt
		);

		if ( osStatus_t::osOK == App.LasOsResult1 )
 8000aae:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <_ZN11Application13handle_packetEPKhh+0x94>)
 8000ab0:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d110      	bne.n	8000ada <_ZN11Application13handle_packetEPKhh+0x8a>
		{
			// Next mailbox
			CurrentCommandMailboxIdx++;
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f893 33e4 	ldrb.w	r3, [r3, #996]	; 0x3e4
 8000abe:	3301      	adds	r3, #1
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
			if (CurrentCommandMailboxIdx == CommandMailboxSize)
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	f893 33e4 	ldrb.w	r3, [r3, #996]	; 0x3e4
 8000ace:	2b10      	cmp	r3, #16
 8000ad0:	d103      	bne.n	8000ada <_ZN11Application13handle_packetEPKhh+0x8a>
			{
				CurrentCommandMailboxIdx = 0;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
			}
		}
	}
}
 8000ada:	bf00      	nop
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000094 	.word	0x20000094

08000ae8 <_ZN11Application9set_errorEN8protocol14packet_decoder10error_codeE>:

void Application::set_error(error_code ec)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	460b      	mov	r3, r1
 8000af2:	70fb      	strb	r3, [r7, #3]
	if (ec == invalid_length )
 8000af4:	78fb      	ldrb	r3, [r7, #3]
 8000af6:	2b02      	cmp	r3, #2
 8000af8:	d104      	bne.n	8000b04 <_ZN11Application9set_errorEN8protocol14packet_decoder10error_codeE+0x1c>
	{
		LastPacketStatus = LastPacketStatusCode::InvalidLength;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2202      	movs	r2, #2
 8000afe:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
	}
	else if(ec == bad_crc)
	{
		LastPacketStatus = LastPacketStatusCode::BadCRC;
	}
}
 8000b02:	e006      	b.n	8000b12 <_ZN11Application9set_errorEN8protocol14packet_decoder10error_codeE+0x2a>
	else if(ec == bad_crc)
 8000b04:	78fb      	ldrb	r3, [r7, #3]
 8000b06:	2b03      	cmp	r3, #3
 8000b08:	d103      	bne.n	8000b12 <_ZN11Application9set_errorEN8protocol14packet_decoder10error_codeE+0x2a>
		LastPacketStatus = LastPacketStatusCode::BadCRC;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2204      	movs	r2, #4
 8000b0e:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
	...

08000b20 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef* UartHandle)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	if(UartHandle == App.Config->UartTcTmHandle)
 8000b28:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <HAL_UART_RxCpltCallback+0x38>)
 8000b2a:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d10b      	bne.n	8000b4e <HAL_UART_RxCpltCallback+0x2e>
	{
		HAL_UART_Receive_IT(UartHandle, &App.RxBuf, 1);
 8000b36:	2201      	movs	r2, #1
 8000b38:	4908      	ldr	r1, [pc, #32]	; (8000b5c <HAL_UART_RxCpltCallback+0x3c>)
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f003 fac4 	bl	80040c8 <HAL_UART_Receive_IT>
		App.feed(App.RxBuf);
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <HAL_UART_RxCpltCallback+0x38>)
 8000b42:	f893 33e5 	ldrb.w	r3, [r3, #997]	; 0x3e5
 8000b46:	4619      	mov	r1, r3
 8000b48:	4803      	ldr	r0, [pc, #12]	; (8000b58 <HAL_UART_RxCpltCallback+0x38>)
 8000b4a:	f7ff fd71 	bl	8000630 <_ZN8protocol14packet_decoder4feedEh>
		//HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
		//HAL_UART_Transmit_IT(UartHandle,reinterpret_cast<const uint8_t*>(MESSAGE_STR), 6);
	}

}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000094 	.word	0x20000094
 8000b5c:	20000479 	.word	0x20000479

08000b60 <ApplicationMain>:


void ApplicationMain(const ApplicationConfig* Config)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	// FIXME: Cuidado con esto. Las tares no deberìan arrancar hasta que no estè la configuraciòn.
	App.Config = Config;
 8000b68:	4a08      	ldr	r2, [pc, #32]	; (8000b8c <ApplicationMain+0x2c>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c

	// Inicio
	HAL_UART_Receive_IT(App.Config->UartTcTmHandle, &App.RxBuf, 1);
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <ApplicationMain+0x2c>)
 8000b72:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2201      	movs	r2, #1
 8000b7a:	4905      	ldr	r1, [pc, #20]	; (8000b90 <ApplicationMain+0x30>)
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f003 faa3 	bl	80040c8 <HAL_UART_Receive_IT>
	for(;;)
	{
		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		osDelay(1000);
 8000b82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b86:	f005 f9a7 	bl	8005ed8 <osDelay>
 8000b8a:	e7fa      	b.n	8000b82 <ApplicationMain+0x22>
 8000b8c:	20000094 	.word	0x20000094
 8000b90:	20000479 	.word	0x20000479

08000b94 <_Z41__static_initialization_and_destruction_0ii>:
	}
}
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d107      	bne.n	8000bb4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d102      	bne.n	8000bb4 <_Z41__static_initialization_and_destruction_0ii+0x20>
Application App;
 8000bae:	4809      	ldr	r0, [pc, #36]	; (8000bd4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000bb0:	f7ff fedc 	bl	800096c <_ZN11ApplicationC1Ev>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d107      	bne.n	8000bca <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d102      	bne.n	8000bca <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000bc4:	4803      	ldr	r0, [pc, #12]	; (8000bd4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000bc6:	f7ff ff33 	bl	8000a30 <_ZN11ApplicationD1Ev>
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000094 	.word	0x20000094

08000bd8 <_GLOBAL__sub_I_App>:
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000be0:	2001      	movs	r0, #1
 8000be2:	f7ff ffd7 	bl	8000b94 <_Z41__static_initialization_and_destruction_0ii>
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <_GLOBAL__sub_D_App>:
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f7ff ffcf 	bl	8000b94 <_Z41__static_initialization_and_destruction_0ii>
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <_ZNKSt6chrono8durationIxSt5ratioILx1ELx1000000000EEE5countEv>:
	~duration() = default;
	duration& operator=(const duration&) = default;

	// 20.11.5.2 observer
	constexpr rep
	count() const
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	{ return __r; }
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c06:	4610      	mov	r0, r2
 8000c08:	4619      	mov	r1, r3
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <_Z19get_current_time_msv>:
#include "Protocol/protocol.hpp"

uint32_t get_current_time_ms()
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
    return std::chrono::duration_cast<std::chrono::milliseconds >(std::chrono::system_clock::now().time_since_epoch()).count();
 8000c1a:	f107 0310 	add.w	r3, r7, #16
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f008 f878 	bl	8008d14 <_ZNSt6chrono3_V212system_clock3nowEv>
 8000c24:	f107 0308 	add.w	r3, r7, #8
 8000c28:	f107 0210 	add.w	r2, r7, #16
 8000c2c:	4611      	mov	r1, r2
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 f84a 	bl	8000cc8 <_ZNKSt6chrono10time_pointINS_3_V212system_clockENS_8durationIxSt5ratioILx1ELx1000000000EEEEE16time_since_epochEv>
 8000c34:	463b      	mov	r3, r7
 8000c36:	f107 0208 	add.w	r2, r7, #8
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f000 f854 	bl	8000cea <_ZNSt6chrono13duration_castINS_8durationIxSt5ratioILx1ELx1000EEEExS2_ILx1ELx1000000000EEEENSt9enable_ifIXsrNS_13__is_durationIT_EE5valueES8_E4typeERKNS1_IT0_T1_EE>
 8000c42:	463b      	mov	r3, r7
 8000c44:	4618      	mov	r0, r3
 8000c46:	f000 f85f 	bl	8000d08 <_ZNKSt6chrono8durationIxSt5ratioILx1ELx1000EEE5countEv>
 8000c4a:	4602      	mov	r2, r0
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	4613      	mov	r3, r2
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <_Z9calc_crc8PKhh>:

uint8_t calc_crc8(const uint8_t* data, uint8_t length)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b087      	sub	sp, #28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	460b      	mov	r3, r1
 8000c62:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0xff;
 8000c64:	23ff      	movs	r3, #255	; 0xff
 8000c66:	75fb      	strb	r3, [r7, #23]
    size_t i, j;
    for (i = 0; i < length; i++) {
 8000c68:	2300      	movs	r3, #0
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	78fb      	ldrb	r3, [r7, #3]
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d222      	bcs.n	8000cba <_Z9calc_crc8PKhh+0x62>
        crc ^= data[i];
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	4413      	add	r3, r2
 8000c7a:	781a      	ldrb	r2, [r3, #0]
 8000c7c:	7dfb      	ldrb	r3, [r7, #23]
 8000c7e:	4053      	eors	r3, r2
 8000c80:	75fb      	strb	r3, [r7, #23]
        for (j = 0; j < 8; j++) {
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	2b07      	cmp	r3, #7
 8000c8a:	d812      	bhi.n	8000cb2 <_Z9calc_crc8PKhh+0x5a>
            if ((crc & 0x80) != 0)
 8000c8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	da07      	bge.n	8000ca4 <_Z9calc_crc8PKhh+0x4c>
                crc = (uint8_t)((crc << 1) ^ 0x31);
 8000c94:	7dfb      	ldrb	r3, [r7, #23]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	b25b      	sxtb	r3, r3
 8000c9a:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8000c9e:	b25b      	sxtb	r3, r3
 8000ca0:	75fb      	strb	r3, [r7, #23]
 8000ca2:	e002      	b.n	8000caa <_Z9calc_crc8PKhh+0x52>
            else
                crc <<= 1;
 8000ca4:	7dfb      	ldrb	r3, [r7, #23]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	75fb      	strb	r3, [r7, #23]
        for (j = 0; j < 8; j++) {
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	3301      	adds	r3, #1
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	e7e9      	b.n	8000c86 <_Z9calc_crc8PKhh+0x2e>
    for (i = 0; i < length; i++) {
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	e7d8      	b.n	8000c6c <_Z9calc_crc8PKhh+0x14>
        }
    }
    return crc;
 8000cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	371c      	adds	r7, #28
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <_ZNKSt6chrono10time_pointINS_3_V212system_clockENS_8durationIxSt5ratioILx1ELx1000000000EEEEE16time_since_epochEv>:
	  : __d(__t.time_since_epoch())
	  { }

	// observer
	constexpr duration
	time_since_epoch() const
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
	{ return __d; }
 8000cd2:	6879      	ldr	r1, [r7, #4]
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cda:	e9c1 2300 	strd	r2, r3, [r1]
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <_ZNSt6chrono13duration_castINS_8durationIxSt5ratioILx1ELx1000EEEExS2_ILx1ELx1000000000EEEENSt9enable_ifIXsrNS_13__is_durationIT_EE5valueES8_E4typeERKNS1_IT0_T1_EE>:
      duration_cast(const duration<_Rep, _Period>& __d)
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
 8000cf2:	6039      	str	r1, [r7, #0]
	return __dc::__cast(__d);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6839      	ldr	r1, [r7, #0]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f000 f813 	bl	8000d24 <_ZNSt6chrono20__duration_cast_implINS_8durationIxSt5ratioILx1ELx1000EEEES2_ILx1ELx1000000EExLb1ELb0EE6__castIxS2_ILx1ELx1000000000EEEES4_RKNS1_IT_T0_EE>
 8000cfe:	bf00      	nop
      }
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <_ZNKSt6chrono8durationIxSt5ratioILx1ELx1000EEE5countEv>:
	count() const
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
	{ return __r; }
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d16:	4610      	mov	r0, r2
 8000d18:	4619      	mov	r1, r3
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <_ZNSt6chrono20__duration_cast_implINS_8durationIxSt5ratioILx1ELx1000EEEES2_ILx1ELx1000000EExLb1ELb0EE6__castIxS2_ILx1ELx1000000000EEEES4_RKNS1_IT_T0_EE>:
	  __cast(const duration<_Rep, _Period>& __d)
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
 8000d2e:	6838      	ldr	r0, [r7, #0]
 8000d30:	f7ff ff62 	bl	8000bf8 <_ZNKSt6chrono8durationIxSt5ratioILx1ELx1000000000EEE5countEv>
 8000d34:	4a09      	ldr	r2, [pc, #36]	; (8000d5c <_ZNSt6chrono20__duration_cast_implINS_8durationIxSt5ratioILx1ELx1000EEEES2_ILx1ELx1000000EExLb1ELb0EE6__castIxS2_ILx1ELx1000000000EEEES4_RKNS1_IT_T0_EE+0x38>)
 8000d36:	f04f 0300 	mov.w	r3, #0
 8000d3a:	f7ff fa81 	bl	8000240 <__aeabi_ldivmod>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	460b      	mov	r3, r1
	    return _ToDur(static_cast<__to_rep>(
 8000d42:	e9c7 2302 	strd	r2, r3, [r7, #8]
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
 8000d46:	f107 0308 	add.w	r3, r7, #8
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f000 f807 	bl	8000d60 <_ZNSt6chrono8durationIxSt5ratioILx1ELx1000EEEC1IxvEERKT_>
	  }
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	000f4240 	.word	0x000f4240

08000d60 <_ZNSt6chrono8durationIxSt5ratioILx1ELx1000EEEC1IxvEERKT_>:
	  constexpr explicit duration(const _Rep2& __rep)
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d70:	6879      	ldr	r1, [r7, #4]
 8000d72:	e9c1 2300 	strd	r2, r3, [r1]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <_ZN28ApplicationTelecommandHeader9FromBytesEPKh>:

#pragma pack(1)
struct ApplicationTelecommandHeader {
	uint8_t Opcode;

	void FromBytes(const uint8_t* payload)
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
	{
		Opcode = *payload;
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	781a      	ldrb	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	701a      	strb	r2, [r3, #0]
	}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <_ZN17LedControlCommand9FromBytesEPKh>:
#pragma pack(1)
struct LedControlCommand
{
	uint32_t LedControlFlags;

	void FromBytes(const uint8_t* payload)
 8000da2:	b480      	push	{r7}
 8000da4:	b083      	sub	sp, #12
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
 8000daa:	6039      	str	r1, [r7, #0]
	{
		LedControlFlags = __builtin_bswap32(*((uint32_t*)&payload[0]));
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	ba1a      	rev	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	601a      	str	r2, [r3, #0]
	}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <_ZN25ControlMotorManualCommand9FromBytesEPKh>:
{
	uint32_t MotorControlFlags;
	float MotorAThrottle; // FIXME move to float
	float MotorBThrottle; // FIXME move to float

	void FromBytes(const uint8_t* payload)
 8000dc2:	b480      	push	{r7}
 8000dc4:	b085      	sub	sp, #20
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	6039      	str	r1, [r7, #0]
	{
		uint32_t tmp;

		MotorControlFlags = __builtin_bswap32(*((uint32_t*)&payload[0]));
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	ba1a      	rev	r2, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	601a      	str	r2, [r3, #0]

		tmp =  __builtin_bswap32(*((uint32_t*)&payload[1]));
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	ba1b      	rev	r3, r3
 8000dde:	60fb      	str	r3, [r7, #12]
		memcpy(&MotorAThrottle, &tmp, sizeof(float));
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3304      	adds	r3, #4
 8000de4:	68fa      	ldr	r2, [r7, #12]
 8000de6:	601a      	str	r2, [r3, #0]
		tmp = __builtin_bswap32(*((uint32_t*)&payload[2]));
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	3302      	adds	r3, #2
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	ba1b      	rev	r3, r3
 8000df0:	60fb      	str	r3, [r7, #12]
		memcpy(&MotorBThrottle, &tmp, sizeof(float));
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	3308      	adds	r3, #8
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	601a      	str	r2, [r3, #0]
	}
 8000dfa:	bf00      	nop
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <_ZN23ControlMotorAutoCommand9FromBytesEPKh>:
{
	uint32_t MotorControlFlags;
	float MotorASpeed;
	float MotorBSpeed;

	void FromBytes(const uint8_t* payload)
 8000e06:	b480      	push	{r7}
 8000e08:	b083      	sub	sp, #12
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
 8000e0e:	6039      	str	r1, [r7, #0]
	{
		MotorControlFlags = __builtin_bswap32(*((uint32_t*)&payload[0]));
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	ba1a      	rev	r2, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	601a      	str	r2, [r3, #0]
		MotorASpeed = static_cast<float>(__builtin_bswap32(*((uint32_t*)&payload[1])));
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	ba1b      	rev	r3, r3
 8000e22:	ee07 3a90 	vmov	s15, r3
 8000e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	ee17 2a90 	vmov	r2, s15
 8000e30:	605a      	str	r2, [r3, #4]
		MotorBSpeed = static_cast<float>(__builtin_bswap32(*((uint32_t*)&payload[2])));
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	3302      	adds	r3, #2
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	ba1b      	rev	r3, r3
 8000e3a:	ee07 3a90 	vmov	s15, r3
 8000e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	ee17 2a90 	vmov	r2, s15
 8000e48:	609a      	str	r2, [r3, #8]
	}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <_ZN26SetMotorControlModeCommand9FromBytesEPKh>:
#pragma pack(1)
struct SetMotorControlModeCommand
{
	uint32_t MotorControlModeFlags;

	void FromBytes(const uint8_t* payload)
 8000e56:	b480      	push	{r7}
 8000e58:	b083      	sub	sp, #12
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
 8000e5e:	6039      	str	r1, [r7, #0]
	{
		MotorControlModeFlags = __builtin_bswap32(*((uint32_t*)&payload[0]));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	ba1a      	rev	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	601a      	str	r2, [r3, #0]
	}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
	...

08000e78 <_ZN22CommandReceiverServiceC1Ev>:

extern Application App;

CommandReceiverService CommandReceiver;

CommandReceiverService::CommandReceiverService()
 8000e78:	b4b0      	push	{r4, r5, r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
		CommandCallbacks{
			&CommandReceiverService::CmdControlLeds,
			&CommandReceiverService::CmdControlMotorManual,
			&CommandReceiverService::CmdControlMotorAuto,
			&CommandReceiverService::CmdControlMotorMode
		}
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a07      	ldr	r2, [pc, #28]	; (8000ea0 <_ZN22CommandReceiverServiceC1Ev+0x28>)
 8000e84:	461c      	mov	r4, r3
 8000e86:	4615      	mov	r5, r2
 8000e88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e8c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
{

}
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4618      	mov	r0, r3
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bcb0      	pop	{r4, r5, r7}
 8000e9e:	4770      	bx	lr
 8000ea0:	0800909c 	.word	0x0800909c

08000ea4 <_ZN22CommandReceiverServiceD1Ev>:

CommandReceiverService::~CommandReceiverService()
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
{

}
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <_ZN22CommandReceiverService4MainEPv>:


void CommandReceiverService::Main(void *argument)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
	// FIXME: mecanismo provisorio para evitar que la tarea arranque sin haberse inicializado App.Config
	osDelay(1000);
 8000ec6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eca:	f005 f805 	bl	8005ed8 <osDelay>
	for(;;)
	{
		// Read Queue
		uint8_t ReceivedCommandMailboxIdx;
		osStatus result = osMessageQueueGet(
				App.Config->CommandReceiverQueueHandle,
 8000ece:	4b30      	ldr	r3, [pc, #192]	; (8000f90 <_ZN22CommandReceiverService4MainEPv+0xd4>)
 8000ed0:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000ed4:	6858      	ldr	r0, [r3, #4]
		osStatus result = osMessageQueueGet(
 8000ed6:	f107 010e 	add.w	r1, r7, #14
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f005 f922 	bl	8006128 <osMessageQueueGet>
 8000ee4:	6178      	str	r0, [r7, #20]
				&ReceivedCommandMailboxIdx,
				0,
				-1);
		App.LasOsResult2 = result;
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	4a29      	ldr	r2, [pc, #164]	; (8000f90 <_ZN22CommandReceiverService4MainEPv+0xd4>)
 8000eea:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8

		if (result== osOK)
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d1ec      	bne.n	8000ece <_ZN22CommandReceiverService4MainEPv+0x12>
		{
			// 1. Parse header
			ApplicationTelecommandHeader Header;
			const uint8_t* TCData = &App.CommandMailbox[ReceivedCommandMailboxIdx][0];
 8000ef4:	7bbb      	ldrb	r3, [r7, #14]
 8000ef6:	330f      	adds	r3, #15
 8000ef8:	015b      	lsls	r3, r3, #5
 8000efa:	4a25      	ldr	r2, [pc, #148]	; (8000f90 <_ZN22CommandReceiverService4MainEPv+0xd4>)
 8000efc:	4413      	add	r3, r2
 8000efe:	3304      	adds	r3, #4
 8000f00:	613b      	str	r3, [r7, #16]
			Header.FromBytes(TCData);
 8000f02:	f107 030c 	add.w	r3, r7, #12
 8000f06:	6939      	ldr	r1, [r7, #16]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ff3b 	bl	8000d84 <_ZN28ApplicationTelecommandHeader9FromBytesEPKh>

			App.LastCommandOpcode = Header.Opcode;
 8000f0e:	7b3b      	ldrb	r3, [r7, #12]
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b1f      	ldr	r3, [pc, #124]	; (8000f90 <_ZN22CommandReceiverService4MainEPv+0xd4>)
 8000f14:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

			// 2. Dispatch command

			if (Header.Opcode < ApplicationTelecommandId::NumberOfTelecommands)
 8000f18:	7b3b      	ldrb	r3, [r7, #12]
 8000f1a:	2b03      	cmp	r3, #3
 8000f1c:	d833      	bhi.n	8000f86 <_ZN22CommandReceiverService4MainEPv+0xca>
			{
				bool CommandExecutionResult = (this->*CommandCallbacks[Header.Opcode])(
 8000f1e:	7b3b      	ldrb	r3, [r7, #12]
						TCData+sizeof(ApplicationTelecommandHeader)
				);
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	4413      	add	r3, r2
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	105b      	asrs	r3, r3, #1
				bool CommandExecutionResult = (this->*CommandCallbacks[Header.Opcode])(
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	1898      	adds	r0, r3, r2
 8000f30:	7b3b      	ldrb	r3, [r7, #12]
				);
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	4413      	add	r3, r2
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d011      	beq.n	8000f66 <_ZN22CommandReceiverService4MainEPv+0xaa>
				bool CommandExecutionResult = (this->*CommandCallbacks[Header.Opcode])(
 8000f42:	7b3b      	ldrb	r3, [r7, #12]
				);
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	4413      	add	r3, r2
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	105b      	asrs	r3, r3, #1
 8000f4e:	461a      	mov	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4413      	add	r3, r2
 8000f54:	681b      	ldr	r3, [r3, #0]
				bool CommandExecutionResult = (this->*CommandCallbacks[Header.Opcode])(
 8000f56:	7b3a      	ldrb	r2, [r7, #12]
 8000f58:	4611      	mov	r1, r2
				);
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
 8000f60:	4413      	add	r3, r2
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	e004      	b.n	8000f70 <_ZN22CommandReceiverService4MainEPv+0xb4>
				bool CommandExecutionResult = (this->*CommandCallbacks[Header.Opcode])(
 8000f66:	7b3b      	ldrb	r3, [r7, #12]
 8000f68:	461a      	mov	r2, r3
				);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
				bool CommandExecutionResult = (this->*CommandCallbacks[Header.Opcode])(
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	3201      	adds	r2, #1
 8000f74:	4611      	mov	r1, r2
 8000f76:	4798      	blx	r3
 8000f78:	4603      	mov	r3, r0
 8000f7a:	73fb      	strb	r3, [r7, #15]
				App.LastCommandResult = static_cast<uint32_t>(CommandExecutionResult);
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <_ZN22CommandReceiverService4MainEPv+0xd4>)
 8000f80:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
 8000f84:	e7a3      	b.n	8000ece <_ZN22CommandReceiverService4MainEPv+0x12>
			}
			else
			{
				App.LastPacketStatus = LastPacketStatusCode::InvalidOpcode;
 8000f86:	4b02      	ldr	r3, [pc, #8]	; (8000f90 <_ZN22CommandReceiverService4MainEPv+0xd4>)
 8000f88:	2208      	movs	r2, #8
 8000f8a:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
			// Other code is a problem!
		}

		//osDelay(1000);
		//HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
	}
 8000f8e:	e79e      	b.n	8000ece <_ZN22CommandReceiverService4MainEPv+0x12>
 8000f90:	20000094 	.word	0x20000094

08000f94 <CommandReceiverTaskMain>:
}


void CommandReceiverTaskMain(void *argument)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	CommandReceiver.Main(argument);
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	4803      	ldr	r0, [pc, #12]	; (8000fac <CommandReceiverTaskMain+0x18>)
 8000fa0:	f7ff ff8c 	bl	8000ebc <_ZN22CommandReceiverService4MainEPv>
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	2000047c 	.word	0x2000047c

08000fb0 <_ZN22CommandReceiverService14CmdControlLedsEPKh>:
// --------------------------------------------------------------------------------------------------------
// Commands
// --------------------------------------------------------------------------------------------------------

bool CommandReceiverService::CmdControlLeds(const uint8_t* payload)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
	LedControlCommand cmd;
	cmd.FromBytes(payload);
 8000fba:	f107 030c 	add.w	r3, r7, #12
 8000fbe:	6839      	ldr	r1, [r7, #0]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff feee 	bl	8000da2 <_ZN17LedControlCommand9FromBytesEPKh>
	App.LedControlState = cmd.LedControlFlags;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	4a08      	ldr	r2, [pc, #32]	; (8000fec <_ZN22CommandReceiverService14CmdControlLedsEPKh+0x3c>)
 8000fca:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, (cmd.LedControlFlags & 1) ? GPIO_PIN_SET : GPIO_PIN_RESET );
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	461a      	mov	r2, r3
 8000fda:	2180      	movs	r1, #128	; 0x80
 8000fdc:	4804      	ldr	r0, [pc, #16]	; (8000ff0 <_ZN22CommandReceiverService14CmdControlLedsEPKh+0x40>)
 8000fde:	f001 f9f7 	bl	80023d0 <HAL_GPIO_WritePin>
	return true;
 8000fe2:	2301      	movs	r3, #1
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000094 	.word	0x20000094
 8000ff0:	40020400 	.word	0x40020400

08000ff4 <_ZN22CommandReceiverService21CmdControlMotorManualEPKh>:

bool CommandReceiverService::CmdControlMotorManual(const uint8_t* payload)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
	ControlMotorManualCommand cmd;
	cmd.FromBytes(payload);
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	6839      	ldr	r1, [r7, #0]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fedc 	bl	8000dc2 <_ZN25ControlMotorManualCommand9FromBytesEPKh>

	if ( cmd.MotorControlFlags & 1 )
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <_ZN22CommandReceiverService21CmdControlMotorManualEPKh+0x28>
	{
		App.MotorThrottles[0] = cmd.MotorAThrottle;
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	4a08      	ldr	r2, [pc, #32]	; (8001038 <_ZN22CommandReceiverService21CmdControlMotorManualEPKh+0x44>)
 8001018:	f8c2 31c4 	str.w	r3, [r2, #452]	; 0x1c4
		// TODO: Update motors
	}

	if ( cmd.MotorControlFlags & 2 )
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <_ZN22CommandReceiverService21CmdControlMotorManualEPKh+0x3a>
	{
		App.MotorThrottles[1] = cmd.MotorBThrottle;
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	4a03      	ldr	r2, [pc, #12]	; (8001038 <_ZN22CommandReceiverService21CmdControlMotorManualEPKh+0x44>)
 800102a:	f8c2 31c8 	str.w	r3, [r2, #456]	; 0x1c8
		// TODO: Update motors
	}

	return true;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000094 	.word	0x20000094

0800103c <_ZN22CommandReceiverService19CmdControlMotorAutoEPKh>:

bool CommandReceiverService::CmdControlMotorAuto(const uint8_t* payload)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
	ControlMotorAutoCommand cmd;
	cmd.FromBytes(payload);
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	6839      	ldr	r1, [r7, #0]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff feda 	bl	8000e06 <_ZN23ControlMotorAutoCommand9FromBytesEPKh>

	if (cmd.MotorControlFlags & 1)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <_ZN22CommandReceiverService19CmdControlMotorAutoEPKh+0x28>
	{
		App.MotorSetpointSpeeds[0] = cmd.MotorASpeed;
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	4a08      	ldr	r2, [pc, #32]	; (8001080 <_ZN22CommandReceiverService19CmdControlMotorAutoEPKh+0x44>)
 8001060:	f8c2 31cc 	str.w	r3, [r2, #460]	; 0x1cc
	}

	if (cmd.MotorControlFlags & 2)
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <_ZN22CommandReceiverService19CmdControlMotorAutoEPKh+0x3a>
	{
		App.MotorSetpointSpeeds[1] = cmd.MotorBSpeed;
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	4a03      	ldr	r2, [pc, #12]	; (8001080 <_ZN22CommandReceiverService19CmdControlMotorAutoEPKh+0x44>)
 8001072:	f8c2 31d0 	str.w	r3, [r2, #464]	; 0x1d0
	}

	return true;
 8001076:	2301      	movs	r3, #1
}
 8001078:	4618      	mov	r0, r3
 800107a:	3718      	adds	r7, #24
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000094 	.word	0x20000094

08001084 <_ZN22CommandReceiverService19CmdControlMotorModeEPKh>:

bool CommandReceiverService::CmdControlMotorMode(const uint8_t* payload)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
	SetMotorControlModeCommand cmd;
	cmd.FromBytes(payload);
 800108e:	f107 030c 	add.w	r3, r7, #12
 8001092:	6839      	ldr	r1, [r7, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fede 	bl	8000e56 <_ZN26SetMotorControlModeCommand9FromBytesEPKh>

	App.MotorControlModeFlags = cmd.MotorControlModeFlags;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	4a03      	ldr	r2, [pc, #12]	; (80010ac <_ZN22CommandReceiverService19CmdControlMotorModeEPKh+0x28>)
 800109e:	f8c2 31c0 	str.w	r3, [r2, #448]	; 0x1c0

	return true;
 80010a2:	2301      	movs	r3, #1
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000094 	.word	0x20000094

080010b0 <_Z41__static_initialization_and_destruction_0ii>:
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d107      	bne.n	80010d0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d102      	bne.n	80010d0 <_Z41__static_initialization_and_destruction_0ii+0x20>
CommandReceiverService CommandReceiver;
 80010ca:	4809      	ldr	r0, [pc, #36]	; (80010f0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80010cc:	f7ff fed4 	bl	8000e78 <_ZN22CommandReceiverServiceC1Ev>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d107      	bne.n	80010e6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010dc:	4293      	cmp	r3, r2
 80010de:	d102      	bne.n	80010e6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80010e0:	4803      	ldr	r0, [pc, #12]	; (80010f0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80010e2:	f7ff fedf 	bl	8000ea4 <_ZN22CommandReceiverServiceD1Ev>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	2000047c 	.word	0x2000047c

080010f4 <_GLOBAL__sub_I_CommandReceiver>:
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80010fc:	2001      	movs	r0, #1
 80010fe:	f7ff ffd7 	bl	80010b0 <_Z41__static_initialization_and_destruction_0ii>
 8001102:	bd80      	pop	{r7, pc}

08001104 <_GLOBAL__sub_D_CommandReceiver>:
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
 8001108:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800110c:	2000      	movs	r0, #0
 800110e:	f7ff ffcf 	bl	80010b0 <_Z41__static_initialization_and_destruction_0ii>
 8001112:	bd80      	pop	{r7, pc}

08001114 <_ZN8protocol14packet_encoderC1Ev>:
class packet_encoder
{
public:
    /** Constructor por defecto.
    */
	packet_encoder()
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
    {
        this->buffer[0] = PACKET_SYNC_0_CHAR;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2240      	movs	r2, #64	; 0x40
 8001120:	711a      	strb	r2, [r3, #4]
	    this->buffer[1] = PACKET_SYNC_1_CHAR;	
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	223c      	movs	r2, #60	; 0x3c
 8001126:	715a      	strb	r2, [r3, #5]
    }
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4618      	mov	r0, r3
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <_ZN8protocol14packet_encoder18get_payload_bufferEv>:

    /** Obtener un puntero al buffer interno.
     *  Esta función se usa para completar el contenido de los reportes a generar.
    */
	inline void* get_payload_buffer() { return this->buffer + HEADER_SIZE; }
 8001136:	b480      	push	{r7}
 8001138:	b083      	sub	sp, #12
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3304      	adds	r3, #4
 8001142:	3303      	adds	r3, #3
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <_ZN8protocol14packet_encoder25calc_crc_and_close_packetEh>:

    /** Último paso para completar un paquete. Calcular el CRC y agregar el terminador.
     *   @param length tamaño del paquete.
     */
	void calc_crc_and_close_packet(uint8_t length)
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	70fb      	strb	r3, [r7, #3]
    {
       	this->payload_length = length;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	78fa      	ldrb	r2, [r7, #3]
 8001160:	701a      	strb	r2, [r3, #0]
        buffer[HEADER_SIZE-1] = length;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	78fa      	ldrb	r2, [r7, #3]
 8001166:	719a      	strb	r2, [r3, #6]
        uint16_t crc = calc_crc8(reinterpret_cast<uint8_t*>(this->get_payload_buffer()), length);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ffe4 	bl	8001136 <_ZN8protocol14packet_encoder18get_payload_bufferEv>
 800116e:	4602      	mov	r2, r0
 8001170:	78fb      	ldrb	r3, [r7, #3]
 8001172:	4619      	mov	r1, r3
 8001174:	4610      	mov	r0, r2
 8001176:	f7ff fd6f 	bl	8000c58 <_Z9calc_crc8PKhh>
 800117a:	4603      	mov	r3, r0
 800117c:	81fb      	strh	r3, [r7, #14]
        buffer[HEADER_SIZE + length] = crc & 0xFF;	        
 800117e:	78fb      	ldrb	r3, [r7, #3]
 8001180:	3303      	adds	r3, #3
 8001182:	89fa      	ldrh	r2, [r7, #14]
 8001184:	b2d1      	uxtb	r1, r2
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	460a      	mov	r2, r1
 800118c:	711a      	strb	r2, [r3, #4]
        buffer[HEADER_SIZE + length + 1] = PACKET_TERMINATOR_CHAR;
 800118e:	78fb      	ldrb	r3, [r7, #3]
 8001190:	3304      	adds	r3, #4
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	4413      	add	r3, r2
 8001196:	220a      	movs	r2, #10
 8001198:	711a      	strb	r2, [r3, #4]
    }
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <_ZNK8protocol14packet_encoder16get_packet_bytesEv>:

    /** Obtener puntero inmutable al paquete */
	inline const uint8_t* get_packet_bytes() const { return this->buffer; }
 80011a2:	b480      	push	{r7}
 80011a4:	b083      	sub	sp, #12
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3304      	adds	r3, #4
 80011ae:	4618      	mov	r0, r3
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <_ZNK8protocol14packet_encoder16get_total_lengthEv>:

    inline uint32_t get_payload_length() const { return this->payload_length; }
    
    inline uint32_t get_total_length() const { return  HEADER_SIZE + this->payload_length + TRAILER_SIZE; }
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	3305      	adds	r3, #5
 80011c8:	4618      	mov	r0, r3
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <_ZN22TelemetrySenderServiceC1Ev>:
extern Application App;

TelemetrySenderService TelemetrySender;


TelemetrySenderService::TelemetrySenderService()
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff ff98 	bl	8001114 <_ZN8protocol14packet_encoderC1Ev>
{

}
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <_ZN22TelemetrySenderServiceD1Ev>:

TelemetrySenderService::~TelemetrySenderService()
 80011ee:	b480      	push	{r7}
 80011f0:	b083      	sub	sp, #12
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
{

}
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4618      	mov	r0, r3
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <_ZN22TelemetrySenderService4MainEPv>:

void TelemetrySenderService::Main(void *argument)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
	// FIXME: mecanismo provisorio para evitar que la tarea arranque sin haberse inicializado App.Config
	osDelay(1000);
 800120e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001212:	f004 fe61 	bl	8005ed8 <osDelay>

	for(;;)
	{
		SendGeneralTelemetryReport();
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f000 f80c 	bl	8001234 <_ZN22TelemetrySenderService26SendGeneralTelemetryReportEv>
		osDelay(500);
 800121c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001220:	f004 fe5a 	bl	8005ed8 <osDelay>
		SendMotorReport();
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f000 f84f 	bl	80012c8 <_ZN22TelemetrySenderService15SendMotorReportEv>
		osDelay(500);
 800122a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800122e:	f004 fe53 	bl	8005ed8 <osDelay>
		SendGeneralTelemetryReport();
 8001232:	e7f0      	b.n	8001216 <_ZN22TelemetrySenderService4MainEPv+0x12>

08001234 <_ZN22TelemetrySenderService26SendGeneralTelemetryReportEv>:
		//HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
	}
}

void TelemetrySenderService::SendGeneralTelemetryReport()
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	App.TelemetryCycle+=1;
 800123c:	4b20      	ldr	r3, [pc, #128]	; (80012c0 <_ZN22TelemetrySenderService26SendGeneralTelemetryReportEv+0x8c>)
 800123e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001242:	3301      	adds	r3, #1
 8001244:	4a1e      	ldr	r2, [pc, #120]	; (80012c0 <_ZN22TelemetrySenderService26SendGeneralTelemetryReportEv+0x8c>)
 8001246:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0

	// Make report
	App.GeneralTelemetry.TelemetryCycle = __builtin_bswap32(App.TelemetryCycle);
 800124a:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <_ZN22TelemetrySenderService26SendGeneralTelemetryReportEv+0x8c>)
 800124c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001250:	ba1b      	rev	r3, r3
 8001252:	4a1b      	ldr	r2, [pc, #108]	; (80012c0 <_ZN22TelemetrySenderService26SendGeneralTelemetryReportEv+0x8c>)
 8001254:	f8c2 314b 	str.w	r3, [r2, #331]	; 0x14b
	App.GeneralTelemetry.ReceivedPackets = __builtin_bswap32(App.ReceivedPackets);
 8001258:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <_ZN22TelemetrySenderService26SendGeneralTelemetryReportEv+0x8c>)
 800125a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800125e:	ba1b      	rev	r3, r3
 8001260:	4a17      	ldr	r2, [pc, #92]	; (80012c0 <_ZN22TelemetrySenderService26SendGeneralTelemetryReportEv+0x8c>)
 8001262:	f8c2 314f 	str.w	r3, [r2, #335]	; 0x14f
	App.GeneralTelemetry.LedControlState = __builtin_bswap32(App.LedControlState);
 8001266:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <_ZN22TelemetrySenderService26SendGeneralTelemetryReportEv+0x8c>)
 8001268:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800126c:	ba1b      	rev	r3, r3
 800126e:	4a14      	ldr	r2, [pc, #80]	; (80012c0 <_ZN22TelemetrySenderService26SendGeneralTelemetryReportEv+0x8c>)
 8001270:	f8c2 3153 	str.w	r3, [r2, #339]	; 0x153
	App.GeneralTelemetry.LastCommandOpcode = __builtin_bswap32(App.LastCommandOpcode);
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <_ZN22TelemetrySenderService26SendGeneralTelemetryReportEv+0x8c>)
 8001276:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800127a:	ba1b      	rev	r3, r3
 800127c:	4a10      	ldr	r2, [pc, #64]	; (80012c0 <_ZN22TelemetrySenderService26SendGeneralTelemetryReportEv+0x8c>)
 800127e:	f8c2 3157 	str.w	r3, [r2, #343]	; 0x157
	App.GeneralTelemetry.LastCommandResult = __builtin_bswap32(App.LastCommandResult);
 8001282:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <_ZN22TelemetrySenderService26SendGeneralTelemetryReportEv+0x8c>)
 8001284:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8001288:	ba1b      	rev	r3, r3
 800128a:	4a0d      	ldr	r2, [pc, #52]	; (80012c0 <_ZN22TelemetrySenderService26SendGeneralTelemetryReportEv+0x8c>)
 800128c:	f8c2 315b 	str.w	r3, [r2, #347]	; 0x15b
	App.GeneralTelemetry.LasOsResult1 = __builtin_bswap32(App.LasOsResult1);
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <_ZN22TelemetrySenderService26SendGeneralTelemetryReportEv+0x8c>)
 8001292:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8001296:	ba1b      	rev	r3, r3
 8001298:	4a09      	ldr	r2, [pc, #36]	; (80012c0 <_ZN22TelemetrySenderService26SendGeneralTelemetryReportEv+0x8c>)
 800129a:	f8c2 315f 	str.w	r3, [r2, #351]	; 0x15f
	App.GeneralTelemetry.LasOsResult2 = __builtin_bswap32(App.LasOsResult2);
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <_ZN22TelemetrySenderService26SendGeneralTelemetryReportEv+0x8c>)
 80012a0:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80012a4:	ba1b      	rev	r3, r3
 80012a6:	4a06      	ldr	r2, [pc, #24]	; (80012c0 <_ZN22TelemetrySenderService26SendGeneralTelemetryReportEv+0x8c>)
 80012a8:	f8c2 3163 	str.w	r3, [r2, #355]	; 0x163

	EncodeAndSend(reinterpret_cast<const void*>(&App.GeneralTelemetry), sizeof(ApplicationGeneralTelemetry));
 80012ac:	221d      	movs	r2, #29
 80012ae:	4905      	ldr	r1, [pc, #20]	; (80012c4 <_ZN22TelemetrySenderService26SendGeneralTelemetryReportEv+0x90>)
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f000 f871 	bl	8001398 <_ZN22TelemetrySenderService13EncodeAndSendEPKvj>
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000094 	.word	0x20000094
 80012c4:	200001de 	.word	0x200001de

080012c8 <_ZN22TelemetrySenderService15SendMotorReportEv>:



void TelemetrySenderService::SendMotorReport()
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	App.MotorControlTelemetry.Throttle1 = __builtin_bswap32(reinterpret_cast<uint32_t&>(App.MotorThrottles[0]));;
 80012d0:	4b27      	ldr	r3, [pc, #156]	; (8001370 <_ZN22TelemetrySenderService15SendMotorReportEv+0xa8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	ba1b      	rev	r3, r3
 80012d6:	4a27      	ldr	r2, [pc, #156]	; (8001374 <_ZN22TelemetrySenderService15SendMotorReportEv+0xac>)
 80012d8:	f8c2 3168 	str.w	r3, [r2, #360]	; 0x168
	App.MotorControlTelemetry.Throttle2 = __builtin_bswap32(reinterpret_cast<uint32_t&>(App.MotorThrottles[1]));;
 80012dc:	4b26      	ldr	r3, [pc, #152]	; (8001378 <_ZN22TelemetrySenderService15SendMotorReportEv+0xb0>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	ba1b      	rev	r3, r3
 80012e2:	4a24      	ldr	r2, [pc, #144]	; (8001374 <_ZN22TelemetrySenderService15SendMotorReportEv+0xac>)
 80012e4:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c

	App.MotorControlTelemetry.Tachometer1 = 0;
 80012e8:	4b22      	ldr	r3, [pc, #136]	; (8001374 <_ZN22TelemetrySenderService15SendMotorReportEv+0xac>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	App.MotorControlTelemetry.Tachometer2 = 0;
 80012f0:	4b20      	ldr	r3, [pc, #128]	; (8001374 <_ZN22TelemetrySenderService15SendMotorReportEv+0xac>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
	App.MotorControlTelemetry.Tachometer3 = 0;
 80012f8:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <_ZN22TelemetrySenderService15SendMotorReportEv+0xac>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
	App.MotorControlTelemetry.Tachometer4 = 0;
 8001300:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <_ZN22TelemetrySenderService15SendMotorReportEv+0xac>)
 8001302:	2200      	movs	r2, #0
 8001304:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

	App.MotorControlTelemetry.MeasuredSpeed1 = __builtin_bswap32(reinterpret_cast<uint32_t&>(App.TachometerMeasuredSpeed[0]));
 8001308:	4b1c      	ldr	r3, [pc, #112]	; (800137c <_ZN22TelemetrySenderService15SendMotorReportEv+0xb4>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	ba1b      	rev	r3, r3
 800130e:	4a19      	ldr	r2, [pc, #100]	; (8001374 <_ZN22TelemetrySenderService15SendMotorReportEv+0xac>)
 8001310:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
	App.MotorControlTelemetry.MeasuredSpeed2 = __builtin_bswap32(reinterpret_cast<uint32_t&>(App.TachometerMeasuredSpeed[1]));
 8001314:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <_ZN22TelemetrySenderService15SendMotorReportEv+0xb8>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	ba1b      	rev	r3, r3
 800131a:	4a16      	ldr	r2, [pc, #88]	; (8001374 <_ZN22TelemetrySenderService15SendMotorReportEv+0xac>)
 800131c:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
	App.MotorControlTelemetry.MeasuredSpeed3 = __builtin_bswap32(reinterpret_cast<uint32_t&>(App.TachometerMeasuredSpeed[2]));
 8001320:	4b18      	ldr	r3, [pc, #96]	; (8001384 <_ZN22TelemetrySenderService15SendMotorReportEv+0xbc>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	ba1b      	rev	r3, r3
 8001326:	4a13      	ldr	r2, [pc, #76]	; (8001374 <_ZN22TelemetrySenderService15SendMotorReportEv+0xac>)
 8001328:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
	App.MotorControlTelemetry.MeasuredSpeed4 = __builtin_bswap32(reinterpret_cast<uint32_t&>(App.TachometerMeasuredSpeed[3]));
 800132c:	4b16      	ldr	r3, [pc, #88]	; (8001388 <_ZN22TelemetrySenderService15SendMotorReportEv+0xc0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	ba1b      	rev	r3, r3
 8001332:	4a10      	ldr	r2, [pc, #64]	; (8001374 <_ZN22TelemetrySenderService15SendMotorReportEv+0xac>)
 8001334:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c

	App.MotorControlTelemetry.SetpointSpeed1 = __builtin_bswap32(reinterpret_cast<uint32_t&>(App.MotorSetpointSpeeds[0]));
 8001338:	4b14      	ldr	r3, [pc, #80]	; (800138c <_ZN22TelemetrySenderService15SendMotorReportEv+0xc4>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	ba1b      	rev	r3, r3
 800133e:	4a0d      	ldr	r2, [pc, #52]	; (8001374 <_ZN22TelemetrySenderService15SendMotorReportEv+0xac>)
 8001340:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
	App.MotorControlTelemetry.SetpointSpeed2 = __builtin_bswap32(reinterpret_cast<uint32_t&>(App.MotorSetpointSpeeds[1]));
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <_ZN22TelemetrySenderService15SendMotorReportEv+0xc8>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	ba1b      	rev	r3, r3
 800134a:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <_ZN22TelemetrySenderService15SendMotorReportEv+0xac>)
 800134c:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194

	App.MotorControlTelemetry.StatusFlags = __builtin_bswap32(App.MotorControlModeFlags);
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <_ZN22TelemetrySenderService15SendMotorReportEv+0xac>)
 8001352:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8001356:	ba1b      	rev	r3, r3
 8001358:	4a06      	ldr	r2, [pc, #24]	; (8001374 <_ZN22TelemetrySenderService15SendMotorReportEv+0xac>)
 800135a:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	EncodeAndSend(reinterpret_cast<const void*>(&App.MotorControlTelemetry), sizeof(ApplicationMotorControlTelemetry));
 800135e:	2235      	movs	r2, #53	; 0x35
 8001360:	490c      	ldr	r1, [pc, #48]	; (8001394 <_ZN22TelemetrySenderService15SendMotorReportEv+0xcc>)
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f000 f818 	bl	8001398 <_ZN22TelemetrySenderService13EncodeAndSendEPKvj>
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000258 	.word	0x20000258
 8001374:	20000094 	.word	0x20000094
 8001378:	2000025c 	.word	0x2000025c
 800137c:	20000268 	.word	0x20000268
 8001380:	2000026c 	.word	0x2000026c
 8001384:	20000270 	.word	0x20000270
 8001388:	20000274 	.word	0x20000274
 800138c:	20000260 	.word	0x20000260
 8001390:	20000264 	.word	0x20000264
 8001394:	200001fb 	.word	0x200001fb

08001398 <_ZN22TelemetrySenderService13EncodeAndSendEPKvj>:


void TelemetrySenderService::EncodeAndSend(const void* Data, size_t SizeInBytes)
{
 8001398:	b5b0      	push	{r4, r5, r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
	memcpy( TelemetryPacketEncoder.get_payload_buffer(), Data, SizeInBytes );
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff fec5 	bl	8001136 <_ZN8protocol14packet_encoder18get_payload_bufferEv>
 80013ac:	4603      	mov	r3, r0
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	68b9      	ldr	r1, [r7, #8]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f007 fd10 	bl	8008dd8 <memcpy>

	TelemetryPacketEncoder.calc_crc_and_close_packet( SizeInBytes );
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	b2d2      	uxtb	r2, r2
 80013be:	4611      	mov	r1, r2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff fec5 	bl	8001150 <_ZN8protocol14packet_encoder25calc_crc_and_close_packetEh>

	// FIXME: Check if UART is available to transmit.
	if ( true )
	{
		HAL_UART_Transmit_IT( App.Config->UartTcTmHandle,
 80013c6:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <_ZN22TelemetrySenderService13EncodeAndSendEPKvj+0x60>)
 80013c8:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80013cc:	681c      	ldr	r4, [r3, #0]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fee6 	bl	80011a2 <_ZNK8protocol14packet_encoder16get_packet_bytesEv>
 80013d6:	4605      	mov	r5, r0
			TelemetryPacketEncoder.get_packet_bytes(),
			TelemetryPacketEncoder.get_total_length()
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff feed 	bl	80011ba <_ZNK8protocol14packet_encoder16get_total_lengthEv>
 80013e0:	4603      	mov	r3, r0
		HAL_UART_Transmit_IT( App.Config->UartTcTmHandle,
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	461a      	mov	r2, r3
 80013e6:	4629      	mov	r1, r5
 80013e8:	4620      	mov	r0, r4
 80013ea:	f002 fe0f 	bl	800400c <HAL_UART_Transmit_IT>
	{
		// FIXME: Indicate error somewhere
	}


}
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bdb0      	pop	{r4, r5, r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000094 	.word	0x20000094

080013fc <TelemetrySenderTaskMain>:

void TelemetrySenderTaskMain(void *argument)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	TelemetrySender.Main(argument);
 8001404:	6879      	ldr	r1, [r7, #4]
 8001406:	4803      	ldr	r0, [pc, #12]	; (8001414 <TelemetrySenderTaskMain+0x18>)
 8001408:	f7ff fefc 	bl	8001204 <_ZN22TelemetrySenderService4MainEPv>
}
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	2000049c 	.word	0x2000049c

08001418 <_Z41__static_initialization_and_destruction_0ii>:
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d107      	bne.n	8001438 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800142e:	4293      	cmp	r3, r2
 8001430:	d102      	bne.n	8001438 <_Z41__static_initialization_and_destruction_0ii+0x20>
TelemetrySenderService TelemetrySender;
 8001432:	4809      	ldr	r0, [pc, #36]	; (8001458 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001434:	f7ff fece 	bl	80011d4 <_ZN22TelemetrySenderServiceC1Ev>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d107      	bne.n	800144e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001444:	4293      	cmp	r3, r2
 8001446:	d102      	bne.n	800144e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001448:	4803      	ldr	r0, [pc, #12]	; (8001458 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800144a:	f7ff fed0 	bl	80011ee <_ZN22TelemetrySenderServiceD1Ev>
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2000049c 	.word	0x2000049c

0800145c <_GLOBAL__sub_I_TelemetrySender>:
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
 8001460:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001464:	2001      	movs	r0, #1
 8001466:	f7ff ffd7 	bl	8001418 <_Z41__static_initialization_and_destruction_0ii>
 800146a:	bd80      	pop	{r7, pc}

0800146c <_GLOBAL__sub_D_TelemetrySender>:
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
 8001470:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001474:	2000      	movs	r0, #0
 8001476:	f7ff ffcf 	bl	8001418 <_Z41__static_initialization_and_destruction_0ii>
 800147a:	bd80      	pop	{r7, pc}

0800147c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001480:	f000 fc35 	bl	8001cee <HAL_Init>
  //HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
  //HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001484:	f000 f842 	bl	800150c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001488:	f000 f910 	bl	80016ac <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800148c:	f000 f8b0 	bl	80015f0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001490:	f000 f8de 	bl	8001650 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001494:	f004 fc10 	bl	8005cb8 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CommandReceiverQueue */
  CommandReceiverQueueHandle = osMessageQueueNew (16, sizeof(uint8_t), &CommandReceiverQueue_attributes);
 8001498:	4a11      	ldr	r2, [pc, #68]	; (80014e0 <main+0x64>)
 800149a:	2101      	movs	r1, #1
 800149c:	2010      	movs	r0, #16
 800149e:	f004 fd49 	bl	8005f34 <osMessageQueueNew>
 80014a2:	4603      	mov	r3, r0
 80014a4:	4a0f      	ldr	r2, [pc, #60]	; (80014e4 <main+0x68>)
 80014a6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(DefaultTaskMain, NULL, &defaultTask_attributes);
 80014a8:	4a0f      	ldr	r2, [pc, #60]	; (80014e8 <main+0x6c>)
 80014aa:	2100      	movs	r1, #0
 80014ac:	480f      	ldr	r0, [pc, #60]	; (80014ec <main+0x70>)
 80014ae:	f004 fc6d 	bl	8005d8c <osThreadNew>
 80014b2:	4603      	mov	r3, r0
 80014b4:	4a0e      	ldr	r2, [pc, #56]	; (80014f0 <main+0x74>)
 80014b6:	6013      	str	r3, [r2, #0]

  /* creation of commandReceiver */
  commandReceiverHandle = osThreadNew(CommandReceiverTaskMain, NULL, &commandReceiver_attributes);
 80014b8:	4a0e      	ldr	r2, [pc, #56]	; (80014f4 <main+0x78>)
 80014ba:	2100      	movs	r1, #0
 80014bc:	480e      	ldr	r0, [pc, #56]	; (80014f8 <main+0x7c>)
 80014be:	f004 fc65 	bl	8005d8c <osThreadNew>
 80014c2:	4603      	mov	r3, r0
 80014c4:	4a0d      	ldr	r2, [pc, #52]	; (80014fc <main+0x80>)
 80014c6:	6013      	str	r3, [r2, #0]

  /* creation of telemetrySender */
  telemetrySenderHandle = osThreadNew(TelemetrySenderTaskMain, NULL, &telemetrySender_attributes);
 80014c8:	4a0d      	ldr	r2, [pc, #52]	; (8001500 <main+0x84>)
 80014ca:	2100      	movs	r1, #0
 80014cc:	480d      	ldr	r0, [pc, #52]	; (8001504 <main+0x88>)
 80014ce:	f004 fc5d 	bl	8005d8c <osThreadNew>
 80014d2:	4603      	mov	r3, r0
 80014d4:	4a0c      	ldr	r2, [pc, #48]	; (8001508 <main+0x8c>)
 80014d6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80014d8:	f004 fc22 	bl	8005d20 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <main+0x60>
 80014de:	bf00      	nop
 80014e0:	080091a4 	.word	0x080091a4
 80014e4:	20000b44 	.word	0x20000b44
 80014e8:	08009138 	.word	0x08009138
 80014ec:	08001879 	.word	0x08001879
 80014f0:	20000b38 	.word	0x20000b38
 80014f4:	0800915c 	.word	0x0800915c
 80014f8:	08000f95 	.word	0x08000f95
 80014fc:	20000b3c 	.word	0x20000b3c
 8001500:	08009180 	.word	0x08009180
 8001504:	080013fd 	.word	0x080013fd
 8001508:	20000b40 	.word	0x20000b40

0800150c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b094      	sub	sp, #80	; 0x50
 8001510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001512:	f107 031c 	add.w	r3, r7, #28
 8001516:	2234      	movs	r2, #52	; 0x34
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f007 fc6a 	bl	8008df4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001520:	f107 0308 	add.w	r3, r7, #8
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001530:	f001 f8b0 	bl	8002694 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001534:	4b2c      	ldr	r3, [pc, #176]	; (80015e8 <SystemClock_Config+0xdc>)
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	4a2b      	ldr	r2, [pc, #172]	; (80015e8 <SystemClock_Config+0xdc>)
 800153a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153e:	6413      	str	r3, [r2, #64]	; 0x40
 8001540:	4b29      	ldr	r3, [pc, #164]	; (80015e8 <SystemClock_Config+0xdc>)
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800154c:	4b27      	ldr	r3, [pc, #156]	; (80015ec <SystemClock_Config+0xe0>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001554:	4a25      	ldr	r2, [pc, #148]	; (80015ec <SystemClock_Config+0xe0>)
 8001556:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	4b23      	ldr	r3, [pc, #140]	; (80015ec <SystemClock_Config+0xe0>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001564:	603b      	str	r3, [r7, #0]
 8001566:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001568:	2301      	movs	r3, #1
 800156a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800156c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001570:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001572:	2302      	movs	r3, #2
 8001574:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001576:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800157a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800157c:	2304      	movs	r3, #4
 800157e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001580:	2360      	movs	r3, #96	; 0x60
 8001582:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001584:	2302      	movs	r3, #2
 8001586:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001588:	2304      	movs	r3, #4
 800158a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800158c:	2302      	movs	r3, #2
 800158e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001590:	f107 031c 	add.w	r3, r7, #28
 8001594:	4618      	mov	r0, r3
 8001596:	f001 f8dd 	bl	8002754 <HAL_RCC_OscConfig>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80015a0:	f000 f994 	bl	80018cc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80015a4:	f001 f886 	bl	80026b4 <HAL_PWREx_EnableOverDrive>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80015ae:	f000 f98d 	bl	80018cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015b2:	230f      	movs	r3, #15
 80015b4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015b6:	2302      	movs	r3, #2
 80015b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015c4:	2300      	movs	r3, #0
 80015c6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015c8:	f107 0308 	add.w	r3, r7, #8
 80015cc:	2103      	movs	r1, #3
 80015ce:	4618      	mov	r0, r3
 80015d0:	f001 fb6e 	bl	8002cb0 <HAL_RCC_ClockConfig>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80015da:	f000 f977 	bl	80018cc <Error_Handler>
  }
}
 80015de:	bf00      	nop
 80015e0:	3750      	adds	r7, #80	; 0x50
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40007000 	.word	0x40007000

080015f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015f4:	4b14      	ldr	r3, [pc, #80]	; (8001648 <MX_USART3_UART_Init+0x58>)
 80015f6:	4a15      	ldr	r2, [pc, #84]	; (800164c <MX_USART3_UART_Init+0x5c>)
 80015f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015fa:	4b13      	ldr	r3, [pc, #76]	; (8001648 <MX_USART3_UART_Init+0x58>)
 80015fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001600:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <MX_USART3_UART_Init+0x58>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001608:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <MX_USART3_UART_Init+0x58>)
 800160a:	2200      	movs	r2, #0
 800160c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <MX_USART3_UART_Init+0x58>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <MX_USART3_UART_Init+0x58>)
 8001616:	220c      	movs	r2, #12
 8001618:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800161a:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <MX_USART3_UART_Init+0x58>)
 800161c:	2200      	movs	r2, #0
 800161e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001620:	4b09      	ldr	r3, [pc, #36]	; (8001648 <MX_USART3_UART_Init+0x58>)
 8001622:	2200      	movs	r2, #0
 8001624:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001626:	4b08      	ldr	r3, [pc, #32]	; (8001648 <MX_USART3_UART_Init+0x58>)
 8001628:	2200      	movs	r2, #0
 800162a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <MX_USART3_UART_Init+0x58>)
 800162e:	2200      	movs	r2, #0
 8001630:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001632:	4805      	ldr	r0, [pc, #20]	; (8001648 <MX_USART3_UART_Init+0x58>)
 8001634:	f002 fc9c 	bl	8003f70 <HAL_UART_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800163e:	f000 f945 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200005a8 	.word	0x200005a8
 800164c:	40004800 	.word	0x40004800

08001650 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001654:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001656:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800165a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800165c:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800165e:	2206      	movs	r2, #6
 8001660:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001662:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001664:	2202      	movs	r2, #2
 8001666:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001668:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800166a:	2200      	movs	r2, #0
 800166c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800166e:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001670:	2202      	movs	r2, #2
 8001672:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001676:	2201      	movs	r2, #1
 8001678:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800167a:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800167c:	2200      	movs	r2, #0
 800167e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001680:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001682:	2200      	movs	r2, #0
 8001684:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001686:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001688:	2201      	movs	r2, #1
 800168a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800168e:	2200      	movs	r2, #0
 8001690:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001692:	4805      	ldr	r0, [pc, #20]	; (80016a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001694:	f000 feb5 	bl	8002402 <HAL_PCD_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800169e:	f000 f915 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000630 	.word	0x20000630

080016ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08c      	sub	sp, #48	; 0x30
 80016b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b2:	f107 031c 	add.w	r3, r7, #28
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
 80016c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c2:	4b68      	ldr	r3, [pc, #416]	; (8001864 <MX_GPIO_Init+0x1b8>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a67      	ldr	r2, [pc, #412]	; (8001864 <MX_GPIO_Init+0x1b8>)
 80016c8:	f043 0304 	orr.w	r3, r3, #4
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b65      	ldr	r3, [pc, #404]	; (8001864 <MX_GPIO_Init+0x1b8>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	61bb      	str	r3, [r7, #24]
 80016d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016da:	4b62      	ldr	r3, [pc, #392]	; (8001864 <MX_GPIO_Init+0x1b8>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a61      	ldr	r2, [pc, #388]	; (8001864 <MX_GPIO_Init+0x1b8>)
 80016e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b5f      	ldr	r3, [pc, #380]	; (8001864 <MX_GPIO_Init+0x1b8>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f2:	4b5c      	ldr	r3, [pc, #368]	; (8001864 <MX_GPIO_Init+0x1b8>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a5b      	ldr	r2, [pc, #364]	; (8001864 <MX_GPIO_Init+0x1b8>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b59      	ldr	r3, [pc, #356]	; (8001864 <MX_GPIO_Init+0x1b8>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800170a:	4b56      	ldr	r3, [pc, #344]	; (8001864 <MX_GPIO_Init+0x1b8>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a55      	ldr	r2, [pc, #340]	; (8001864 <MX_GPIO_Init+0x1b8>)
 8001710:	f043 0302 	orr.w	r3, r3, #2
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b53      	ldr	r3, [pc, #332]	; (8001864 <MX_GPIO_Init+0x1b8>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001722:	4b50      	ldr	r3, [pc, #320]	; (8001864 <MX_GPIO_Init+0x1b8>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a4f      	ldr	r2, [pc, #316]	; (8001864 <MX_GPIO_Init+0x1b8>)
 8001728:	f043 0308 	orr.w	r3, r3, #8
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b4d      	ldr	r3, [pc, #308]	; (8001864 <MX_GPIO_Init+0x1b8>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f003 0308 	and.w	r3, r3, #8
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800173a:	4b4a      	ldr	r3, [pc, #296]	; (8001864 <MX_GPIO_Init+0x1b8>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a49      	ldr	r2, [pc, #292]	; (8001864 <MX_GPIO_Init+0x1b8>)
 8001740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b47      	ldr	r3, [pc, #284]	; (8001864 <MX_GPIO_Init+0x1b8>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001752:	2200      	movs	r2, #0
 8001754:	f244 0181 	movw	r1, #16513	; 0x4081
 8001758:	4843      	ldr	r0, [pc, #268]	; (8001868 <MX_GPIO_Init+0x1bc>)
 800175a:	f000 fe39 	bl	80023d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	2140      	movs	r1, #64	; 0x40
 8001762:	4842      	ldr	r0, [pc, #264]	; (800186c <MX_GPIO_Init+0x1c0>)
 8001764:	f000 fe34 	bl	80023d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001768:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800176c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800176e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001772:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001778:	f107 031c 	add.w	r3, r7, #28
 800177c:	4619      	mov	r1, r3
 800177e:	483c      	ldr	r0, [pc, #240]	; (8001870 <MX_GPIO_Init+0x1c4>)
 8001780:	f000 fc7a 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001784:	2332      	movs	r3, #50	; 0x32
 8001786:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001788:	2302      	movs	r3, #2
 800178a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001790:	2303      	movs	r3, #3
 8001792:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001794:	230b      	movs	r3, #11
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001798:	f107 031c 	add.w	r3, r7, #28
 800179c:	4619      	mov	r1, r3
 800179e:	4834      	ldr	r0, [pc, #208]	; (8001870 <MX_GPIO_Init+0x1c4>)
 80017a0:	f000 fc6a 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80017a4:	2386      	movs	r3, #134	; 0x86
 80017a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a8:	2302      	movs	r3, #2
 80017aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b0:	2303      	movs	r3, #3
 80017b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017b4:	230b      	movs	r3, #11
 80017b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b8:	f107 031c 	add.w	r3, r7, #28
 80017bc:	4619      	mov	r1, r3
 80017be:	482d      	ldr	r0, [pc, #180]	; (8001874 <MX_GPIO_Init+0x1c8>)
 80017c0:	f000 fc5a 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80017c4:	f244 0381 	movw	r3, #16513	; 0x4081
 80017c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ca:	2301      	movs	r3, #1
 80017cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d2:	2300      	movs	r3, #0
 80017d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d6:	f107 031c 	add.w	r3, r7, #28
 80017da:	4619      	mov	r1, r3
 80017dc:	4822      	ldr	r0, [pc, #136]	; (8001868 <MX_GPIO_Init+0x1bc>)
 80017de:	f000 fc4b 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80017e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e8:	2302      	movs	r3, #2
 80017ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f0:	2303      	movs	r3, #3
 80017f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017f4:	230b      	movs	r3, #11
 80017f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80017f8:	f107 031c 	add.w	r3, r7, #28
 80017fc:	4619      	mov	r1, r3
 80017fe:	481a      	ldr	r0, [pc, #104]	; (8001868 <MX_GPIO_Init+0x1bc>)
 8001800:	f000 fc3a 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001804:	2340      	movs	r3, #64	; 0x40
 8001806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001808:	2301      	movs	r3, #1
 800180a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001810:	2300      	movs	r3, #0
 8001812:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001814:	f107 031c 	add.w	r3, r7, #28
 8001818:	4619      	mov	r1, r3
 800181a:	4814      	ldr	r0, [pc, #80]	; (800186c <MX_GPIO_Init+0x1c0>)
 800181c:	f000 fc2c 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001820:	2380      	movs	r3, #128	; 0x80
 8001822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001824:	2300      	movs	r3, #0
 8001826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800182c:	f107 031c 	add.w	r3, r7, #28
 8001830:	4619      	mov	r1, r3
 8001832:	480e      	ldr	r0, [pc, #56]	; (800186c <MX_GPIO_Init+0x1c0>)
 8001834:	f000 fc20 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001838:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800183c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	2302      	movs	r3, #2
 8001840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001846:	2303      	movs	r3, #3
 8001848:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800184a:	230b      	movs	r3, #11
 800184c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800184e:	f107 031c 	add.w	r3, r7, #28
 8001852:	4619      	mov	r1, r3
 8001854:	4805      	ldr	r0, [pc, #20]	; (800186c <MX_GPIO_Init+0x1c0>)
 8001856:	f000 fc0f 	bl	8002078 <HAL_GPIO_Init>

}
 800185a:	bf00      	nop
 800185c:	3730      	adds	r7, #48	; 0x30
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40023800 	.word	0x40023800
 8001868:	40020400 	.word	0x40020400
 800186c:	40021800 	.word	0x40021800
 8001870:	40020800 	.word	0x40020800
 8001874:	40020000 	.word	0x40020000

08001878 <DefaultTaskMain>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_DefaultTaskMain */
void DefaultTaskMain(void *argument)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	Config.UartTcTmHandle = &huart3;
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <DefaultTaskMain+0x24>)
 8001882:	4a07      	ldr	r2, [pc, #28]	; (80018a0 <DefaultTaskMain+0x28>)
 8001884:	601a      	str	r2, [r3, #0]
	Config.CommandReceiverQueueHandle = CommandReceiverQueueHandle;
 8001886:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <DefaultTaskMain+0x2c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a04      	ldr	r2, [pc, #16]	; (800189c <DefaultTaskMain+0x24>)
 800188c:	6053      	str	r3, [r2, #4]
	ApplicationMain(&Config);
 800188e:	4803      	ldr	r0, [pc, #12]	; (800189c <DefaultTaskMain+0x24>)
 8001890:	f7ff f966 	bl	8000b60 <ApplicationMain>
  /* USER CODE END 5 */
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000ba8 	.word	0x20000ba8
 80018a0:	200005a8 	.word	0x200005a8
 80018a4:	20000b44 	.word	0x20000b44

080018a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a04      	ldr	r2, [pc, #16]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d101      	bne.n	80018be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018ba:	f000 fa25 	bl	8001d08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40001400 	.word	0x40001400

080018cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018d0:	b672      	cpsid	i
}
 80018d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <Error_Handler+0x8>
	...

080018d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80018de:	4b11      	ldr	r3, [pc, #68]	; (8001924 <HAL_MspInit+0x4c>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	4a10      	ldr	r2, [pc, #64]	; (8001924 <HAL_MspInit+0x4c>)
 80018e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ea:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <HAL_MspInit+0x4c>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f6:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <HAL_MspInit+0x4c>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <HAL_MspInit+0x4c>)
 80018fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001900:	6453      	str	r3, [r2, #68]	; 0x44
 8001902:	4b08      	ldr	r3, [pc, #32]	; (8001924 <HAL_MspInit+0x4c>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800190a:	603b      	str	r3, [r7, #0]
 800190c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800190e:	2200      	movs	r2, #0
 8001910:	210f      	movs	r1, #15
 8001912:	f06f 0001 	mvn.w	r0, #1
 8001916:	f000 faf3 	bl	8001f00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800

08001928 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b0ae      	sub	sp, #184	; 0xb8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	2290      	movs	r2, #144	; 0x90
 8001946:	2100      	movs	r1, #0
 8001948:	4618      	mov	r0, r3
 800194a:	f007 fa53 	bl	8008df4 <memset>
  if(huart->Instance==USART3)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a26      	ldr	r2, [pc, #152]	; (80019ec <HAL_UART_MspInit+0xc4>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d144      	bne.n	80019e2 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001958:	f44f 7380 	mov.w	r3, #256	; 0x100
 800195c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800195e:	2300      	movs	r3, #0
 8001960:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001962:	f107 0314 	add.w	r3, r7, #20
 8001966:	4618      	mov	r0, r3
 8001968:	f001 fbfa 	bl	8003160 <HAL_RCCEx_PeriphCLKConfig>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001972:	f7ff ffab 	bl	80018cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001976:	4b1e      	ldr	r3, [pc, #120]	; (80019f0 <HAL_UART_MspInit+0xc8>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	4a1d      	ldr	r2, [pc, #116]	; (80019f0 <HAL_UART_MspInit+0xc8>)
 800197c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001980:	6413      	str	r3, [r2, #64]	; 0x40
 8001982:	4b1b      	ldr	r3, [pc, #108]	; (80019f0 <HAL_UART_MspInit+0xc8>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800198e:	4b18      	ldr	r3, [pc, #96]	; (80019f0 <HAL_UART_MspInit+0xc8>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	4a17      	ldr	r2, [pc, #92]	; (80019f0 <HAL_UART_MspInit+0xc8>)
 8001994:	f043 0308 	orr.w	r3, r3, #8
 8001998:	6313      	str	r3, [r2, #48]	; 0x30
 800199a:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <HAL_UART_MspInit+0xc8>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f003 0308 	and.w	r3, r3, #8
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80019a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ba:	2303      	movs	r3, #3
 80019bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019c0:	2307      	movs	r3, #7
 80019c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019c6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019ca:	4619      	mov	r1, r3
 80019cc:	4809      	ldr	r0, [pc, #36]	; (80019f4 <HAL_UART_MspInit+0xcc>)
 80019ce:	f000 fb53 	bl	8002078 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2105      	movs	r1, #5
 80019d6:	2027      	movs	r0, #39	; 0x27
 80019d8:	f000 fa92 	bl	8001f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80019dc:	2027      	movs	r0, #39	; 0x27
 80019de:	f000 faab 	bl	8001f38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019e2:	bf00      	nop
 80019e4:	37b8      	adds	r7, #184	; 0xb8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40004800 	.word	0x40004800
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40020c00 	.word	0x40020c00

080019f8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b0ae      	sub	sp, #184	; 0xb8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	2290      	movs	r2, #144	; 0x90
 8001a16:	2100      	movs	r1, #0
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f007 f9eb 	bl	8008df4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a26:	d159      	bne.n	8001adc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001a28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a2c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f001 fb91 	bl	8003160 <HAL_RCCEx_PeriphCLKConfig>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001a44:	f7ff ff42 	bl	80018cc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a48:	4b26      	ldr	r3, [pc, #152]	; (8001ae4 <HAL_PCD_MspInit+0xec>)
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4c:	4a25      	ldr	r2, [pc, #148]	; (8001ae4 <HAL_PCD_MspInit+0xec>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	6313      	str	r3, [r2, #48]	; 0x30
 8001a54:	4b23      	ldr	r3, [pc, #140]	; (8001ae4 <HAL_PCD_MspInit+0xec>)
 8001a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001a60:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001a64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a74:	2303      	movs	r3, #3
 8001a76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a7a:	230a      	movs	r3, #10
 8001a7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a80:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a84:	4619      	mov	r1, r3
 8001a86:	4818      	ldr	r0, [pc, #96]	; (8001ae8 <HAL_PCD_MspInit+0xf0>)
 8001a88:	f000 faf6 	bl	8002078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001a8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a94:	2300      	movs	r3, #0
 8001a96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001aa0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4810      	ldr	r0, [pc, #64]	; (8001ae8 <HAL_PCD_MspInit+0xf0>)
 8001aa8:	f000 fae6 	bl	8002078 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001aac:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <HAL_PCD_MspInit+0xec>)
 8001aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab0:	4a0c      	ldr	r2, [pc, #48]	; (8001ae4 <HAL_PCD_MspInit+0xec>)
 8001ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ab6:	6353      	str	r3, [r2, #52]	; 0x34
 8001ab8:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <HAL_PCD_MspInit+0xec>)
 8001aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <HAL_PCD_MspInit+0xec>)
 8001ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac8:	4a06      	ldr	r2, [pc, #24]	; (8001ae4 <HAL_PCD_MspInit+0xec>)
 8001aca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ace:	6453      	str	r3, [r2, #68]	; 0x44
 8001ad0:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <HAL_PCD_MspInit+0xec>)
 8001ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001adc:	bf00      	nop
 8001ade:	37b8      	adds	r7, #184	; 0xb8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40020000 	.word	0x40020000

08001aec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08e      	sub	sp, #56	; 0x38
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001afc:	4b33      	ldr	r3, [pc, #204]	; (8001bcc <HAL_InitTick+0xe0>)
 8001afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b00:	4a32      	ldr	r2, [pc, #200]	; (8001bcc <HAL_InitTick+0xe0>)
 8001b02:	f043 0320 	orr.w	r3, r3, #32
 8001b06:	6413      	str	r3, [r2, #64]	; 0x40
 8001b08:	4b30      	ldr	r3, [pc, #192]	; (8001bcc <HAL_InitTick+0xe0>)
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	f003 0320 	and.w	r3, r3, #32
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b14:	f107 0210 	add.w	r2, r7, #16
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	4611      	mov	r1, r2
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f001 faec 	bl	80030fc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001b24:	6a3b      	ldr	r3, [r7, #32]
 8001b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d103      	bne.n	8001b36 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b2e:	f001 fabd 	bl	80030ac <HAL_RCC_GetPCLK1Freq>
 8001b32:	6378      	str	r0, [r7, #52]	; 0x34
 8001b34:	e004      	b.n	8001b40 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001b36:	f001 fab9 	bl	80030ac <HAL_RCC_GetPCLK1Freq>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b42:	4a23      	ldr	r2, [pc, #140]	; (8001bd0 <HAL_InitTick+0xe4>)
 8001b44:	fba2 2303 	umull	r2, r3, r2, r3
 8001b48:	0c9b      	lsrs	r3, r3, #18
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001b4e:	4b21      	ldr	r3, [pc, #132]	; (8001bd4 <HAL_InitTick+0xe8>)
 8001b50:	4a21      	ldr	r2, [pc, #132]	; (8001bd8 <HAL_InitTick+0xec>)
 8001b52:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001b54:	4b1f      	ldr	r3, [pc, #124]	; (8001bd4 <HAL_InitTick+0xe8>)
 8001b56:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b5a:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001b5c:	4a1d      	ldr	r2, [pc, #116]	; (8001bd4 <HAL_InitTick+0xe8>)
 8001b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b60:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001b62:	4b1c      	ldr	r3, [pc, #112]	; (8001bd4 <HAL_InitTick+0xe8>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b68:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <HAL_InitTick+0xe8>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6e:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <HAL_InitTick+0xe8>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8001b74:	4817      	ldr	r0, [pc, #92]	; (8001bd4 <HAL_InitTick+0xe8>)
 8001b76:	f001 ff1b 	bl	80039b0 <HAL_TIM_Base_Init>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001b80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d11b      	bne.n	8001bc0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001b88:	4812      	ldr	r0, [pc, #72]	; (8001bd4 <HAL_InitTick+0xe8>)
 8001b8a:	f001 ff73 	bl	8003a74 <HAL_TIM_Base_Start_IT>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001b94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d111      	bne.n	8001bc0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001b9c:	2037      	movs	r0, #55	; 0x37
 8001b9e:	f000 f9cb 	bl	8001f38 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b0f      	cmp	r3, #15
 8001ba6:	d808      	bhi.n	8001bba <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	2037      	movs	r0, #55	; 0x37
 8001bae:	f000 f9a7 	bl	8001f00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bb2:	4a0a      	ldr	r2, [pc, #40]	; (8001bdc <HAL_InitTick+0xf0>)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6013      	str	r3, [r2, #0]
 8001bb8:	e002      	b.n	8001bc0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001bc0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3738      	adds	r7, #56	; 0x38
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	431bde83 	.word	0x431bde83
 8001bd4:	20000bb0 	.word	0x20000bb0
 8001bd8:	40001400 	.word	0x40001400
 8001bdc:	20000004 	.word	0x20000004

08001be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001be4:	e7fe      	b.n	8001be4 <NMI_Handler+0x4>

08001be6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bea:	e7fe      	b.n	8001bea <HardFault_Handler+0x4>

08001bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf0:	e7fe      	b.n	8001bf0 <MemManage_Handler+0x4>

08001bf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bf6:	e7fe      	b.n	8001bf6 <BusFault_Handler+0x4>

08001bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bfc:	e7fe      	b.n	8001bfc <UsageFault_Handler+0x4>

08001bfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c10:	4802      	ldr	r0, [pc, #8]	; (8001c1c <USART3_IRQHandler+0x10>)
 8001c12:	f002 fa9d 	bl	8004150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	200005a8 	.word	0x200005a8

08001c20 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001c24:	4802      	ldr	r0, [pc, #8]	; (8001c30 <TIM7_IRQHandler+0x10>)
 8001c26:	f001 ff9d 	bl	8003b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000bb0 	.word	0x20000bb0

08001c34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return 1;
 8001c38:	2301      	movs	r3, #1
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <_kill>:

int _kill(int pid, int sig)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c4e:	f007 f897 	bl	8008d80 <__errno>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2216      	movs	r2, #22
 8001c56:	601a      	str	r2, [r3, #0]
  return -1;
 8001c58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <_exit>:

void _exit (int status)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f7ff ffe7 	bl	8001c44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c76:	e7fe      	b.n	8001c76 <_exit+0x12>

08001c78 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <SystemInit+0x20>)
 8001c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c82:	4a05      	ldr	r2, [pc, #20]	; (8001c98 <SystemInit+0x20>)
 8001c84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ca0:	480d      	ldr	r0, [pc, #52]	; (8001cd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ca2:	490e      	ldr	r1, [pc, #56]	; (8001cdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ca4:	4a0e      	ldr	r2, [pc, #56]	; (8001ce0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ca8:	e002      	b.n	8001cb0 <LoopCopyDataInit>

08001caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cae:	3304      	adds	r3, #4

08001cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cb4:	d3f9      	bcc.n	8001caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cb6:	4a0b      	ldr	r2, [pc, #44]	; (8001ce4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cb8:	4c0b      	ldr	r4, [pc, #44]	; (8001ce8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cbc:	e001      	b.n	8001cc2 <LoopFillZerobss>

08001cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc0:	3204      	adds	r2, #4

08001cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cc4:	d3fb      	bcc.n	8001cbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cc6:	f7ff ffd7 	bl	8001c78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cca:	f007 f85f 	bl	8008d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cce:	f7ff fbd5 	bl	800147c <main>
  bx  lr    
 8001cd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cd4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cdc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001ce0:	0800925c 	.word	0x0800925c
  ldr r2, =_sbss
 8001ce4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001ce8:	20005614 	.word	0x20005614

08001cec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cec:	e7fe      	b.n	8001cec <ADC_IRQHandler>

08001cee <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cf2:	2003      	movs	r0, #3
 8001cf4:	f000 f8f9 	bl	8001eea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cf8:	200f      	movs	r0, #15
 8001cfa:	f7ff fef7 	bl	8001aec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cfe:	f7ff fdeb 	bl	80018d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_IncTick+0x20>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	461a      	mov	r2, r3
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <HAL_IncTick+0x24>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4413      	add	r3, r2
 8001d18:	4a04      	ldr	r2, [pc, #16]	; (8001d2c <HAL_IncTick+0x24>)
 8001d1a:	6013      	str	r3, [r2, #0]
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	20000008 	.word	0x20000008
 8001d2c:	20000bfc 	.word	0x20000bfc

08001d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return uwTick;
 8001d34:	4b03      	ldr	r3, [pc, #12]	; (8001d44 <HAL_GetTick+0x14>)
 8001d36:	681b      	ldr	r3, [r3, #0]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	20000bfc 	.word	0x20000bfc

08001d48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d50:	f7ff ffee 	bl	8001d30 <HAL_GetTick>
 8001d54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d60:	d005      	beq.n	8001d6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d62:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <HAL_Delay+0x44>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	461a      	mov	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d6e:	bf00      	nop
 8001d70:	f7ff ffde 	bl	8001d30 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d8f7      	bhi.n	8001d70 <HAL_Delay+0x28>
  {
  }
}
 8001d80:	bf00      	nop
 8001d82:	bf00      	nop
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000008 	.word	0x20000008

08001d90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <__NVIC_SetPriorityGrouping+0x40>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dac:	4013      	ands	r3, r2
 8001dae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dbe:	4a04      	ldr	r2, [pc, #16]	; (8001dd0 <__NVIC_SetPriorityGrouping+0x40>)
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	60d3      	str	r3, [r2, #12]
}
 8001dc4:	bf00      	nop
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	e000ed00 	.word	0xe000ed00
 8001dd4:	05fa0000 	.word	0x05fa0000

08001dd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ddc:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	0a1b      	lsrs	r3, r3, #8
 8001de2:	f003 0307 	and.w	r3, r3, #7
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	db0b      	blt.n	8001e1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	f003 021f 	and.w	r2, r3, #31
 8001e0c:	4907      	ldr	r1, [pc, #28]	; (8001e2c <__NVIC_EnableIRQ+0x38>)
 8001e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e12:	095b      	lsrs	r3, r3, #5
 8001e14:	2001      	movs	r0, #1
 8001e16:	fa00 f202 	lsl.w	r2, r0, r2
 8001e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	e000e100 	.word	0xe000e100

08001e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	6039      	str	r1, [r7, #0]
 8001e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	db0a      	blt.n	8001e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	490c      	ldr	r1, [pc, #48]	; (8001e7c <__NVIC_SetPriority+0x4c>)
 8001e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4e:	0112      	lsls	r2, r2, #4
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	440b      	add	r3, r1
 8001e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e58:	e00a      	b.n	8001e70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	4908      	ldr	r1, [pc, #32]	; (8001e80 <__NVIC_SetPriority+0x50>)
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	3b04      	subs	r3, #4
 8001e68:	0112      	lsls	r2, r2, #4
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	761a      	strb	r2, [r3, #24]
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	e000e100 	.word	0xe000e100
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b089      	sub	sp, #36	; 0x24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f1c3 0307 	rsb	r3, r3, #7
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	bf28      	it	cs
 8001ea2:	2304      	movcs	r3, #4
 8001ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	2b06      	cmp	r3, #6
 8001eac:	d902      	bls.n	8001eb4 <NVIC_EncodePriority+0x30>
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3b03      	subs	r3, #3
 8001eb2:	e000      	b.n	8001eb6 <NVIC_EncodePriority+0x32>
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43da      	mvns	r2, r3
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ecc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed6:	43d9      	mvns	r1, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001edc:	4313      	orrs	r3, r2
         );
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3724      	adds	r7, #36	; 0x24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff ff4c 	bl	8001d90 <__NVIC_SetPriorityGrouping>
}
 8001ef8:	bf00      	nop
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
 8001f0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f12:	f7ff ff61 	bl	8001dd8 <__NVIC_GetPriorityGrouping>
 8001f16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	68b9      	ldr	r1, [r7, #8]
 8001f1c:	6978      	ldr	r0, [r7, #20]
 8001f1e:	f7ff ffb1 	bl	8001e84 <NVIC_EncodePriority>
 8001f22:	4602      	mov	r2, r0
 8001f24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f28:	4611      	mov	r1, r2
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff ff80 	bl	8001e30 <__NVIC_SetPriority>
}
 8001f30:	bf00      	nop
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff ff54 	bl	8001df4 <__NVIC_EnableIRQ>
}
 8001f4c:	bf00      	nop
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f60:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f62:	f7ff fee5 	bl	8001d30 <HAL_GetTick>
 8001f66:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d008      	beq.n	8001f86 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2280      	movs	r2, #128	; 0x80
 8001f78:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e052      	b.n	800202c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0216 	bic.w	r2, r2, #22
 8001f94:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	695a      	ldr	r2, [r3, #20]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fa4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d103      	bne.n	8001fb6 <HAL_DMA_Abort+0x62>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d007      	beq.n	8001fc6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 0208 	bic.w	r2, r2, #8
 8001fc4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0201 	bic.w	r2, r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fd6:	e013      	b.n	8002000 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fd8:	f7ff feaa 	bl	8001d30 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b05      	cmp	r3, #5
 8001fe4:	d90c      	bls.n	8002000 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2220      	movs	r2, #32
 8001fea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2203      	movs	r2, #3
 8001ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e015      	b.n	800202c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1e4      	bne.n	8001fd8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002012:	223f      	movs	r2, #63	; 0x3f
 8002014:	409a      	lsls	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d004      	beq.n	8002052 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2280      	movs	r2, #128	; 0x80
 800204c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e00c      	b.n	800206c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2205      	movs	r2, #5
 8002056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0201 	bic.w	r2, r2, #1
 8002068:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002078:	b480      	push	{r7}
 800207a:	b089      	sub	sp, #36	; 0x24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800208a:	2300      	movs	r3, #0
 800208c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800208e:	2300      	movs	r3, #0
 8002090:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
 8002096:	e175      	b.n	8002384 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002098:	2201      	movs	r2, #1
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	4013      	ands	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	f040 8164 	bne.w	800237e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f003 0303 	and.w	r3, r3, #3
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d005      	beq.n	80020ce <HAL_GPIO_Init+0x56>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d130      	bne.n	8002130 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	2203      	movs	r2, #3
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43db      	mvns	r3, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4013      	ands	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	68da      	ldr	r2, [r3, #12]
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002104:	2201      	movs	r2, #1
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	091b      	lsrs	r3, r3, #4
 800211a:	f003 0201 	and.w	r2, r3, #1
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	2b03      	cmp	r3, #3
 800213a:	d017      	beq.n	800216c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	2203      	movs	r2, #3
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4313      	orrs	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 0303 	and.w	r3, r3, #3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d123      	bne.n	80021c0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	08da      	lsrs	r2, r3, #3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3208      	adds	r2, #8
 8002180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	220f      	movs	r2, #15
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	691a      	ldr	r2, [r3, #16]
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	08da      	lsrs	r2, r3, #3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3208      	adds	r2, #8
 80021ba:	69b9      	ldr	r1, [r7, #24]
 80021bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	2203      	movs	r2, #3
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 0203 	and.w	r2, r3, #3
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 80be 	beq.w	800237e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002202:	4b66      	ldr	r3, [pc, #408]	; (800239c <HAL_GPIO_Init+0x324>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002206:	4a65      	ldr	r2, [pc, #404]	; (800239c <HAL_GPIO_Init+0x324>)
 8002208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800220c:	6453      	str	r3, [r2, #68]	; 0x44
 800220e:	4b63      	ldr	r3, [pc, #396]	; (800239c <HAL_GPIO_Init+0x324>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800221a:	4a61      	ldr	r2, [pc, #388]	; (80023a0 <HAL_GPIO_Init+0x328>)
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	089b      	lsrs	r3, r3, #2
 8002220:	3302      	adds	r3, #2
 8002222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002226:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	220f      	movs	r2, #15
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4013      	ands	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a58      	ldr	r2, [pc, #352]	; (80023a4 <HAL_GPIO_Init+0x32c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d037      	beq.n	80022b6 <HAL_GPIO_Init+0x23e>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a57      	ldr	r2, [pc, #348]	; (80023a8 <HAL_GPIO_Init+0x330>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d031      	beq.n	80022b2 <HAL_GPIO_Init+0x23a>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a56      	ldr	r2, [pc, #344]	; (80023ac <HAL_GPIO_Init+0x334>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d02b      	beq.n	80022ae <HAL_GPIO_Init+0x236>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a55      	ldr	r2, [pc, #340]	; (80023b0 <HAL_GPIO_Init+0x338>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d025      	beq.n	80022aa <HAL_GPIO_Init+0x232>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a54      	ldr	r2, [pc, #336]	; (80023b4 <HAL_GPIO_Init+0x33c>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d01f      	beq.n	80022a6 <HAL_GPIO_Init+0x22e>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a53      	ldr	r2, [pc, #332]	; (80023b8 <HAL_GPIO_Init+0x340>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d019      	beq.n	80022a2 <HAL_GPIO_Init+0x22a>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a52      	ldr	r2, [pc, #328]	; (80023bc <HAL_GPIO_Init+0x344>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d013      	beq.n	800229e <HAL_GPIO_Init+0x226>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a51      	ldr	r2, [pc, #324]	; (80023c0 <HAL_GPIO_Init+0x348>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d00d      	beq.n	800229a <HAL_GPIO_Init+0x222>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a50      	ldr	r2, [pc, #320]	; (80023c4 <HAL_GPIO_Init+0x34c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d007      	beq.n	8002296 <HAL_GPIO_Init+0x21e>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a4f      	ldr	r2, [pc, #316]	; (80023c8 <HAL_GPIO_Init+0x350>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d101      	bne.n	8002292 <HAL_GPIO_Init+0x21a>
 800228e:	2309      	movs	r3, #9
 8002290:	e012      	b.n	80022b8 <HAL_GPIO_Init+0x240>
 8002292:	230a      	movs	r3, #10
 8002294:	e010      	b.n	80022b8 <HAL_GPIO_Init+0x240>
 8002296:	2308      	movs	r3, #8
 8002298:	e00e      	b.n	80022b8 <HAL_GPIO_Init+0x240>
 800229a:	2307      	movs	r3, #7
 800229c:	e00c      	b.n	80022b8 <HAL_GPIO_Init+0x240>
 800229e:	2306      	movs	r3, #6
 80022a0:	e00a      	b.n	80022b8 <HAL_GPIO_Init+0x240>
 80022a2:	2305      	movs	r3, #5
 80022a4:	e008      	b.n	80022b8 <HAL_GPIO_Init+0x240>
 80022a6:	2304      	movs	r3, #4
 80022a8:	e006      	b.n	80022b8 <HAL_GPIO_Init+0x240>
 80022aa:	2303      	movs	r3, #3
 80022ac:	e004      	b.n	80022b8 <HAL_GPIO_Init+0x240>
 80022ae:	2302      	movs	r3, #2
 80022b0:	e002      	b.n	80022b8 <HAL_GPIO_Init+0x240>
 80022b2:	2301      	movs	r3, #1
 80022b4:	e000      	b.n	80022b8 <HAL_GPIO_Init+0x240>
 80022b6:	2300      	movs	r3, #0
 80022b8:	69fa      	ldr	r2, [r7, #28]
 80022ba:	f002 0203 	and.w	r2, r2, #3
 80022be:	0092      	lsls	r2, r2, #2
 80022c0:	4093      	lsls	r3, r2
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80022c8:	4935      	ldr	r1, [pc, #212]	; (80023a0 <HAL_GPIO_Init+0x328>)
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	089b      	lsrs	r3, r3, #2
 80022ce:	3302      	adds	r3, #2
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022d6:	4b3d      	ldr	r3, [pc, #244]	; (80023cc <HAL_GPIO_Init+0x354>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	43db      	mvns	r3, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4013      	ands	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022fa:	4a34      	ldr	r2, [pc, #208]	; (80023cc <HAL_GPIO_Init+0x354>)
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002300:	4b32      	ldr	r3, [pc, #200]	; (80023cc <HAL_GPIO_Init+0x354>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d003      	beq.n	8002324 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002324:	4a29      	ldr	r2, [pc, #164]	; (80023cc <HAL_GPIO_Init+0x354>)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800232a:	4b28      	ldr	r3, [pc, #160]	; (80023cc <HAL_GPIO_Init+0x354>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	43db      	mvns	r3, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4013      	ands	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800234e:	4a1f      	ldr	r2, [pc, #124]	; (80023cc <HAL_GPIO_Init+0x354>)
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002354:	4b1d      	ldr	r3, [pc, #116]	; (80023cc <HAL_GPIO_Init+0x354>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	43db      	mvns	r3, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002378:	4a14      	ldr	r2, [pc, #80]	; (80023cc <HAL_GPIO_Init+0x354>)
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3301      	adds	r3, #1
 8002382:	61fb      	str	r3, [r7, #28]
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	2b0f      	cmp	r3, #15
 8002388:	f67f ae86 	bls.w	8002098 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800238c:	bf00      	nop
 800238e:	bf00      	nop
 8002390:	3724      	adds	r7, #36	; 0x24
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	40023800 	.word	0x40023800
 80023a0:	40013800 	.word	0x40013800
 80023a4:	40020000 	.word	0x40020000
 80023a8:	40020400 	.word	0x40020400
 80023ac:	40020800 	.word	0x40020800
 80023b0:	40020c00 	.word	0x40020c00
 80023b4:	40021000 	.word	0x40021000
 80023b8:	40021400 	.word	0x40021400
 80023bc:	40021800 	.word	0x40021800
 80023c0:	40021c00 	.word	0x40021c00
 80023c4:	40022000 	.word	0x40022000
 80023c8:	40022400 	.word	0x40022400
 80023cc:	40013c00 	.word	0x40013c00

080023d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	807b      	strh	r3, [r7, #2]
 80023dc:	4613      	mov	r3, r2
 80023de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023e0:	787b      	ldrb	r3, [r7, #1]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023e6:	887a      	ldrh	r2, [r7, #2]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80023ec:	e003      	b.n	80023f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80023ee:	887b      	ldrh	r3, [r7, #2]
 80023f0:	041a      	lsls	r2, r3, #16
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	619a      	str	r2, [r3, #24]
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002402:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002404:	b08f      	sub	sp, #60	; 0x3c
 8002406:	af0a      	add	r7, sp, #40	; 0x28
 8002408:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e116      	b.n	8002642 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d106      	bne.n	8002434 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7ff fae2 	bl	80019f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2203      	movs	r2, #3
 8002438:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002444:	2b00      	cmp	r3, #0
 8002446:	d102      	bne.n	800244e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f003 f98c 	bl	8005770 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	603b      	str	r3, [r7, #0]
 800245e:	687e      	ldr	r6, [r7, #4]
 8002460:	466d      	mov	r5, sp
 8002462:	f106 0410 	add.w	r4, r6, #16
 8002466:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002468:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800246a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800246c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800246e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002472:	e885 0003 	stmia.w	r5, {r0, r1}
 8002476:	1d33      	adds	r3, r6, #4
 8002478:	cb0e      	ldmia	r3, {r1, r2, r3}
 800247a:	6838      	ldr	r0, [r7, #0]
 800247c:	f003 f920 	bl	80056c0 <USB_CoreInit>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d005      	beq.n	8002492 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2202      	movs	r2, #2
 800248a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e0d7      	b.n	8002642 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2100      	movs	r1, #0
 8002498:	4618      	mov	r0, r3
 800249a:	f003 f97a 	bl	8005792 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800249e:	2300      	movs	r3, #0
 80024a0:	73fb      	strb	r3, [r7, #15]
 80024a2:	e04a      	b.n	800253a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024a4:	7bfa      	ldrb	r2, [r7, #15]
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	4413      	add	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	333d      	adds	r3, #61	; 0x3d
 80024b4:	2201      	movs	r2, #1
 80024b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024b8:	7bfa      	ldrb	r2, [r7, #15]
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	4413      	add	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	333c      	adds	r3, #60	; 0x3c
 80024c8:	7bfa      	ldrb	r2, [r7, #15]
 80024ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024cc:	7bfa      	ldrb	r2, [r7, #15]
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
 80024d0:	b298      	uxth	r0, r3
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	4413      	add	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	3344      	adds	r3, #68	; 0x44
 80024e0:	4602      	mov	r2, r0
 80024e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024e4:	7bfa      	ldrb	r2, [r7, #15]
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	4413      	add	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	3340      	adds	r3, #64	; 0x40
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024f8:	7bfa      	ldrb	r2, [r7, #15]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	4413      	add	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	3348      	adds	r3, #72	; 0x48
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800250c:	7bfa      	ldrb	r2, [r7, #15]
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	4613      	mov	r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	4413      	add	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	334c      	adds	r3, #76	; 0x4c
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002520:	7bfa      	ldrb	r2, [r7, #15]
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	4413      	add	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	3354      	adds	r3, #84	; 0x54
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002534:	7bfb      	ldrb	r3, [r7, #15]
 8002536:	3301      	adds	r3, #1
 8002538:	73fb      	strb	r3, [r7, #15]
 800253a:	7bfa      	ldrb	r2, [r7, #15]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	429a      	cmp	r2, r3
 8002542:	d3af      	bcc.n	80024a4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002544:	2300      	movs	r3, #0
 8002546:	73fb      	strb	r3, [r7, #15]
 8002548:	e044      	b.n	80025d4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800254a:	7bfa      	ldrb	r2, [r7, #15]
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	4613      	mov	r3, r2
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	4413      	add	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	440b      	add	r3, r1
 8002558:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800255c:	2200      	movs	r2, #0
 800255e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002560:	7bfa      	ldrb	r2, [r7, #15]
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4413      	add	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002572:	7bfa      	ldrb	r2, [r7, #15]
 8002574:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002576:	7bfa      	ldrb	r2, [r7, #15]
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	4413      	add	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	440b      	add	r3, r1
 8002584:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002588:	2200      	movs	r2, #0
 800258a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800258c:	7bfa      	ldrb	r2, [r7, #15]
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4413      	add	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025a2:	7bfa      	ldrb	r2, [r7, #15]
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	4613      	mov	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	4413      	add	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	440b      	add	r3, r1
 80025b0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025b8:	7bfa      	ldrb	r2, [r7, #15]
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	4413      	add	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
 80025d0:	3301      	adds	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
 80025d4:	7bfa      	ldrb	r2, [r7, #15]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d3b5      	bcc.n	800254a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	603b      	str	r3, [r7, #0]
 80025e4:	687e      	ldr	r6, [r7, #4]
 80025e6:	466d      	mov	r5, sp
 80025e8:	f106 0410 	add.w	r4, r6, #16
 80025ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80025fc:	1d33      	adds	r3, r6, #4
 80025fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002600:	6838      	ldr	r0, [r7, #0]
 8002602:	f003 f913 	bl	800582c <USB_DevInit>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d005      	beq.n	8002618 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2202      	movs	r2, #2
 8002610:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e014      	b.n	8002642 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	2b01      	cmp	r3, #1
 800262e:	d102      	bne.n	8002636 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f80b 	bl	800264c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f003 fad1 	bl	8005be2 <USB_DevDisconnect>

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800264c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800267a:	4b05      	ldr	r3, [pc, #20]	; (8002690 <HAL_PCDEx_ActivateLPM+0x44>)
 800267c:	4313      	orrs	r3, r2
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	10000003 	.word	0x10000003

08002694 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002698:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a04      	ldr	r2, [pc, #16]	; (80026b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800269e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a2:	6013      	str	r3, [r2, #0]
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40007000 	.word	0x40007000

080026b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80026be:	4b23      	ldr	r3, [pc, #140]	; (800274c <HAL_PWREx_EnableOverDrive+0x98>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	4a22      	ldr	r2, [pc, #136]	; (800274c <HAL_PWREx_EnableOverDrive+0x98>)
 80026c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ca:	4b20      	ldr	r3, [pc, #128]	; (800274c <HAL_PWREx_EnableOverDrive+0x98>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d2:	603b      	str	r3, [r7, #0]
 80026d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80026d6:	4b1e      	ldr	r3, [pc, #120]	; (8002750 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a1d      	ldr	r2, [pc, #116]	; (8002750 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026e2:	f7ff fb25 	bl	8001d30 <HAL_GetTick>
 80026e6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80026e8:	e009      	b.n	80026fe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80026ea:	f7ff fb21 	bl	8001d30 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026f8:	d901      	bls.n	80026fe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e022      	b.n	8002744 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80026fe:	4b14      	ldr	r3, [pc, #80]	; (8002750 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800270a:	d1ee      	bne.n	80026ea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800270c:	4b10      	ldr	r3, [pc, #64]	; (8002750 <HAL_PWREx_EnableOverDrive+0x9c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a0f      	ldr	r2, [pc, #60]	; (8002750 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002712:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002716:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002718:	f7ff fb0a 	bl	8001d30 <HAL_GetTick>
 800271c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800271e:	e009      	b.n	8002734 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002720:	f7ff fb06 	bl	8001d30 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800272e:	d901      	bls.n	8002734 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e007      	b.n	8002744 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002734:	4b06      	ldr	r3, [pc, #24]	; (8002750 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002740:	d1ee      	bne.n	8002720 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40023800 	.word	0x40023800
 8002750:	40007000 	.word	0x40007000

08002754 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800275c:	2300      	movs	r3, #0
 800275e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e29b      	b.n	8002ca2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	f000 8087 	beq.w	8002886 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002778:	4b96      	ldr	r3, [pc, #600]	; (80029d4 <HAL_RCC_OscConfig+0x280>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 030c 	and.w	r3, r3, #12
 8002780:	2b04      	cmp	r3, #4
 8002782:	d00c      	beq.n	800279e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002784:	4b93      	ldr	r3, [pc, #588]	; (80029d4 <HAL_RCC_OscConfig+0x280>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 030c 	and.w	r3, r3, #12
 800278c:	2b08      	cmp	r3, #8
 800278e:	d112      	bne.n	80027b6 <HAL_RCC_OscConfig+0x62>
 8002790:	4b90      	ldr	r3, [pc, #576]	; (80029d4 <HAL_RCC_OscConfig+0x280>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002798:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800279c:	d10b      	bne.n	80027b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800279e:	4b8d      	ldr	r3, [pc, #564]	; (80029d4 <HAL_RCC_OscConfig+0x280>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d06c      	beq.n	8002884 <HAL_RCC_OscConfig+0x130>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d168      	bne.n	8002884 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e275      	b.n	8002ca2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027be:	d106      	bne.n	80027ce <HAL_RCC_OscConfig+0x7a>
 80027c0:	4b84      	ldr	r3, [pc, #528]	; (80029d4 <HAL_RCC_OscConfig+0x280>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a83      	ldr	r2, [pc, #524]	; (80029d4 <HAL_RCC_OscConfig+0x280>)
 80027c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	e02e      	b.n	800282c <HAL_RCC_OscConfig+0xd8>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10c      	bne.n	80027f0 <HAL_RCC_OscConfig+0x9c>
 80027d6:	4b7f      	ldr	r3, [pc, #508]	; (80029d4 <HAL_RCC_OscConfig+0x280>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a7e      	ldr	r2, [pc, #504]	; (80029d4 <HAL_RCC_OscConfig+0x280>)
 80027dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	4b7c      	ldr	r3, [pc, #496]	; (80029d4 <HAL_RCC_OscConfig+0x280>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a7b      	ldr	r2, [pc, #492]	; (80029d4 <HAL_RCC_OscConfig+0x280>)
 80027e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ec:	6013      	str	r3, [r2, #0]
 80027ee:	e01d      	b.n	800282c <HAL_RCC_OscConfig+0xd8>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027f8:	d10c      	bne.n	8002814 <HAL_RCC_OscConfig+0xc0>
 80027fa:	4b76      	ldr	r3, [pc, #472]	; (80029d4 <HAL_RCC_OscConfig+0x280>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a75      	ldr	r2, [pc, #468]	; (80029d4 <HAL_RCC_OscConfig+0x280>)
 8002800:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	4b73      	ldr	r3, [pc, #460]	; (80029d4 <HAL_RCC_OscConfig+0x280>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a72      	ldr	r2, [pc, #456]	; (80029d4 <HAL_RCC_OscConfig+0x280>)
 800280c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002810:	6013      	str	r3, [r2, #0]
 8002812:	e00b      	b.n	800282c <HAL_RCC_OscConfig+0xd8>
 8002814:	4b6f      	ldr	r3, [pc, #444]	; (80029d4 <HAL_RCC_OscConfig+0x280>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a6e      	ldr	r2, [pc, #440]	; (80029d4 <HAL_RCC_OscConfig+0x280>)
 800281a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800281e:	6013      	str	r3, [r2, #0]
 8002820:	4b6c      	ldr	r3, [pc, #432]	; (80029d4 <HAL_RCC_OscConfig+0x280>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a6b      	ldr	r2, [pc, #428]	; (80029d4 <HAL_RCC_OscConfig+0x280>)
 8002826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800282a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d013      	beq.n	800285c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002834:	f7ff fa7c 	bl	8001d30 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800283c:	f7ff fa78 	bl	8001d30 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b64      	cmp	r3, #100	; 0x64
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e229      	b.n	8002ca2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284e:	4b61      	ldr	r3, [pc, #388]	; (80029d4 <HAL_RCC_OscConfig+0x280>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0f0      	beq.n	800283c <HAL_RCC_OscConfig+0xe8>
 800285a:	e014      	b.n	8002886 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285c:	f7ff fa68 	bl	8001d30 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002864:	f7ff fa64 	bl	8001d30 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b64      	cmp	r3, #100	; 0x64
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e215      	b.n	8002ca2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002876:	4b57      	ldr	r3, [pc, #348]	; (80029d4 <HAL_RCC_OscConfig+0x280>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1f0      	bne.n	8002864 <HAL_RCC_OscConfig+0x110>
 8002882:	e000      	b.n	8002886 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002884:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d069      	beq.n	8002966 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002892:	4b50      	ldr	r3, [pc, #320]	; (80029d4 <HAL_RCC_OscConfig+0x280>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 030c 	and.w	r3, r3, #12
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00b      	beq.n	80028b6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800289e:	4b4d      	ldr	r3, [pc, #308]	; (80029d4 <HAL_RCC_OscConfig+0x280>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 030c 	and.w	r3, r3, #12
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	d11c      	bne.n	80028e4 <HAL_RCC_OscConfig+0x190>
 80028aa:	4b4a      	ldr	r3, [pc, #296]	; (80029d4 <HAL_RCC_OscConfig+0x280>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d116      	bne.n	80028e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028b6:	4b47      	ldr	r3, [pc, #284]	; (80029d4 <HAL_RCC_OscConfig+0x280>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d005      	beq.n	80028ce <HAL_RCC_OscConfig+0x17a>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d001      	beq.n	80028ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e1e9      	b.n	8002ca2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ce:	4b41      	ldr	r3, [pc, #260]	; (80029d4 <HAL_RCC_OscConfig+0x280>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	493d      	ldr	r1, [pc, #244]	; (80029d4 <HAL_RCC_OscConfig+0x280>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028e2:	e040      	b.n	8002966 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d023      	beq.n	8002934 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028ec:	4b39      	ldr	r3, [pc, #228]	; (80029d4 <HAL_RCC_OscConfig+0x280>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a38      	ldr	r2, [pc, #224]	; (80029d4 <HAL_RCC_OscConfig+0x280>)
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f8:	f7ff fa1a 	bl	8001d30 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002900:	f7ff fa16 	bl	8001d30 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e1c7      	b.n	8002ca2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002912:	4b30      	ldr	r3, [pc, #192]	; (80029d4 <HAL_RCC_OscConfig+0x280>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f0      	beq.n	8002900 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800291e:	4b2d      	ldr	r3, [pc, #180]	; (80029d4 <HAL_RCC_OscConfig+0x280>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	4929      	ldr	r1, [pc, #164]	; (80029d4 <HAL_RCC_OscConfig+0x280>)
 800292e:	4313      	orrs	r3, r2
 8002930:	600b      	str	r3, [r1, #0]
 8002932:	e018      	b.n	8002966 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002934:	4b27      	ldr	r3, [pc, #156]	; (80029d4 <HAL_RCC_OscConfig+0x280>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a26      	ldr	r2, [pc, #152]	; (80029d4 <HAL_RCC_OscConfig+0x280>)
 800293a:	f023 0301 	bic.w	r3, r3, #1
 800293e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002940:	f7ff f9f6 	bl	8001d30 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002948:	f7ff f9f2 	bl	8001d30 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e1a3      	b.n	8002ca2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800295a:	4b1e      	ldr	r3, [pc, #120]	; (80029d4 <HAL_RCC_OscConfig+0x280>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f0      	bne.n	8002948 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b00      	cmp	r3, #0
 8002970:	d038      	beq.n	80029e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d019      	beq.n	80029ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800297a:	4b16      	ldr	r3, [pc, #88]	; (80029d4 <HAL_RCC_OscConfig+0x280>)
 800297c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800297e:	4a15      	ldr	r2, [pc, #84]	; (80029d4 <HAL_RCC_OscConfig+0x280>)
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002986:	f7ff f9d3 	bl	8001d30 <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800298e:	f7ff f9cf 	bl	8001d30 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e180      	b.n	8002ca2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a0:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <HAL_RCC_OscConfig+0x280>)
 80029a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d0f0      	beq.n	800298e <HAL_RCC_OscConfig+0x23a>
 80029ac:	e01a      	b.n	80029e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ae:	4b09      	ldr	r3, [pc, #36]	; (80029d4 <HAL_RCC_OscConfig+0x280>)
 80029b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029b2:	4a08      	ldr	r2, [pc, #32]	; (80029d4 <HAL_RCC_OscConfig+0x280>)
 80029b4:	f023 0301 	bic.w	r3, r3, #1
 80029b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ba:	f7ff f9b9 	bl	8001d30 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c0:	e00a      	b.n	80029d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029c2:	f7ff f9b5 	bl	8001d30 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d903      	bls.n	80029d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e166      	b.n	8002ca2 <HAL_RCC_OscConfig+0x54e>
 80029d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d8:	4b92      	ldr	r3, [pc, #584]	; (8002c24 <HAL_RCC_OscConfig+0x4d0>)
 80029da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1ee      	bne.n	80029c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 80a4 	beq.w	8002b3a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029f2:	4b8c      	ldr	r3, [pc, #560]	; (8002c24 <HAL_RCC_OscConfig+0x4d0>)
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10d      	bne.n	8002a1a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80029fe:	4b89      	ldr	r3, [pc, #548]	; (8002c24 <HAL_RCC_OscConfig+0x4d0>)
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	4a88      	ldr	r2, [pc, #544]	; (8002c24 <HAL_RCC_OscConfig+0x4d0>)
 8002a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a08:	6413      	str	r3, [r2, #64]	; 0x40
 8002a0a:	4b86      	ldr	r3, [pc, #536]	; (8002c24 <HAL_RCC_OscConfig+0x4d0>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a12:	60bb      	str	r3, [r7, #8]
 8002a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a16:	2301      	movs	r3, #1
 8002a18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a1a:	4b83      	ldr	r3, [pc, #524]	; (8002c28 <HAL_RCC_OscConfig+0x4d4>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d118      	bne.n	8002a58 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002a26:	4b80      	ldr	r3, [pc, #512]	; (8002c28 <HAL_RCC_OscConfig+0x4d4>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a7f      	ldr	r2, [pc, #508]	; (8002c28 <HAL_RCC_OscConfig+0x4d4>)
 8002a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a32:	f7ff f97d 	bl	8001d30 <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a3a:	f7ff f979 	bl	8001d30 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b64      	cmp	r3, #100	; 0x64
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e12a      	b.n	8002ca2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a4c:	4b76      	ldr	r3, [pc, #472]	; (8002c28 <HAL_RCC_OscConfig+0x4d4>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0f0      	beq.n	8002a3a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d106      	bne.n	8002a6e <HAL_RCC_OscConfig+0x31a>
 8002a60:	4b70      	ldr	r3, [pc, #448]	; (8002c24 <HAL_RCC_OscConfig+0x4d0>)
 8002a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a64:	4a6f      	ldr	r2, [pc, #444]	; (8002c24 <HAL_RCC_OscConfig+0x4d0>)
 8002a66:	f043 0301 	orr.w	r3, r3, #1
 8002a6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a6c:	e02d      	b.n	8002aca <HAL_RCC_OscConfig+0x376>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10c      	bne.n	8002a90 <HAL_RCC_OscConfig+0x33c>
 8002a76:	4b6b      	ldr	r3, [pc, #428]	; (8002c24 <HAL_RCC_OscConfig+0x4d0>)
 8002a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7a:	4a6a      	ldr	r2, [pc, #424]	; (8002c24 <HAL_RCC_OscConfig+0x4d0>)
 8002a7c:	f023 0301 	bic.w	r3, r3, #1
 8002a80:	6713      	str	r3, [r2, #112]	; 0x70
 8002a82:	4b68      	ldr	r3, [pc, #416]	; (8002c24 <HAL_RCC_OscConfig+0x4d0>)
 8002a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a86:	4a67      	ldr	r2, [pc, #412]	; (8002c24 <HAL_RCC_OscConfig+0x4d0>)
 8002a88:	f023 0304 	bic.w	r3, r3, #4
 8002a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a8e:	e01c      	b.n	8002aca <HAL_RCC_OscConfig+0x376>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	2b05      	cmp	r3, #5
 8002a96:	d10c      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x35e>
 8002a98:	4b62      	ldr	r3, [pc, #392]	; (8002c24 <HAL_RCC_OscConfig+0x4d0>)
 8002a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9c:	4a61      	ldr	r2, [pc, #388]	; (8002c24 <HAL_RCC_OscConfig+0x4d0>)
 8002a9e:	f043 0304 	orr.w	r3, r3, #4
 8002aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa4:	4b5f      	ldr	r3, [pc, #380]	; (8002c24 <HAL_RCC_OscConfig+0x4d0>)
 8002aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa8:	4a5e      	ldr	r2, [pc, #376]	; (8002c24 <HAL_RCC_OscConfig+0x4d0>)
 8002aaa:	f043 0301 	orr.w	r3, r3, #1
 8002aae:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab0:	e00b      	b.n	8002aca <HAL_RCC_OscConfig+0x376>
 8002ab2:	4b5c      	ldr	r3, [pc, #368]	; (8002c24 <HAL_RCC_OscConfig+0x4d0>)
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab6:	4a5b      	ldr	r2, [pc, #364]	; (8002c24 <HAL_RCC_OscConfig+0x4d0>)
 8002ab8:	f023 0301 	bic.w	r3, r3, #1
 8002abc:	6713      	str	r3, [r2, #112]	; 0x70
 8002abe:	4b59      	ldr	r3, [pc, #356]	; (8002c24 <HAL_RCC_OscConfig+0x4d0>)
 8002ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac2:	4a58      	ldr	r2, [pc, #352]	; (8002c24 <HAL_RCC_OscConfig+0x4d0>)
 8002ac4:	f023 0304 	bic.w	r3, r3, #4
 8002ac8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d015      	beq.n	8002afe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad2:	f7ff f92d 	bl	8001d30 <HAL_GetTick>
 8002ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad8:	e00a      	b.n	8002af0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ada:	f7ff f929 	bl	8001d30 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e0d8      	b.n	8002ca2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af0:	4b4c      	ldr	r3, [pc, #304]	; (8002c24 <HAL_RCC_OscConfig+0x4d0>)
 8002af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0ee      	beq.n	8002ada <HAL_RCC_OscConfig+0x386>
 8002afc:	e014      	b.n	8002b28 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002afe:	f7ff f917 	bl	8001d30 <HAL_GetTick>
 8002b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b04:	e00a      	b.n	8002b1c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b06:	f7ff f913 	bl	8001d30 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e0c2      	b.n	8002ca2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b1c:	4b41      	ldr	r3, [pc, #260]	; (8002c24 <HAL_RCC_OscConfig+0x4d0>)
 8002b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1ee      	bne.n	8002b06 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b28:	7dfb      	ldrb	r3, [r7, #23]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d105      	bne.n	8002b3a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b2e:	4b3d      	ldr	r3, [pc, #244]	; (8002c24 <HAL_RCC_OscConfig+0x4d0>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	4a3c      	ldr	r2, [pc, #240]	; (8002c24 <HAL_RCC_OscConfig+0x4d0>)
 8002b34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 80ae 	beq.w	8002ca0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b44:	4b37      	ldr	r3, [pc, #220]	; (8002c24 <HAL_RCC_OscConfig+0x4d0>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 030c 	and.w	r3, r3, #12
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d06d      	beq.n	8002c2c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d14b      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b58:	4b32      	ldr	r3, [pc, #200]	; (8002c24 <HAL_RCC_OscConfig+0x4d0>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a31      	ldr	r2, [pc, #196]	; (8002c24 <HAL_RCC_OscConfig+0x4d0>)
 8002b5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b64:	f7ff f8e4 	bl	8001d30 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6c:	f7ff f8e0 	bl	8001d30 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e091      	b.n	8002ca2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b7e:	4b29      	ldr	r3, [pc, #164]	; (8002c24 <HAL_RCC_OscConfig+0x4d0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1f0      	bne.n	8002b6c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69da      	ldr	r2, [r3, #28]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	019b      	lsls	r3, r3, #6
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba0:	085b      	lsrs	r3, r3, #1
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	041b      	lsls	r3, r3, #16
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bac:	061b      	lsls	r3, r3, #24
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb4:	071b      	lsls	r3, r3, #28
 8002bb6:	491b      	ldr	r1, [pc, #108]	; (8002c24 <HAL_RCC_OscConfig+0x4d0>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bbc:	4b19      	ldr	r3, [pc, #100]	; (8002c24 <HAL_RCC_OscConfig+0x4d0>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a18      	ldr	r2, [pc, #96]	; (8002c24 <HAL_RCC_OscConfig+0x4d0>)
 8002bc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc8:	f7ff f8b2 	bl	8001d30 <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd0:	f7ff f8ae 	bl	8001d30 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e05f      	b.n	8002ca2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be2:	4b10      	ldr	r3, [pc, #64]	; (8002c24 <HAL_RCC_OscConfig+0x4d0>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0f0      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x47c>
 8002bee:	e057      	b.n	8002ca0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf0:	4b0c      	ldr	r3, [pc, #48]	; (8002c24 <HAL_RCC_OscConfig+0x4d0>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a0b      	ldr	r2, [pc, #44]	; (8002c24 <HAL_RCC_OscConfig+0x4d0>)
 8002bf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfc:	f7ff f898 	bl	8001d30 <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c04:	f7ff f894 	bl	8001d30 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e045      	b.n	8002ca2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c16:	4b03      	ldr	r3, [pc, #12]	; (8002c24 <HAL_RCC_OscConfig+0x4d0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f0      	bne.n	8002c04 <HAL_RCC_OscConfig+0x4b0>
 8002c22:	e03d      	b.n	8002ca0 <HAL_RCC_OscConfig+0x54c>
 8002c24:	40023800 	.word	0x40023800
 8002c28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002c2c:	4b1f      	ldr	r3, [pc, #124]	; (8002cac <HAL_RCC_OscConfig+0x558>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d030      	beq.n	8002c9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d129      	bne.n	8002c9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d122      	bne.n	8002c9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c62:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d119      	bne.n	8002c9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c72:	085b      	lsrs	r3, r3, #1
 8002c74:	3b01      	subs	r3, #1
 8002c76:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d10f      	bne.n	8002c9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c86:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d107      	bne.n	8002c9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d001      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e000      	b.n	8002ca2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40023800 	.word	0x40023800

08002cb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e0d0      	b.n	8002e6a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cc8:	4b6a      	ldr	r3, [pc, #424]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 030f 	and.w	r3, r3, #15
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d910      	bls.n	8002cf8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd6:	4b67      	ldr	r3, [pc, #412]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f023 020f 	bic.w	r2, r3, #15
 8002cde:	4965      	ldr	r1, [pc, #404]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce6:	4b63      	ldr	r3, [pc, #396]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d001      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e0b8      	b.n	8002e6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d020      	beq.n	8002d46 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d10:	4b59      	ldr	r3, [pc, #356]	; (8002e78 <HAL_RCC_ClockConfig+0x1c8>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	4a58      	ldr	r2, [pc, #352]	; (8002e78 <HAL_RCC_ClockConfig+0x1c8>)
 8002d16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0308 	and.w	r3, r3, #8
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d005      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d28:	4b53      	ldr	r3, [pc, #332]	; (8002e78 <HAL_RCC_ClockConfig+0x1c8>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	4a52      	ldr	r2, [pc, #328]	; (8002e78 <HAL_RCC_ClockConfig+0x1c8>)
 8002d2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d34:	4b50      	ldr	r3, [pc, #320]	; (8002e78 <HAL_RCC_ClockConfig+0x1c8>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	494d      	ldr	r1, [pc, #308]	; (8002e78 <HAL_RCC_ClockConfig+0x1c8>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d040      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d107      	bne.n	8002d6a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5a:	4b47      	ldr	r3, [pc, #284]	; (8002e78 <HAL_RCC_ClockConfig+0x1c8>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d115      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e07f      	b.n	8002e6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d107      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d72:	4b41      	ldr	r3, [pc, #260]	; (8002e78 <HAL_RCC_ClockConfig+0x1c8>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d109      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e073      	b.n	8002e6a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d82:	4b3d      	ldr	r3, [pc, #244]	; (8002e78 <HAL_RCC_ClockConfig+0x1c8>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e06b      	b.n	8002e6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d92:	4b39      	ldr	r3, [pc, #228]	; (8002e78 <HAL_RCC_ClockConfig+0x1c8>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f023 0203 	bic.w	r2, r3, #3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	4936      	ldr	r1, [pc, #216]	; (8002e78 <HAL_RCC_ClockConfig+0x1c8>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002da4:	f7fe ffc4 	bl	8001d30 <HAL_GetTick>
 8002da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002daa:	e00a      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dac:	f7fe ffc0 	bl	8001d30 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e053      	b.n	8002e6a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc2:	4b2d      	ldr	r3, [pc, #180]	; (8002e78 <HAL_RCC_ClockConfig+0x1c8>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 020c 	and.w	r2, r3, #12
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d1eb      	bne.n	8002dac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dd4:	4b27      	ldr	r3, [pc, #156]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 030f 	and.w	r3, r3, #15
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d210      	bcs.n	8002e04 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002de2:	4b24      	ldr	r3, [pc, #144]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f023 020f 	bic.w	r2, r3, #15
 8002dea:	4922      	ldr	r1, [pc, #136]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df2:	4b20      	ldr	r3, [pc, #128]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 030f 	and.w	r3, r3, #15
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d001      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e032      	b.n	8002e6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d008      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e10:	4b19      	ldr	r3, [pc, #100]	; (8002e78 <HAL_RCC_ClockConfig+0x1c8>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	4916      	ldr	r1, [pc, #88]	; (8002e78 <HAL_RCC_ClockConfig+0x1c8>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d009      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e2e:	4b12      	ldr	r3, [pc, #72]	; (8002e78 <HAL_RCC_ClockConfig+0x1c8>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	490e      	ldr	r1, [pc, #56]	; (8002e78 <HAL_RCC_ClockConfig+0x1c8>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e42:	f000 f821 	bl	8002e88 <HAL_RCC_GetSysClockFreq>
 8002e46:	4602      	mov	r2, r0
 8002e48:	4b0b      	ldr	r3, [pc, #44]	; (8002e78 <HAL_RCC_ClockConfig+0x1c8>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	091b      	lsrs	r3, r3, #4
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	490a      	ldr	r1, [pc, #40]	; (8002e7c <HAL_RCC_ClockConfig+0x1cc>)
 8002e54:	5ccb      	ldrb	r3, [r1, r3]
 8002e56:	fa22 f303 	lsr.w	r3, r2, r3
 8002e5a:	4a09      	ldr	r2, [pc, #36]	; (8002e80 <HAL_RCC_ClockConfig+0x1d0>)
 8002e5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e5e:	4b09      	ldr	r3, [pc, #36]	; (8002e84 <HAL_RCC_ClockConfig+0x1d4>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fe fe42 	bl	8001aec <HAL_InitTick>

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40023c00 	.word	0x40023c00
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	080091bc 	.word	0x080091bc
 8002e80:	20000000 	.word	0x20000000
 8002e84:	20000004 	.word	0x20000004

08002e88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e8c:	b094      	sub	sp, #80	; 0x50
 8002e8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002e90:	2300      	movs	r3, #0
 8002e92:	647b      	str	r3, [r7, #68]	; 0x44
 8002e94:	2300      	movs	r3, #0
 8002e96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e98:	2300      	movs	r3, #0
 8002e9a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ea0:	4b79      	ldr	r3, [pc, #484]	; (8003088 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f003 030c 	and.w	r3, r3, #12
 8002ea8:	2b08      	cmp	r3, #8
 8002eaa:	d00d      	beq.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x40>
 8002eac:	2b08      	cmp	r3, #8
 8002eae:	f200 80e1 	bhi.w	8003074 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d002      	beq.n	8002ebc <HAL_RCC_GetSysClockFreq+0x34>
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	d003      	beq.n	8002ec2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002eba:	e0db      	b.n	8003074 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ebc:	4b73      	ldr	r3, [pc, #460]	; (800308c <HAL_RCC_GetSysClockFreq+0x204>)
 8002ebe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ec0:	e0db      	b.n	800307a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ec2:	4b73      	ldr	r3, [pc, #460]	; (8003090 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ec4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ec6:	e0d8      	b.n	800307a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ec8:	4b6f      	ldr	r3, [pc, #444]	; (8003088 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ed0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002ed2:	4b6d      	ldr	r3, [pc, #436]	; (8003088 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d063      	beq.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ede:	4b6a      	ldr	r3, [pc, #424]	; (8003088 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	099b      	lsrs	r3, r3, #6
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ee8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ef0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ef6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002efa:	4622      	mov	r2, r4
 8002efc:	462b      	mov	r3, r5
 8002efe:	f04f 0000 	mov.w	r0, #0
 8002f02:	f04f 0100 	mov.w	r1, #0
 8002f06:	0159      	lsls	r1, r3, #5
 8002f08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f0c:	0150      	lsls	r0, r2, #5
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	4621      	mov	r1, r4
 8002f14:	1a51      	subs	r1, r2, r1
 8002f16:	6139      	str	r1, [r7, #16]
 8002f18:	4629      	mov	r1, r5
 8002f1a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	f04f 0200 	mov.w	r2, #0
 8002f24:	f04f 0300 	mov.w	r3, #0
 8002f28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f2c:	4659      	mov	r1, fp
 8002f2e:	018b      	lsls	r3, r1, #6
 8002f30:	4651      	mov	r1, sl
 8002f32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f36:	4651      	mov	r1, sl
 8002f38:	018a      	lsls	r2, r1, #6
 8002f3a:	4651      	mov	r1, sl
 8002f3c:	ebb2 0801 	subs.w	r8, r2, r1
 8002f40:	4659      	mov	r1, fp
 8002f42:	eb63 0901 	sbc.w	r9, r3, r1
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	f04f 0300 	mov.w	r3, #0
 8002f4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f5a:	4690      	mov	r8, r2
 8002f5c:	4699      	mov	r9, r3
 8002f5e:	4623      	mov	r3, r4
 8002f60:	eb18 0303 	adds.w	r3, r8, r3
 8002f64:	60bb      	str	r3, [r7, #8]
 8002f66:	462b      	mov	r3, r5
 8002f68:	eb49 0303 	adc.w	r3, r9, r3
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	f04f 0200 	mov.w	r2, #0
 8002f72:	f04f 0300 	mov.w	r3, #0
 8002f76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f7a:	4629      	mov	r1, r5
 8002f7c:	024b      	lsls	r3, r1, #9
 8002f7e:	4621      	mov	r1, r4
 8002f80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f84:	4621      	mov	r1, r4
 8002f86:	024a      	lsls	r2, r1, #9
 8002f88:	4610      	mov	r0, r2
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f8e:	2200      	movs	r2, #0
 8002f90:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f98:	f7fd f9a2 	bl	80002e0 <__aeabi_uldivmod>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fa4:	e058      	b.n	8003058 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fa6:	4b38      	ldr	r3, [pc, #224]	; (8003088 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	099b      	lsrs	r3, r3, #6
 8002fac:	2200      	movs	r2, #0
 8002fae:	4618      	mov	r0, r3
 8002fb0:	4611      	mov	r1, r2
 8002fb2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fb6:	623b      	str	r3, [r7, #32]
 8002fb8:	2300      	movs	r3, #0
 8002fba:	627b      	str	r3, [r7, #36]	; 0x24
 8002fbc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fc0:	4642      	mov	r2, r8
 8002fc2:	464b      	mov	r3, r9
 8002fc4:	f04f 0000 	mov.w	r0, #0
 8002fc8:	f04f 0100 	mov.w	r1, #0
 8002fcc:	0159      	lsls	r1, r3, #5
 8002fce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fd2:	0150      	lsls	r0, r2, #5
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	4641      	mov	r1, r8
 8002fda:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fde:	4649      	mov	r1, r9
 8002fe0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ff0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ff4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ff8:	ebb2 040a 	subs.w	r4, r2, sl
 8002ffc:	eb63 050b 	sbc.w	r5, r3, fp
 8003000:	f04f 0200 	mov.w	r2, #0
 8003004:	f04f 0300 	mov.w	r3, #0
 8003008:	00eb      	lsls	r3, r5, #3
 800300a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800300e:	00e2      	lsls	r2, r4, #3
 8003010:	4614      	mov	r4, r2
 8003012:	461d      	mov	r5, r3
 8003014:	4643      	mov	r3, r8
 8003016:	18e3      	adds	r3, r4, r3
 8003018:	603b      	str	r3, [r7, #0]
 800301a:	464b      	mov	r3, r9
 800301c:	eb45 0303 	adc.w	r3, r5, r3
 8003020:	607b      	str	r3, [r7, #4]
 8003022:	f04f 0200 	mov.w	r2, #0
 8003026:	f04f 0300 	mov.w	r3, #0
 800302a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800302e:	4629      	mov	r1, r5
 8003030:	028b      	lsls	r3, r1, #10
 8003032:	4621      	mov	r1, r4
 8003034:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003038:	4621      	mov	r1, r4
 800303a:	028a      	lsls	r2, r1, #10
 800303c:	4610      	mov	r0, r2
 800303e:	4619      	mov	r1, r3
 8003040:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003042:	2200      	movs	r2, #0
 8003044:	61bb      	str	r3, [r7, #24]
 8003046:	61fa      	str	r2, [r7, #28]
 8003048:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800304c:	f7fd f948 	bl	80002e0 <__aeabi_uldivmod>
 8003050:	4602      	mov	r2, r0
 8003052:	460b      	mov	r3, r1
 8003054:	4613      	mov	r3, r2
 8003056:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003058:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <HAL_RCC_GetSysClockFreq+0x200>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	0c1b      	lsrs	r3, r3, #16
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	3301      	adds	r3, #1
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003068:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800306a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800306c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003070:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003072:	e002      	b.n	800307a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003074:	4b05      	ldr	r3, [pc, #20]	; (800308c <HAL_RCC_GetSysClockFreq+0x204>)
 8003076:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003078:	bf00      	nop
    }
  }
  return sysclockfreq;
 800307a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800307c:	4618      	mov	r0, r3
 800307e:	3750      	adds	r7, #80	; 0x50
 8003080:	46bd      	mov	sp, r7
 8003082:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003086:	bf00      	nop
 8003088:	40023800 	.word	0x40023800
 800308c:	00f42400 	.word	0x00f42400
 8003090:	007a1200 	.word	0x007a1200

08003094 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003098:	4b03      	ldr	r3, [pc, #12]	; (80030a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800309a:	681b      	ldr	r3, [r3, #0]
}
 800309c:	4618      	mov	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	20000000 	.word	0x20000000

080030ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030b0:	f7ff fff0 	bl	8003094 <HAL_RCC_GetHCLKFreq>
 80030b4:	4602      	mov	r2, r0
 80030b6:	4b05      	ldr	r3, [pc, #20]	; (80030cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	0a9b      	lsrs	r3, r3, #10
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	4903      	ldr	r1, [pc, #12]	; (80030d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030c2:	5ccb      	ldrb	r3, [r1, r3]
 80030c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40023800 	.word	0x40023800
 80030d0:	080091cc 	.word	0x080091cc

080030d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030d8:	f7ff ffdc 	bl	8003094 <HAL_RCC_GetHCLKFreq>
 80030dc:	4602      	mov	r2, r0
 80030de:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	0b5b      	lsrs	r3, r3, #13
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	4903      	ldr	r1, [pc, #12]	; (80030f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030ea:	5ccb      	ldrb	r3, [r1, r3]
 80030ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40023800 	.word	0x40023800
 80030f8:	080091cc 	.word	0x080091cc

080030fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	220f      	movs	r2, #15
 800310a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800310c:	4b12      	ldr	r3, [pc, #72]	; (8003158 <HAL_RCC_GetClockConfig+0x5c>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 0203 	and.w	r2, r3, #3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003118:	4b0f      	ldr	r3, [pc, #60]	; (8003158 <HAL_RCC_GetClockConfig+0x5c>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003124:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <HAL_RCC_GetClockConfig+0x5c>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003130:	4b09      	ldr	r3, [pc, #36]	; (8003158 <HAL_RCC_GetClockConfig+0x5c>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	08db      	lsrs	r3, r3, #3
 8003136:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800313e:	4b07      	ldr	r3, [pc, #28]	; (800315c <HAL_RCC_GetClockConfig+0x60>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 020f 	and.w	r2, r3, #15
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	601a      	str	r2, [r3, #0]
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	40023800 	.word	0x40023800
 800315c:	40023c00 	.word	0x40023c00

08003160 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b088      	sub	sp, #32
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003168:	2300      	movs	r3, #0
 800316a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800316c:	2300      	movs	r3, #0
 800316e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003170:	2300      	movs	r3, #0
 8003172:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003174:	2300      	movs	r3, #0
 8003176:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003178:	2300      	movs	r3, #0
 800317a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b00      	cmp	r3, #0
 8003186:	d012      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003188:	4b69      	ldr	r3, [pc, #420]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	4a68      	ldr	r2, [pc, #416]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800318e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003192:	6093      	str	r3, [r2, #8]
 8003194:	4b66      	ldr	r3, [pc, #408]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800319c:	4964      	ldr	r1, [pc, #400]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80031aa:	2301      	movs	r3, #1
 80031ac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d017      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031ba:	4b5d      	ldr	r3, [pc, #372]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c8:	4959      	ldr	r1, [pc, #356]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031d8:	d101      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80031da:	2301      	movs	r3, #1
 80031dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80031e6:	2301      	movs	r3, #1
 80031e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d017      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031f6:	4b4e      	ldr	r3, [pc, #312]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003204:	494a      	ldr	r1, [pc, #296]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003206:	4313      	orrs	r3, r2
 8003208:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003214:	d101      	bne.n	800321a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003216:	2301      	movs	r3, #1
 8003218:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003222:	2301      	movs	r3, #1
 8003224:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003232:	2301      	movs	r3, #1
 8003234:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0320 	and.w	r3, r3, #32
 800323e:	2b00      	cmp	r3, #0
 8003240:	f000 808b 	beq.w	800335a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003244:	4b3a      	ldr	r3, [pc, #232]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003248:	4a39      	ldr	r2, [pc, #228]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800324a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800324e:	6413      	str	r3, [r2, #64]	; 0x40
 8003250:	4b37      	ldr	r3, [pc, #220]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003258:	60bb      	str	r3, [r7, #8]
 800325a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800325c:	4b35      	ldr	r3, [pc, #212]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a34      	ldr	r2, [pc, #208]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003266:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003268:	f7fe fd62 	bl	8001d30 <HAL_GetTick>
 800326c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800326e:	e008      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003270:	f7fe fd5e 	bl	8001d30 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b64      	cmp	r3, #100	; 0x64
 800327c:	d901      	bls.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e38f      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003282:	4b2c      	ldr	r3, [pc, #176]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0f0      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800328e:	4b28      	ldr	r3, [pc, #160]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003296:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d035      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d02e      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032ac:	4b20      	ldr	r3, [pc, #128]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032b4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032b6:	4b1e      	ldr	r3, [pc, #120]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ba:	4a1d      	ldr	r2, [pc, #116]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032c2:	4b1b      	ldr	r3, [pc, #108]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c6:	4a1a      	ldr	r2, [pc, #104]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032cc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80032ce:	4a18      	ldr	r2, [pc, #96]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80032d4:	4b16      	ldr	r3, [pc, #88]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d114      	bne.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e0:	f7fe fd26 	bl	8001d30 <HAL_GetTick>
 80032e4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e6:	e00a      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e8:	f7fe fd22 	bl	8001d30 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d901      	bls.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e351      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032fe:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0ee      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003312:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003316:	d111      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003318:	4b05      	ldr	r3, [pc, #20]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003324:	4b04      	ldr	r3, [pc, #16]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003326:	400b      	ands	r3, r1
 8003328:	4901      	ldr	r1, [pc, #4]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800332a:	4313      	orrs	r3, r2
 800332c:	608b      	str	r3, [r1, #8]
 800332e:	e00b      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003330:	40023800 	.word	0x40023800
 8003334:	40007000 	.word	0x40007000
 8003338:	0ffffcff 	.word	0x0ffffcff
 800333c:	4bac      	ldr	r3, [pc, #688]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	4aab      	ldr	r2, [pc, #684]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003342:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003346:	6093      	str	r3, [r2, #8]
 8003348:	4ba9      	ldr	r3, [pc, #676]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800334a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003354:	49a6      	ldr	r1, [pc, #664]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003356:	4313      	orrs	r3, r2
 8003358:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0310 	and.w	r3, r3, #16
 8003362:	2b00      	cmp	r3, #0
 8003364:	d010      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003366:	4ba2      	ldr	r3, [pc, #648]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003368:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800336c:	4aa0      	ldr	r2, [pc, #640]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800336e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003372:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003376:	4b9e      	ldr	r3, [pc, #632]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003378:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003380:	499b      	ldr	r1, [pc, #620]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003382:	4313      	orrs	r3, r2
 8003384:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00a      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003394:	4b96      	ldr	r3, [pc, #600]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033a2:	4993      	ldr	r1, [pc, #588]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00a      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033b6:	4b8e      	ldr	r3, [pc, #568]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033c4:	498a      	ldr	r1, [pc, #552]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00a      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033d8:	4b85      	ldr	r3, [pc, #532]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033e6:	4982      	ldr	r1, [pc, #520]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00a      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033fa:	4b7d      	ldr	r3, [pc, #500]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003400:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003408:	4979      	ldr	r1, [pc, #484]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800340a:	4313      	orrs	r3, r2
 800340c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00a      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800341c:	4b74      	ldr	r3, [pc, #464]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800341e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003422:	f023 0203 	bic.w	r2, r3, #3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342a:	4971      	ldr	r1, [pc, #452]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800342c:	4313      	orrs	r3, r2
 800342e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00a      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800343e:	4b6c      	ldr	r3, [pc, #432]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003444:	f023 020c 	bic.w	r2, r3, #12
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800344c:	4968      	ldr	r1, [pc, #416]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800344e:	4313      	orrs	r3, r2
 8003450:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00a      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003460:	4b63      	ldr	r3, [pc, #396]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003466:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800346e:	4960      	ldr	r1, [pc, #384]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003470:	4313      	orrs	r3, r2
 8003472:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00a      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003482:	4b5b      	ldr	r3, [pc, #364]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003488:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003490:	4957      	ldr	r1, [pc, #348]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003492:	4313      	orrs	r3, r2
 8003494:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00a      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034a4:	4b52      	ldr	r3, [pc, #328]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b2:	494f      	ldr	r1, [pc, #316]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80034c6:	4b4a      	ldr	r3, [pc, #296]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d4:	4946      	ldr	r1, [pc, #280]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00a      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80034e8:	4b41      	ldr	r3, [pc, #260]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f6:	493e      	ldr	r1, [pc, #248]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00a      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800350a:	4b39      	ldr	r3, [pc, #228]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800350c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003510:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003518:	4935      	ldr	r1, [pc, #212]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800351a:	4313      	orrs	r3, r2
 800351c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00a      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800352c:	4b30      	ldr	r3, [pc, #192]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800352e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003532:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800353a:	492d      	ldr	r1, [pc, #180]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800353c:	4313      	orrs	r3, r2
 800353e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d011      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800354e:	4b28      	ldr	r3, [pc, #160]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003554:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800355c:	4924      	ldr	r1, [pc, #144]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800355e:	4313      	orrs	r3, r2
 8003560:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003568:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800356c:	d101      	bne.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800356e:	2301      	movs	r3, #1
 8003570:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0308 	and.w	r3, r3, #8
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800357e:	2301      	movs	r3, #1
 8003580:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00a      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800358e:	4b18      	ldr	r3, [pc, #96]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003594:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800359c:	4914      	ldr	r1, [pc, #80]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00b      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035b0:	4b0f      	ldr	r3, [pc, #60]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035c0:	490b      	ldr	r1, [pc, #44]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00f      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80035d4:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035da:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035e4:	4902      	ldr	r1, [pc, #8]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80035ec:	e002      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80035ee:	bf00      	nop
 80035f0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00b      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003600:	4b8a      	ldr	r3, [pc, #552]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003602:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003606:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003610:	4986      	ldr	r1, [pc, #536]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003612:	4313      	orrs	r3, r2
 8003614:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00b      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003624:	4b81      	ldr	r3, [pc, #516]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003626:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800362a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003634:	497d      	ldr	r1, [pc, #500]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003636:	4313      	orrs	r3, r2
 8003638:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d006      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	f000 80d6 	beq.w	80037fc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003650:	4b76      	ldr	r3, [pc, #472]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a75      	ldr	r2, [pc, #468]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003656:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800365a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800365c:	f7fe fb68 	bl	8001d30 <HAL_GetTick>
 8003660:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003662:	e008      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003664:	f7fe fb64 	bl	8001d30 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b64      	cmp	r3, #100	; 0x64
 8003670:	d901      	bls.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e195      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003676:	4b6d      	ldr	r3, [pc, #436]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f0      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d021      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003692:	2b00      	cmp	r3, #0
 8003694:	d11d      	bne.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003696:	4b65      	ldr	r3, [pc, #404]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003698:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800369c:	0c1b      	lsrs	r3, r3, #16
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036a4:	4b61      	ldr	r3, [pc, #388]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036aa:	0e1b      	lsrs	r3, r3, #24
 80036ac:	f003 030f 	and.w	r3, r3, #15
 80036b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	019a      	lsls	r2, r3, #6
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	041b      	lsls	r3, r3, #16
 80036bc:	431a      	orrs	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	061b      	lsls	r3, r3, #24
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	071b      	lsls	r3, r3, #28
 80036ca:	4958      	ldr	r1, [pc, #352]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d004      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036e6:	d00a      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d02e      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036fc:	d129      	bne.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80036fe:	4b4b      	ldr	r3, [pc, #300]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003700:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003704:	0c1b      	lsrs	r3, r3, #16
 8003706:	f003 0303 	and.w	r3, r3, #3
 800370a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800370c:	4b47      	ldr	r3, [pc, #284]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800370e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003712:	0f1b      	lsrs	r3, r3, #28
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	019a      	lsls	r2, r3, #6
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	041b      	lsls	r3, r3, #16
 8003724:	431a      	orrs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	061b      	lsls	r3, r3, #24
 800372c:	431a      	orrs	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	071b      	lsls	r3, r3, #28
 8003732:	493e      	ldr	r1, [pc, #248]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003734:	4313      	orrs	r3, r2
 8003736:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800373a:	4b3c      	ldr	r3, [pc, #240]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800373c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003740:	f023 021f 	bic.w	r2, r3, #31
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	3b01      	subs	r3, #1
 800374a:	4938      	ldr	r1, [pc, #224]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800374c:	4313      	orrs	r3, r2
 800374e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d01d      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800375e:	4b33      	ldr	r3, [pc, #204]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003760:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003764:	0e1b      	lsrs	r3, r3, #24
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800376c:	4b2f      	ldr	r3, [pc, #188]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800376e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003772:	0f1b      	lsrs	r3, r3, #28
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	019a      	lsls	r2, r3, #6
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	041b      	lsls	r3, r3, #16
 8003786:	431a      	orrs	r2, r3
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	061b      	lsls	r3, r3, #24
 800378c:	431a      	orrs	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	071b      	lsls	r3, r3, #28
 8003792:	4926      	ldr	r1, [pc, #152]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003794:	4313      	orrs	r3, r2
 8003796:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d011      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	019a      	lsls	r2, r3, #6
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	041b      	lsls	r3, r3, #16
 80037b2:	431a      	orrs	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	061b      	lsls	r3, r3, #24
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	071b      	lsls	r3, r3, #28
 80037c2:	491a      	ldr	r1, [pc, #104]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80037ca:	4b18      	ldr	r3, [pc, #96]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a17      	ldr	r2, [pc, #92]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037d6:	f7fe faab 	bl	8001d30 <HAL_GetTick>
 80037da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037dc:	e008      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80037de:	f7fe faa7 	bl	8001d30 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b64      	cmp	r3, #100	; 0x64
 80037ea:	d901      	bls.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e0d8      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037f0:	4b0e      	ldr	r3, [pc, #56]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0f0      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	f040 80ce 	bne.w	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003804:	4b09      	ldr	r3, [pc, #36]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a08      	ldr	r2, [pc, #32]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800380a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800380e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003810:	f7fe fa8e 	bl	8001d30 <HAL_GetTick>
 8003814:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003816:	e00b      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003818:	f7fe fa8a 	bl	8001d30 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b64      	cmp	r3, #100	; 0x64
 8003824:	d904      	bls.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e0bb      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800382a:	bf00      	nop
 800382c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003830:	4b5e      	ldr	r3, [pc, #376]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003838:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800383c:	d0ec      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384e:	2b00      	cmp	r3, #0
 8003850:	d009      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800385a:	2b00      	cmp	r3, #0
 800385c:	d02e      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	2b00      	cmp	r3, #0
 8003864:	d12a      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003866:	4b51      	ldr	r3, [pc, #324]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386c:	0c1b      	lsrs	r3, r3, #16
 800386e:	f003 0303 	and.w	r3, r3, #3
 8003872:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003874:	4b4d      	ldr	r3, [pc, #308]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387a:	0f1b      	lsrs	r3, r3, #28
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	019a      	lsls	r2, r3, #6
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	041b      	lsls	r3, r3, #16
 800388c:	431a      	orrs	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	061b      	lsls	r3, r3, #24
 8003894:	431a      	orrs	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	071b      	lsls	r3, r3, #28
 800389a:	4944      	ldr	r1, [pc, #272]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80038a2:	4b42      	ldr	r3, [pc, #264]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038a8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b0:	3b01      	subs	r3, #1
 80038b2:	021b      	lsls	r3, r3, #8
 80038b4:	493d      	ldr	r1, [pc, #244]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d022      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038d0:	d11d      	bne.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80038d2:	4b36      	ldr	r3, [pc, #216]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d8:	0e1b      	lsrs	r3, r3, #24
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038e0:	4b32      	ldr	r3, [pc, #200]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e6:	0f1b      	lsrs	r3, r3, #28
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	019a      	lsls	r2, r3, #6
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	041b      	lsls	r3, r3, #16
 80038fa:	431a      	orrs	r2, r3
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	061b      	lsls	r3, r3, #24
 8003900:	431a      	orrs	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	071b      	lsls	r3, r3, #28
 8003906:	4929      	ldr	r1, [pc, #164]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003908:	4313      	orrs	r3, r2
 800390a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0308 	and.w	r3, r3, #8
 8003916:	2b00      	cmp	r3, #0
 8003918:	d028      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800391a:	4b24      	ldr	r3, [pc, #144]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800391c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003920:	0e1b      	lsrs	r3, r3, #24
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003928:	4b20      	ldr	r3, [pc, #128]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800392a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800392e:	0c1b      	lsrs	r3, r3, #16
 8003930:	f003 0303 	and.w	r3, r3, #3
 8003934:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	019a      	lsls	r2, r3, #6
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	041b      	lsls	r3, r3, #16
 8003940:	431a      	orrs	r2, r3
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	061b      	lsls	r3, r3, #24
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	071b      	lsls	r3, r3, #28
 800394e:	4917      	ldr	r1, [pc, #92]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003950:	4313      	orrs	r3, r2
 8003952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003956:	4b15      	ldr	r3, [pc, #84]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003958:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800395c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003964:	4911      	ldr	r1, [pc, #68]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003966:	4313      	orrs	r3, r2
 8003968:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800396c:	4b0f      	ldr	r3, [pc, #60]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a0e      	ldr	r2, [pc, #56]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003976:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003978:	f7fe f9da 	bl	8001d30 <HAL_GetTick>
 800397c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800397e:	e008      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003980:	f7fe f9d6 	bl	8001d30 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b64      	cmp	r3, #100	; 0x64
 800398c:	d901      	bls.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e007      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003992:	4b06      	ldr	r3, [pc, #24]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800399a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800399e:	d1ef      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3720      	adds	r7, #32
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40023800 	.word	0x40023800

080039b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e049      	b.n	8003a56 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d106      	bne.n	80039dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f841 	bl	8003a5e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2202      	movs	r2, #2
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	3304      	adds	r3, #4
 80039ec:	4619      	mov	r1, r3
 80039ee:	4610      	mov	r0, r2
 80039f0:	f000 fa00 	bl	8003df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
	...

08003a74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d001      	beq.n	8003a8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e054      	b.n	8003b36 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2202      	movs	r2, #2
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68da      	ldr	r2, [r3, #12]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f042 0201 	orr.w	r2, r2, #1
 8003aa2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a26      	ldr	r2, [pc, #152]	; (8003b44 <HAL_TIM_Base_Start_IT+0xd0>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d022      	beq.n	8003af4 <HAL_TIM_Base_Start_IT+0x80>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab6:	d01d      	beq.n	8003af4 <HAL_TIM_Base_Start_IT+0x80>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a22      	ldr	r2, [pc, #136]	; (8003b48 <HAL_TIM_Base_Start_IT+0xd4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d018      	beq.n	8003af4 <HAL_TIM_Base_Start_IT+0x80>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a21      	ldr	r2, [pc, #132]	; (8003b4c <HAL_TIM_Base_Start_IT+0xd8>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d013      	beq.n	8003af4 <HAL_TIM_Base_Start_IT+0x80>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a1f      	ldr	r2, [pc, #124]	; (8003b50 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d00e      	beq.n	8003af4 <HAL_TIM_Base_Start_IT+0x80>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a1e      	ldr	r2, [pc, #120]	; (8003b54 <HAL_TIM_Base_Start_IT+0xe0>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d009      	beq.n	8003af4 <HAL_TIM_Base_Start_IT+0x80>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a1c      	ldr	r2, [pc, #112]	; (8003b58 <HAL_TIM_Base_Start_IT+0xe4>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d004      	beq.n	8003af4 <HAL_TIM_Base_Start_IT+0x80>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a1b      	ldr	r2, [pc, #108]	; (8003b5c <HAL_TIM_Base_Start_IT+0xe8>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d115      	bne.n	8003b20 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689a      	ldr	r2, [r3, #8]
 8003afa:	4b19      	ldr	r3, [pc, #100]	; (8003b60 <HAL_TIM_Base_Start_IT+0xec>)
 8003afc:	4013      	ands	r3, r2
 8003afe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2b06      	cmp	r3, #6
 8003b04:	d015      	beq.n	8003b32 <HAL_TIM_Base_Start_IT+0xbe>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b0c:	d011      	beq.n	8003b32 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f042 0201 	orr.w	r2, r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b1e:	e008      	b.n	8003b32 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0201 	orr.w	r2, r2, #1
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	e000      	b.n	8003b34 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	40010000 	.word	0x40010000
 8003b48:	40000400 	.word	0x40000400
 8003b4c:	40000800 	.word	0x40000800
 8003b50:	40000c00 	.word	0x40000c00
 8003b54:	40010400 	.word	0x40010400
 8003b58:	40014000 	.word	0x40014000
 8003b5c:	40001800 	.word	0x40001800
 8003b60:	00010007 	.word	0x00010007

08003b64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d122      	bne.n	8003bc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d11b      	bne.n	8003bc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f06f 0202 	mvn.w	r2, #2
 8003b90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	f003 0303 	and.w	r3, r3, #3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f905 	bl	8003db6 <HAL_TIM_IC_CaptureCallback>
 8003bac:	e005      	b.n	8003bba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f8f7 	bl	8003da2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 f908 	bl	8003dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	f003 0304 	and.w	r3, r3, #4
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d122      	bne.n	8003c14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b04      	cmp	r3, #4
 8003bda:	d11b      	bne.n	8003c14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f06f 0204 	mvn.w	r2, #4
 8003be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2202      	movs	r2, #2
 8003bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f8db 	bl	8003db6 <HAL_TIM_IC_CaptureCallback>
 8003c00:	e005      	b.n	8003c0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f8cd 	bl	8003da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f8de 	bl	8003dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	f003 0308 	and.w	r3, r3, #8
 8003c1e:	2b08      	cmp	r3, #8
 8003c20:	d122      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f003 0308 	and.w	r3, r3, #8
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d11b      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f06f 0208 	mvn.w	r2, #8
 8003c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2204      	movs	r2, #4
 8003c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	f003 0303 	and.w	r3, r3, #3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f8b1 	bl	8003db6 <HAL_TIM_IC_CaptureCallback>
 8003c54:	e005      	b.n	8003c62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f8a3 	bl	8003da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f8b4 	bl	8003dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f003 0310 	and.w	r3, r3, #16
 8003c72:	2b10      	cmp	r3, #16
 8003c74:	d122      	bne.n	8003cbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f003 0310 	and.w	r3, r3, #16
 8003c80:	2b10      	cmp	r3, #16
 8003c82:	d11b      	bne.n	8003cbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f06f 0210 	mvn.w	r2, #16
 8003c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2208      	movs	r2, #8
 8003c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f887 	bl	8003db6 <HAL_TIM_IC_CaptureCallback>
 8003ca8:	e005      	b.n	8003cb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f879 	bl	8003da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 f88a 	bl	8003dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d10e      	bne.n	8003ce8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d107      	bne.n	8003ce8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f06f 0201 	mvn.w	r2, #1
 8003ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7fd fde0 	bl	80018a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf2:	2b80      	cmp	r3, #128	; 0x80
 8003cf4:	d10e      	bne.n	8003d14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d00:	2b80      	cmp	r3, #128	; 0x80
 8003d02:	d107      	bne.n	8003d14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f91a 	bl	8003f48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d22:	d10e      	bne.n	8003d42 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d2e:	2b80      	cmp	r3, #128	; 0x80
 8003d30:	d107      	bne.n	8003d42 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f90d 	bl	8003f5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d4c:	2b40      	cmp	r3, #64	; 0x40
 8003d4e:	d10e      	bne.n	8003d6e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d5a:	2b40      	cmp	r3, #64	; 0x40
 8003d5c:	d107      	bne.n	8003d6e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f838 	bl	8003dde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	f003 0320 	and.w	r3, r3, #32
 8003d78:	2b20      	cmp	r3, #32
 8003d7a:	d10e      	bne.n	8003d9a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f003 0320 	and.w	r3, r3, #32
 8003d86:	2b20      	cmp	r3, #32
 8003d88:	d107      	bne.n	8003d9a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f06f 0220 	mvn.w	r2, #32
 8003d92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 f8cd 	bl	8003f34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d9a:	bf00      	nop
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
	...

08003df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a40      	ldr	r2, [pc, #256]	; (8003f08 <TIM_Base_SetConfig+0x114>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d013      	beq.n	8003e34 <TIM_Base_SetConfig+0x40>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e12:	d00f      	beq.n	8003e34 <TIM_Base_SetConfig+0x40>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a3d      	ldr	r2, [pc, #244]	; (8003f0c <TIM_Base_SetConfig+0x118>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d00b      	beq.n	8003e34 <TIM_Base_SetConfig+0x40>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a3c      	ldr	r2, [pc, #240]	; (8003f10 <TIM_Base_SetConfig+0x11c>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d007      	beq.n	8003e34 <TIM_Base_SetConfig+0x40>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a3b      	ldr	r2, [pc, #236]	; (8003f14 <TIM_Base_SetConfig+0x120>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d003      	beq.n	8003e34 <TIM_Base_SetConfig+0x40>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a3a      	ldr	r2, [pc, #232]	; (8003f18 <TIM_Base_SetConfig+0x124>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d108      	bne.n	8003e46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a2f      	ldr	r2, [pc, #188]	; (8003f08 <TIM_Base_SetConfig+0x114>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d02b      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e54:	d027      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a2c      	ldr	r2, [pc, #176]	; (8003f0c <TIM_Base_SetConfig+0x118>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d023      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a2b      	ldr	r2, [pc, #172]	; (8003f10 <TIM_Base_SetConfig+0x11c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d01f      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a2a      	ldr	r2, [pc, #168]	; (8003f14 <TIM_Base_SetConfig+0x120>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d01b      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a29      	ldr	r2, [pc, #164]	; (8003f18 <TIM_Base_SetConfig+0x124>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d017      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a28      	ldr	r2, [pc, #160]	; (8003f1c <TIM_Base_SetConfig+0x128>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d013      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a27      	ldr	r2, [pc, #156]	; (8003f20 <TIM_Base_SetConfig+0x12c>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00f      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a26      	ldr	r2, [pc, #152]	; (8003f24 <TIM_Base_SetConfig+0x130>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d00b      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a25      	ldr	r2, [pc, #148]	; (8003f28 <TIM_Base_SetConfig+0x134>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d007      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a24      	ldr	r2, [pc, #144]	; (8003f2c <TIM_Base_SetConfig+0x138>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d003      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a23      	ldr	r2, [pc, #140]	; (8003f30 <TIM_Base_SetConfig+0x13c>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d108      	bne.n	8003eb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a0a      	ldr	r2, [pc, #40]	; (8003f08 <TIM_Base_SetConfig+0x114>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d003      	beq.n	8003eec <TIM_Base_SetConfig+0xf8>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a0c      	ldr	r2, [pc, #48]	; (8003f18 <TIM_Base_SetConfig+0x124>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d103      	bne.n	8003ef4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	691a      	ldr	r2, [r3, #16]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	615a      	str	r2, [r3, #20]
}
 8003efa:	bf00      	nop
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	40010000 	.word	0x40010000
 8003f0c:	40000400 	.word	0x40000400
 8003f10:	40000800 	.word	0x40000800
 8003f14:	40000c00 	.word	0x40000c00
 8003f18:	40010400 	.word	0x40010400
 8003f1c:	40014000 	.word	0x40014000
 8003f20:	40014400 	.word	0x40014400
 8003f24:	40014800 	.word	0x40014800
 8003f28:	40001800 	.word	0x40001800
 8003f2c:	40001c00 	.word	0x40001c00
 8003f30:	40002000 	.word	0x40002000

08003f34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e040      	b.n	8004004 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d106      	bne.n	8003f98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7fd fcc8 	bl	8001928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2224      	movs	r2, #36	; 0x24
 8003f9c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0201 	bic.w	r2, r2, #1
 8003fac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 fbe0 	bl	8004774 <UART_SetConfig>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d101      	bne.n	8003fbe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e022      	b.n	8004004 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d002      	beq.n	8003fcc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 fe38 	bl	8004c3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689a      	ldr	r2, [r3, #8]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f042 0201 	orr.w	r2, r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 febf 	bl	8004d80 <UART_CheckIdleState>
 8004002:	4603      	mov	r3, r0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800400c:	b480      	push	{r7}
 800400e:	b08b      	sub	sp, #44	; 0x2c
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	4613      	mov	r3, r2
 8004018:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800401e:	2b20      	cmp	r3, #32
 8004020:	d147      	bne.n	80040b2 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d002      	beq.n	800402e <HAL_UART_Transmit_IT+0x22>
 8004028:	88fb      	ldrh	r3, [r7, #6]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e040      	b.n	80040b4 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	68ba      	ldr	r2, [r7, #8]
 8004036:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	88fa      	ldrh	r2, [r7, #6]
 800403c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	88fa      	ldrh	r2, [r7, #6]
 8004044:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2221      	movs	r2, #33	; 0x21
 800405a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004064:	d107      	bne.n	8004076 <HAL_UART_Transmit_IT+0x6a>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d103      	bne.n	8004076 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4a13      	ldr	r2, [pc, #76]	; (80040c0 <HAL_UART_Transmit_IT+0xb4>)
 8004072:	66da      	str	r2, [r3, #108]	; 0x6c
 8004074:	e002      	b.n	800407c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4a12      	ldr	r2, [pc, #72]	; (80040c4 <HAL_UART_Transmit_IT+0xb8>)
 800407a:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	e853 3f00 	ldrex	r3, [r3]
 8004088:	613b      	str	r3, [r7, #16]
   return(result);
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004090:	627b      	str	r3, [r7, #36]	; 0x24
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	461a      	mov	r2, r3
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	623b      	str	r3, [r7, #32]
 800409c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409e:	69f9      	ldr	r1, [r7, #28]
 80040a0:	6a3a      	ldr	r2, [r7, #32]
 80040a2:	e841 2300 	strex	r3, r2, [r1]
 80040a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1e6      	bne.n	800407c <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80040ae:	2300      	movs	r3, #0
 80040b0:	e000      	b.n	80040b4 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80040b2:	2302      	movs	r3, #2
  }
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	372c      	adds	r7, #44	; 0x2c
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	080052df 	.word	0x080052df
 80040c4:	08005229 	.word	0x08005229

080040c8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b08a      	sub	sp, #40	; 0x28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	4613      	mov	r3, r2
 80040d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040dc:	2b20      	cmp	r3, #32
 80040de:	d132      	bne.n	8004146 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <HAL_UART_Receive_IT+0x24>
 80040e6:	88fb      	ldrh	r3, [r7, #6]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e02b      	b.n	8004148 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d018      	beq.n	8004136 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	e853 3f00 	ldrex	r3, [r3]
 8004110:	613b      	str	r3, [r7, #16]
   return(result);
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004118:	627b      	str	r3, [r7, #36]	; 0x24
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	461a      	mov	r2, r3
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	623b      	str	r3, [r7, #32]
 8004124:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004126:	69f9      	ldr	r1, [r7, #28]
 8004128:	6a3a      	ldr	r2, [r7, #32]
 800412a:	e841 2300 	strex	r3, r2, [r1]
 800412e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1e6      	bne.n	8004104 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004136:	88fb      	ldrh	r3, [r7, #6]
 8004138:	461a      	mov	r2, r3
 800413a:	68b9      	ldr	r1, [r7, #8]
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f000 ff33 	bl	8004fa8 <UART_Start_Receive_IT>
 8004142:	4603      	mov	r3, r0
 8004144:	e000      	b.n	8004148 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004146:	2302      	movs	r3, #2
  }
}
 8004148:	4618      	mov	r0, r3
 800414a:	3728      	adds	r7, #40	; 0x28
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b0ba      	sub	sp, #232	; 0xe8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004176:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800417a:	f640 030f 	movw	r3, #2063	; 0x80f
 800417e:	4013      	ands	r3, r2
 8004180:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004184:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004188:	2b00      	cmp	r3, #0
 800418a:	d115      	bne.n	80041b8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800418c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004190:	f003 0320 	and.w	r3, r3, #32
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00f      	beq.n	80041b8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800419c:	f003 0320 	and.w	r3, r3, #32
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d009      	beq.n	80041b8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 82ac 	beq.w	8004706 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	4798      	blx	r3
      }
      return;
 80041b6:	e2a6      	b.n	8004706 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80041b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 8117 	beq.w	80043f0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80041c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d106      	bne.n	80041dc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80041ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80041d2:	4b85      	ldr	r3, [pc, #532]	; (80043e8 <HAL_UART_IRQHandler+0x298>)
 80041d4:	4013      	ands	r3, r2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 810a 	beq.w	80043f0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d011      	beq.n	800420c <HAL_UART_IRQHandler+0xbc>
 80041e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00b      	beq.n	800420c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2201      	movs	r2, #1
 80041fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004202:	f043 0201 	orr.w	r2, r3, #1
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800420c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d011      	beq.n	800423c <HAL_UART_IRQHandler+0xec>
 8004218:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00b      	beq.n	800423c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2202      	movs	r2, #2
 800422a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004232:	f043 0204 	orr.w	r2, r3, #4
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800423c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	d011      	beq.n	800426c <HAL_UART_IRQHandler+0x11c>
 8004248:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00b      	beq.n	800426c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2204      	movs	r2, #4
 800425a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004262:	f043 0202 	orr.w	r2, r3, #2
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800426c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004270:	f003 0308 	and.w	r3, r3, #8
 8004274:	2b00      	cmp	r3, #0
 8004276:	d017      	beq.n	80042a8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800427c:	f003 0320 	and.w	r3, r3, #32
 8004280:	2b00      	cmp	r3, #0
 8004282:	d105      	bne.n	8004290 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004288:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00b      	beq.n	80042a8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2208      	movs	r2, #8
 8004296:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800429e:	f043 0208 	orr.w	r2, r3, #8
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80042a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d012      	beq.n	80042da <HAL_UART_IRQHandler+0x18a>
 80042b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00c      	beq.n	80042da <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042d0:	f043 0220 	orr.w	r2, r3, #32
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 8212 	beq.w	800470a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80042e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ea:	f003 0320 	and.w	r3, r3, #32
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00d      	beq.n	800430e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80042f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042f6:	f003 0320 	and.w	r3, r3, #32
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d007      	beq.n	800430e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004314:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004322:	2b40      	cmp	r3, #64	; 0x40
 8004324:	d005      	beq.n	8004332 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004326:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800432a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800432e:	2b00      	cmp	r3, #0
 8004330:	d04f      	beq.n	80043d2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 fefe 	bl	8005134 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004342:	2b40      	cmp	r3, #64	; 0x40
 8004344:	d141      	bne.n	80043ca <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	3308      	adds	r3, #8
 800434c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004350:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004354:	e853 3f00 	ldrex	r3, [r3]
 8004358:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800435c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004360:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004364:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	3308      	adds	r3, #8
 800436e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004372:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004376:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800437e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004382:	e841 2300 	strex	r3, r2, [r1]
 8004386:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800438a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1d9      	bne.n	8004346 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004396:	2b00      	cmp	r3, #0
 8004398:	d013      	beq.n	80043c2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800439e:	4a13      	ldr	r2, [pc, #76]	; (80043ec <HAL_UART_IRQHandler+0x29c>)
 80043a0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7fd fe44 	bl	8002034 <HAL_DMA_Abort_IT>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d017      	beq.n	80043e2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80043bc:	4610      	mov	r0, r2
 80043be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c0:	e00f      	b.n	80043e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f9b6 	bl	8004734 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c8:	e00b      	b.n	80043e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f9b2 	bl	8004734 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d0:	e007      	b.n	80043e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f9ae 	bl	8004734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80043e0:	e193      	b.n	800470a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043e2:	bf00      	nop
    return;
 80043e4:	e191      	b.n	800470a <HAL_UART_IRQHandler+0x5ba>
 80043e6:	bf00      	nop
 80043e8:	04000120 	.word	0x04000120
 80043ec:	080051fd 	.word	0x080051fd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	f040 814c 	bne.w	8004692 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80043fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043fe:	f003 0310 	and.w	r3, r3, #16
 8004402:	2b00      	cmp	r3, #0
 8004404:	f000 8145 	beq.w	8004692 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800440c:	f003 0310 	and.w	r3, r3, #16
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 813e 	beq.w	8004692 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2210      	movs	r2, #16
 800441c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004428:	2b40      	cmp	r3, #64	; 0x40
 800442a:	f040 80b6 	bne.w	800459a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800443a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 8165 	beq.w	800470e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800444a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800444e:	429a      	cmp	r2, r3
 8004450:	f080 815d 	bcs.w	800470e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800445a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004468:	f000 8086 	beq.w	8004578 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004474:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004478:	e853 3f00 	ldrex	r3, [r3]
 800447c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004480:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004484:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004488:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	461a      	mov	r2, r3
 8004492:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004496:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800449a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80044a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80044a6:	e841 2300 	strex	r3, r2, [r1]
 80044aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80044ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1da      	bne.n	800446c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	3308      	adds	r3, #8
 80044bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044c0:	e853 3f00 	ldrex	r3, [r3]
 80044c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80044c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044c8:	f023 0301 	bic.w	r3, r3, #1
 80044cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	3308      	adds	r3, #8
 80044d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80044da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80044de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80044e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80044e6:	e841 2300 	strex	r3, r2, [r1]
 80044ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80044ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1e1      	bne.n	80044b6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	3308      	adds	r3, #8
 80044f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044fc:	e853 3f00 	ldrex	r3, [r3]
 8004500:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004502:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004504:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004508:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	3308      	adds	r3, #8
 8004512:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004516:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004518:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800451c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800451e:	e841 2300 	strex	r3, r2, [r1]
 8004522:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004524:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1e3      	bne.n	80044f2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2220      	movs	r2, #32
 800452e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004540:	e853 3f00 	ldrex	r3, [r3]
 8004544:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004548:	f023 0310 	bic.w	r3, r3, #16
 800454c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	461a      	mov	r2, r3
 8004556:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800455a:	65bb      	str	r3, [r7, #88]	; 0x58
 800455c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004560:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004562:	e841 2300 	strex	r3, r2, [r1]
 8004566:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1e4      	bne.n	8004538 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004572:	4618      	mov	r0, r3
 8004574:	f7fd fcee 	bl	8001f54 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800458a:	b29b      	uxth	r3, r3
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	b29b      	uxth	r3, r3
 8004590:	4619      	mov	r1, r3
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f8d8 	bl	8004748 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004598:	e0b9      	b.n	800470e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 80ab 	beq.w	8004712 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80045bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f000 80a6 	beq.w	8004712 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ce:	e853 3f00 	ldrex	r3, [r3]
 80045d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	461a      	mov	r2, r3
 80045e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80045e8:	647b      	str	r3, [r7, #68]	; 0x44
 80045ea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045f0:	e841 2300 	strex	r3, r2, [r1]
 80045f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80045f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1e4      	bne.n	80045c6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	3308      	adds	r3, #8
 8004602:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004606:	e853 3f00 	ldrex	r3, [r3]
 800460a:	623b      	str	r3, [r7, #32]
   return(result);
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	f023 0301 	bic.w	r3, r3, #1
 8004612:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	3308      	adds	r3, #8
 800461c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004620:	633a      	str	r2, [r7, #48]	; 0x30
 8004622:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004624:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004626:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004628:	e841 2300 	strex	r3, r2, [r1]
 800462c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800462e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1e3      	bne.n	80045fc <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2220      	movs	r2, #32
 8004638:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	e853 3f00 	ldrex	r3, [r3]
 8004654:	60fb      	str	r3, [r7, #12]
   return(result);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f023 0310 	bic.w	r3, r3, #16
 800465c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	461a      	mov	r2, r3
 8004666:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800466a:	61fb      	str	r3, [r7, #28]
 800466c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466e:	69b9      	ldr	r1, [r7, #24]
 8004670:	69fa      	ldr	r2, [r7, #28]
 8004672:	e841 2300 	strex	r3, r2, [r1]
 8004676:	617b      	str	r3, [r7, #20]
   return(result);
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1e4      	bne.n	8004648 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2202      	movs	r2, #2
 8004682:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004684:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004688:	4619      	mov	r1, r3
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f85c 	bl	8004748 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004690:	e03f      	b.n	8004712 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00e      	beq.n	80046bc <HAL_UART_IRQHandler+0x56c>
 800469e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d008      	beq.n	80046bc <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80046b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f853 	bl	8004760 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80046ba:	e02d      	b.n	8004718 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80046bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00e      	beq.n	80046e6 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80046c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d008      	beq.n	80046e6 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d01c      	beq.n	8004716 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	4798      	blx	r3
    }
    return;
 80046e4:	e017      	b.n	8004716 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80046e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d012      	beq.n	8004718 <HAL_UART_IRQHandler+0x5c8>
 80046f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00c      	beq.n	8004718 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 fe4d 	bl	800539e <UART_EndTransmit_IT>
    return;
 8004704:	e008      	b.n	8004718 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004706:	bf00      	nop
 8004708:	e006      	b.n	8004718 <HAL_UART_IRQHandler+0x5c8>
    return;
 800470a:	bf00      	nop
 800470c:	e004      	b.n	8004718 <HAL_UART_IRQHandler+0x5c8>
      return;
 800470e:	bf00      	nop
 8004710:	e002      	b.n	8004718 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004712:	bf00      	nop
 8004714:	e000      	b.n	8004718 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004716:	bf00      	nop
  }

}
 8004718:	37e8      	adds	r7, #232	; 0xe8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop

08004720 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	460b      	mov	r3, r1
 8004752:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b088      	sub	sp, #32
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800477c:	2300      	movs	r3, #0
 800477e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	431a      	orrs	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	4313      	orrs	r3, r2
 8004796:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	4ba6      	ldr	r3, [pc, #664]	; (8004a38 <UART_SetConfig+0x2c4>)
 80047a0:	4013      	ands	r3, r2
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	6812      	ldr	r2, [r2, #0]
 80047a6:	6979      	ldr	r1, [r7, #20]
 80047a8:	430b      	orrs	r3, r1
 80047aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a94      	ldr	r2, [pc, #592]	; (8004a3c <UART_SetConfig+0x2c8>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d120      	bne.n	8004832 <UART_SetConfig+0xbe>
 80047f0:	4b93      	ldr	r3, [pc, #588]	; (8004a40 <UART_SetConfig+0x2cc>)
 80047f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f6:	f003 0303 	and.w	r3, r3, #3
 80047fa:	2b03      	cmp	r3, #3
 80047fc:	d816      	bhi.n	800482c <UART_SetConfig+0xb8>
 80047fe:	a201      	add	r2, pc, #4	; (adr r2, 8004804 <UART_SetConfig+0x90>)
 8004800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004804:	08004815 	.word	0x08004815
 8004808:	08004821 	.word	0x08004821
 800480c:	0800481b 	.word	0x0800481b
 8004810:	08004827 	.word	0x08004827
 8004814:	2301      	movs	r3, #1
 8004816:	77fb      	strb	r3, [r7, #31]
 8004818:	e150      	b.n	8004abc <UART_SetConfig+0x348>
 800481a:	2302      	movs	r3, #2
 800481c:	77fb      	strb	r3, [r7, #31]
 800481e:	e14d      	b.n	8004abc <UART_SetConfig+0x348>
 8004820:	2304      	movs	r3, #4
 8004822:	77fb      	strb	r3, [r7, #31]
 8004824:	e14a      	b.n	8004abc <UART_SetConfig+0x348>
 8004826:	2308      	movs	r3, #8
 8004828:	77fb      	strb	r3, [r7, #31]
 800482a:	e147      	b.n	8004abc <UART_SetConfig+0x348>
 800482c:	2310      	movs	r3, #16
 800482e:	77fb      	strb	r3, [r7, #31]
 8004830:	e144      	b.n	8004abc <UART_SetConfig+0x348>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a83      	ldr	r2, [pc, #524]	; (8004a44 <UART_SetConfig+0x2d0>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d132      	bne.n	80048a2 <UART_SetConfig+0x12e>
 800483c:	4b80      	ldr	r3, [pc, #512]	; (8004a40 <UART_SetConfig+0x2cc>)
 800483e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004842:	f003 030c 	and.w	r3, r3, #12
 8004846:	2b0c      	cmp	r3, #12
 8004848:	d828      	bhi.n	800489c <UART_SetConfig+0x128>
 800484a:	a201      	add	r2, pc, #4	; (adr r2, 8004850 <UART_SetConfig+0xdc>)
 800484c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004850:	08004885 	.word	0x08004885
 8004854:	0800489d 	.word	0x0800489d
 8004858:	0800489d 	.word	0x0800489d
 800485c:	0800489d 	.word	0x0800489d
 8004860:	08004891 	.word	0x08004891
 8004864:	0800489d 	.word	0x0800489d
 8004868:	0800489d 	.word	0x0800489d
 800486c:	0800489d 	.word	0x0800489d
 8004870:	0800488b 	.word	0x0800488b
 8004874:	0800489d 	.word	0x0800489d
 8004878:	0800489d 	.word	0x0800489d
 800487c:	0800489d 	.word	0x0800489d
 8004880:	08004897 	.word	0x08004897
 8004884:	2300      	movs	r3, #0
 8004886:	77fb      	strb	r3, [r7, #31]
 8004888:	e118      	b.n	8004abc <UART_SetConfig+0x348>
 800488a:	2302      	movs	r3, #2
 800488c:	77fb      	strb	r3, [r7, #31]
 800488e:	e115      	b.n	8004abc <UART_SetConfig+0x348>
 8004890:	2304      	movs	r3, #4
 8004892:	77fb      	strb	r3, [r7, #31]
 8004894:	e112      	b.n	8004abc <UART_SetConfig+0x348>
 8004896:	2308      	movs	r3, #8
 8004898:	77fb      	strb	r3, [r7, #31]
 800489a:	e10f      	b.n	8004abc <UART_SetConfig+0x348>
 800489c:	2310      	movs	r3, #16
 800489e:	77fb      	strb	r3, [r7, #31]
 80048a0:	e10c      	b.n	8004abc <UART_SetConfig+0x348>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a68      	ldr	r2, [pc, #416]	; (8004a48 <UART_SetConfig+0x2d4>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d120      	bne.n	80048ee <UART_SetConfig+0x17a>
 80048ac:	4b64      	ldr	r3, [pc, #400]	; (8004a40 <UART_SetConfig+0x2cc>)
 80048ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80048b6:	2b30      	cmp	r3, #48	; 0x30
 80048b8:	d013      	beq.n	80048e2 <UART_SetConfig+0x16e>
 80048ba:	2b30      	cmp	r3, #48	; 0x30
 80048bc:	d814      	bhi.n	80048e8 <UART_SetConfig+0x174>
 80048be:	2b20      	cmp	r3, #32
 80048c0:	d009      	beq.n	80048d6 <UART_SetConfig+0x162>
 80048c2:	2b20      	cmp	r3, #32
 80048c4:	d810      	bhi.n	80048e8 <UART_SetConfig+0x174>
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d002      	beq.n	80048d0 <UART_SetConfig+0x15c>
 80048ca:	2b10      	cmp	r3, #16
 80048cc:	d006      	beq.n	80048dc <UART_SetConfig+0x168>
 80048ce:	e00b      	b.n	80048e8 <UART_SetConfig+0x174>
 80048d0:	2300      	movs	r3, #0
 80048d2:	77fb      	strb	r3, [r7, #31]
 80048d4:	e0f2      	b.n	8004abc <UART_SetConfig+0x348>
 80048d6:	2302      	movs	r3, #2
 80048d8:	77fb      	strb	r3, [r7, #31]
 80048da:	e0ef      	b.n	8004abc <UART_SetConfig+0x348>
 80048dc:	2304      	movs	r3, #4
 80048de:	77fb      	strb	r3, [r7, #31]
 80048e0:	e0ec      	b.n	8004abc <UART_SetConfig+0x348>
 80048e2:	2308      	movs	r3, #8
 80048e4:	77fb      	strb	r3, [r7, #31]
 80048e6:	e0e9      	b.n	8004abc <UART_SetConfig+0x348>
 80048e8:	2310      	movs	r3, #16
 80048ea:	77fb      	strb	r3, [r7, #31]
 80048ec:	e0e6      	b.n	8004abc <UART_SetConfig+0x348>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a56      	ldr	r2, [pc, #344]	; (8004a4c <UART_SetConfig+0x2d8>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d120      	bne.n	800493a <UART_SetConfig+0x1c6>
 80048f8:	4b51      	ldr	r3, [pc, #324]	; (8004a40 <UART_SetConfig+0x2cc>)
 80048fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004902:	2bc0      	cmp	r3, #192	; 0xc0
 8004904:	d013      	beq.n	800492e <UART_SetConfig+0x1ba>
 8004906:	2bc0      	cmp	r3, #192	; 0xc0
 8004908:	d814      	bhi.n	8004934 <UART_SetConfig+0x1c0>
 800490a:	2b80      	cmp	r3, #128	; 0x80
 800490c:	d009      	beq.n	8004922 <UART_SetConfig+0x1ae>
 800490e:	2b80      	cmp	r3, #128	; 0x80
 8004910:	d810      	bhi.n	8004934 <UART_SetConfig+0x1c0>
 8004912:	2b00      	cmp	r3, #0
 8004914:	d002      	beq.n	800491c <UART_SetConfig+0x1a8>
 8004916:	2b40      	cmp	r3, #64	; 0x40
 8004918:	d006      	beq.n	8004928 <UART_SetConfig+0x1b4>
 800491a:	e00b      	b.n	8004934 <UART_SetConfig+0x1c0>
 800491c:	2300      	movs	r3, #0
 800491e:	77fb      	strb	r3, [r7, #31]
 8004920:	e0cc      	b.n	8004abc <UART_SetConfig+0x348>
 8004922:	2302      	movs	r3, #2
 8004924:	77fb      	strb	r3, [r7, #31]
 8004926:	e0c9      	b.n	8004abc <UART_SetConfig+0x348>
 8004928:	2304      	movs	r3, #4
 800492a:	77fb      	strb	r3, [r7, #31]
 800492c:	e0c6      	b.n	8004abc <UART_SetConfig+0x348>
 800492e:	2308      	movs	r3, #8
 8004930:	77fb      	strb	r3, [r7, #31]
 8004932:	e0c3      	b.n	8004abc <UART_SetConfig+0x348>
 8004934:	2310      	movs	r3, #16
 8004936:	77fb      	strb	r3, [r7, #31]
 8004938:	e0c0      	b.n	8004abc <UART_SetConfig+0x348>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a44      	ldr	r2, [pc, #272]	; (8004a50 <UART_SetConfig+0x2dc>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d125      	bne.n	8004990 <UART_SetConfig+0x21c>
 8004944:	4b3e      	ldr	r3, [pc, #248]	; (8004a40 <UART_SetConfig+0x2cc>)
 8004946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800494a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800494e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004952:	d017      	beq.n	8004984 <UART_SetConfig+0x210>
 8004954:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004958:	d817      	bhi.n	800498a <UART_SetConfig+0x216>
 800495a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800495e:	d00b      	beq.n	8004978 <UART_SetConfig+0x204>
 8004960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004964:	d811      	bhi.n	800498a <UART_SetConfig+0x216>
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <UART_SetConfig+0x1fe>
 800496a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800496e:	d006      	beq.n	800497e <UART_SetConfig+0x20a>
 8004970:	e00b      	b.n	800498a <UART_SetConfig+0x216>
 8004972:	2300      	movs	r3, #0
 8004974:	77fb      	strb	r3, [r7, #31]
 8004976:	e0a1      	b.n	8004abc <UART_SetConfig+0x348>
 8004978:	2302      	movs	r3, #2
 800497a:	77fb      	strb	r3, [r7, #31]
 800497c:	e09e      	b.n	8004abc <UART_SetConfig+0x348>
 800497e:	2304      	movs	r3, #4
 8004980:	77fb      	strb	r3, [r7, #31]
 8004982:	e09b      	b.n	8004abc <UART_SetConfig+0x348>
 8004984:	2308      	movs	r3, #8
 8004986:	77fb      	strb	r3, [r7, #31]
 8004988:	e098      	b.n	8004abc <UART_SetConfig+0x348>
 800498a:	2310      	movs	r3, #16
 800498c:	77fb      	strb	r3, [r7, #31]
 800498e:	e095      	b.n	8004abc <UART_SetConfig+0x348>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a2f      	ldr	r2, [pc, #188]	; (8004a54 <UART_SetConfig+0x2e0>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d125      	bne.n	80049e6 <UART_SetConfig+0x272>
 800499a:	4b29      	ldr	r3, [pc, #164]	; (8004a40 <UART_SetConfig+0x2cc>)
 800499c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049a8:	d017      	beq.n	80049da <UART_SetConfig+0x266>
 80049aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049ae:	d817      	bhi.n	80049e0 <UART_SetConfig+0x26c>
 80049b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049b4:	d00b      	beq.n	80049ce <UART_SetConfig+0x25a>
 80049b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ba:	d811      	bhi.n	80049e0 <UART_SetConfig+0x26c>
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d003      	beq.n	80049c8 <UART_SetConfig+0x254>
 80049c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049c4:	d006      	beq.n	80049d4 <UART_SetConfig+0x260>
 80049c6:	e00b      	b.n	80049e0 <UART_SetConfig+0x26c>
 80049c8:	2301      	movs	r3, #1
 80049ca:	77fb      	strb	r3, [r7, #31]
 80049cc:	e076      	b.n	8004abc <UART_SetConfig+0x348>
 80049ce:	2302      	movs	r3, #2
 80049d0:	77fb      	strb	r3, [r7, #31]
 80049d2:	e073      	b.n	8004abc <UART_SetConfig+0x348>
 80049d4:	2304      	movs	r3, #4
 80049d6:	77fb      	strb	r3, [r7, #31]
 80049d8:	e070      	b.n	8004abc <UART_SetConfig+0x348>
 80049da:	2308      	movs	r3, #8
 80049dc:	77fb      	strb	r3, [r7, #31]
 80049de:	e06d      	b.n	8004abc <UART_SetConfig+0x348>
 80049e0:	2310      	movs	r3, #16
 80049e2:	77fb      	strb	r3, [r7, #31]
 80049e4:	e06a      	b.n	8004abc <UART_SetConfig+0x348>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a1b      	ldr	r2, [pc, #108]	; (8004a58 <UART_SetConfig+0x2e4>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d138      	bne.n	8004a62 <UART_SetConfig+0x2ee>
 80049f0:	4b13      	ldr	r3, [pc, #76]	; (8004a40 <UART_SetConfig+0x2cc>)
 80049f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80049fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80049fe:	d017      	beq.n	8004a30 <UART_SetConfig+0x2bc>
 8004a00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a04:	d82a      	bhi.n	8004a5c <UART_SetConfig+0x2e8>
 8004a06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a0a:	d00b      	beq.n	8004a24 <UART_SetConfig+0x2b0>
 8004a0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a10:	d824      	bhi.n	8004a5c <UART_SetConfig+0x2e8>
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <UART_SetConfig+0x2aa>
 8004a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a1a:	d006      	beq.n	8004a2a <UART_SetConfig+0x2b6>
 8004a1c:	e01e      	b.n	8004a5c <UART_SetConfig+0x2e8>
 8004a1e:	2300      	movs	r3, #0
 8004a20:	77fb      	strb	r3, [r7, #31]
 8004a22:	e04b      	b.n	8004abc <UART_SetConfig+0x348>
 8004a24:	2302      	movs	r3, #2
 8004a26:	77fb      	strb	r3, [r7, #31]
 8004a28:	e048      	b.n	8004abc <UART_SetConfig+0x348>
 8004a2a:	2304      	movs	r3, #4
 8004a2c:	77fb      	strb	r3, [r7, #31]
 8004a2e:	e045      	b.n	8004abc <UART_SetConfig+0x348>
 8004a30:	2308      	movs	r3, #8
 8004a32:	77fb      	strb	r3, [r7, #31]
 8004a34:	e042      	b.n	8004abc <UART_SetConfig+0x348>
 8004a36:	bf00      	nop
 8004a38:	efff69f3 	.word	0xefff69f3
 8004a3c:	40011000 	.word	0x40011000
 8004a40:	40023800 	.word	0x40023800
 8004a44:	40004400 	.word	0x40004400
 8004a48:	40004800 	.word	0x40004800
 8004a4c:	40004c00 	.word	0x40004c00
 8004a50:	40005000 	.word	0x40005000
 8004a54:	40011400 	.word	0x40011400
 8004a58:	40007800 	.word	0x40007800
 8004a5c:	2310      	movs	r3, #16
 8004a5e:	77fb      	strb	r3, [r7, #31]
 8004a60:	e02c      	b.n	8004abc <UART_SetConfig+0x348>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a72      	ldr	r2, [pc, #456]	; (8004c30 <UART_SetConfig+0x4bc>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d125      	bne.n	8004ab8 <UART_SetConfig+0x344>
 8004a6c:	4b71      	ldr	r3, [pc, #452]	; (8004c34 <UART_SetConfig+0x4c0>)
 8004a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a72:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004a76:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a7a:	d017      	beq.n	8004aac <UART_SetConfig+0x338>
 8004a7c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a80:	d817      	bhi.n	8004ab2 <UART_SetConfig+0x33e>
 8004a82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a86:	d00b      	beq.n	8004aa0 <UART_SetConfig+0x32c>
 8004a88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a8c:	d811      	bhi.n	8004ab2 <UART_SetConfig+0x33e>
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d003      	beq.n	8004a9a <UART_SetConfig+0x326>
 8004a92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a96:	d006      	beq.n	8004aa6 <UART_SetConfig+0x332>
 8004a98:	e00b      	b.n	8004ab2 <UART_SetConfig+0x33e>
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	77fb      	strb	r3, [r7, #31]
 8004a9e:	e00d      	b.n	8004abc <UART_SetConfig+0x348>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	77fb      	strb	r3, [r7, #31]
 8004aa4:	e00a      	b.n	8004abc <UART_SetConfig+0x348>
 8004aa6:	2304      	movs	r3, #4
 8004aa8:	77fb      	strb	r3, [r7, #31]
 8004aaa:	e007      	b.n	8004abc <UART_SetConfig+0x348>
 8004aac:	2308      	movs	r3, #8
 8004aae:	77fb      	strb	r3, [r7, #31]
 8004ab0:	e004      	b.n	8004abc <UART_SetConfig+0x348>
 8004ab2:	2310      	movs	r3, #16
 8004ab4:	77fb      	strb	r3, [r7, #31]
 8004ab6:	e001      	b.n	8004abc <UART_SetConfig+0x348>
 8004ab8:	2310      	movs	r3, #16
 8004aba:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	69db      	ldr	r3, [r3, #28]
 8004ac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ac4:	d15b      	bne.n	8004b7e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004ac6:	7ffb      	ldrb	r3, [r7, #31]
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	d828      	bhi.n	8004b1e <UART_SetConfig+0x3aa>
 8004acc:	a201      	add	r2, pc, #4	; (adr r2, 8004ad4 <UART_SetConfig+0x360>)
 8004ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad2:	bf00      	nop
 8004ad4:	08004af9 	.word	0x08004af9
 8004ad8:	08004b01 	.word	0x08004b01
 8004adc:	08004b09 	.word	0x08004b09
 8004ae0:	08004b1f 	.word	0x08004b1f
 8004ae4:	08004b0f 	.word	0x08004b0f
 8004ae8:	08004b1f 	.word	0x08004b1f
 8004aec:	08004b1f 	.word	0x08004b1f
 8004af0:	08004b1f 	.word	0x08004b1f
 8004af4:	08004b17 	.word	0x08004b17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004af8:	f7fe fad8 	bl	80030ac <HAL_RCC_GetPCLK1Freq>
 8004afc:	61b8      	str	r0, [r7, #24]
        break;
 8004afe:	e013      	b.n	8004b28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b00:	f7fe fae8 	bl	80030d4 <HAL_RCC_GetPCLK2Freq>
 8004b04:	61b8      	str	r0, [r7, #24]
        break;
 8004b06:	e00f      	b.n	8004b28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b08:	4b4b      	ldr	r3, [pc, #300]	; (8004c38 <UART_SetConfig+0x4c4>)
 8004b0a:	61bb      	str	r3, [r7, #24]
        break;
 8004b0c:	e00c      	b.n	8004b28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b0e:	f7fe f9bb 	bl	8002e88 <HAL_RCC_GetSysClockFreq>
 8004b12:	61b8      	str	r0, [r7, #24]
        break;
 8004b14:	e008      	b.n	8004b28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b1a:	61bb      	str	r3, [r7, #24]
        break;
 8004b1c:	e004      	b.n	8004b28 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	77bb      	strb	r3, [r7, #30]
        break;
 8004b26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d074      	beq.n	8004c18 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	005a      	lsls	r2, r3, #1
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	085b      	lsrs	r3, r3, #1
 8004b38:	441a      	add	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	2b0f      	cmp	r3, #15
 8004b48:	d916      	bls.n	8004b78 <UART_SetConfig+0x404>
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b50:	d212      	bcs.n	8004b78 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	f023 030f 	bic.w	r3, r3, #15
 8004b5a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	085b      	lsrs	r3, r3, #1
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	89fb      	ldrh	r3, [r7, #14]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	89fa      	ldrh	r2, [r7, #14]
 8004b74:	60da      	str	r2, [r3, #12]
 8004b76:	e04f      	b.n	8004c18 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	77bb      	strb	r3, [r7, #30]
 8004b7c:	e04c      	b.n	8004c18 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b7e:	7ffb      	ldrb	r3, [r7, #31]
 8004b80:	2b08      	cmp	r3, #8
 8004b82:	d828      	bhi.n	8004bd6 <UART_SetConfig+0x462>
 8004b84:	a201      	add	r2, pc, #4	; (adr r2, 8004b8c <UART_SetConfig+0x418>)
 8004b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8a:	bf00      	nop
 8004b8c:	08004bb1 	.word	0x08004bb1
 8004b90:	08004bb9 	.word	0x08004bb9
 8004b94:	08004bc1 	.word	0x08004bc1
 8004b98:	08004bd7 	.word	0x08004bd7
 8004b9c:	08004bc7 	.word	0x08004bc7
 8004ba0:	08004bd7 	.word	0x08004bd7
 8004ba4:	08004bd7 	.word	0x08004bd7
 8004ba8:	08004bd7 	.word	0x08004bd7
 8004bac:	08004bcf 	.word	0x08004bcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bb0:	f7fe fa7c 	bl	80030ac <HAL_RCC_GetPCLK1Freq>
 8004bb4:	61b8      	str	r0, [r7, #24]
        break;
 8004bb6:	e013      	b.n	8004be0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bb8:	f7fe fa8c 	bl	80030d4 <HAL_RCC_GetPCLK2Freq>
 8004bbc:	61b8      	str	r0, [r7, #24]
        break;
 8004bbe:	e00f      	b.n	8004be0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bc0:	4b1d      	ldr	r3, [pc, #116]	; (8004c38 <UART_SetConfig+0x4c4>)
 8004bc2:	61bb      	str	r3, [r7, #24]
        break;
 8004bc4:	e00c      	b.n	8004be0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bc6:	f7fe f95f 	bl	8002e88 <HAL_RCC_GetSysClockFreq>
 8004bca:	61b8      	str	r0, [r7, #24]
        break;
 8004bcc:	e008      	b.n	8004be0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bd2:	61bb      	str	r3, [r7, #24]
        break;
 8004bd4:	e004      	b.n	8004be0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	77bb      	strb	r3, [r7, #30]
        break;
 8004bde:	bf00      	nop
    }

    if (pclk != 0U)
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d018      	beq.n	8004c18 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	085a      	lsrs	r2, r3, #1
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	441a      	add	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	2b0f      	cmp	r3, #15
 8004bfe:	d909      	bls.n	8004c14 <UART_SetConfig+0x4a0>
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c06:	d205      	bcs.n	8004c14 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	60da      	str	r2, [r3, #12]
 8004c12:	e001      	b.n	8004c18 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004c24:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3720      	adds	r7, #32
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	40007c00 	.word	0x40007c00
 8004c34:	40023800 	.word	0x40023800
 8004c38:	00f42400 	.word	0x00f42400

08004c3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00a      	beq.n	8004c66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	430a      	orrs	r2, r1
 8004c64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00a      	beq.n	8004c88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	430a      	orrs	r2, r1
 8004c86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8c:	f003 0304 	and.w	r3, r3, #4
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00a      	beq.n	8004caa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	f003 0308 	and.w	r3, r3, #8
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00a      	beq.n	8004ccc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	f003 0310 	and.w	r3, r3, #16
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00a      	beq.n	8004cee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	f003 0320 	and.w	r3, r3, #32
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00a      	beq.n	8004d10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d01a      	beq.n	8004d52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d3a:	d10a      	bne.n	8004d52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00a      	beq.n	8004d74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	430a      	orrs	r2, r1
 8004d72:	605a      	str	r2, [r3, #4]
  }
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af02      	add	r7, sp, #8
 8004d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d90:	f7fc ffce 	bl	8001d30 <HAL_GetTick>
 8004d94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0308 	and.w	r3, r3, #8
 8004da0:	2b08      	cmp	r3, #8
 8004da2:	d10e      	bne.n	8004dc2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004da4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f831 	bl	8004e1a <UART_WaitOnFlagUntilTimeout>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e027      	b.n	8004e12 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0304 	and.w	r3, r3, #4
 8004dcc:	2b04      	cmp	r3, #4
 8004dce:	d10e      	bne.n	8004dee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f81b 	bl	8004e1a <UART_WaitOnFlagUntilTimeout>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e011      	b.n	8004e12 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2220      	movs	r2, #32
 8004df2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2220      	movs	r2, #32
 8004df8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b09c      	sub	sp, #112	; 0x70
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	60f8      	str	r0, [r7, #12]
 8004e22:	60b9      	str	r1, [r7, #8]
 8004e24:	603b      	str	r3, [r7, #0]
 8004e26:	4613      	mov	r3, r2
 8004e28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e2a:	e0a7      	b.n	8004f7c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e32:	f000 80a3 	beq.w	8004f7c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e36:	f7fc ff7b 	bl	8001d30 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d302      	bcc.n	8004e4c <UART_WaitOnFlagUntilTimeout+0x32>
 8004e46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d13f      	bne.n	8004ecc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e54:	e853 3f00 	ldrex	r3, [r3]
 8004e58:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e60:	667b      	str	r3, [r7, #100]	; 0x64
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	461a      	mov	r2, r3
 8004e68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e6c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e72:	e841 2300 	strex	r3, r2, [r1]
 8004e76:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004e78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1e6      	bne.n	8004e4c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	3308      	adds	r3, #8
 8004e84:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e88:	e853 3f00 	ldrex	r3, [r3]
 8004e8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e90:	f023 0301 	bic.w	r3, r3, #1
 8004e94:	663b      	str	r3, [r7, #96]	; 0x60
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	3308      	adds	r3, #8
 8004e9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e9e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ea0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ea4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ea6:	e841 2300 	strex	r3, r2, [r1]
 8004eaa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004eac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1e5      	bne.n	8004e7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e068      	b.n	8004f9e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0304 	and.w	r3, r3, #4
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d050      	beq.n	8004f7c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	69db      	ldr	r3, [r3, #28]
 8004ee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ee8:	d148      	bne.n	8004f7c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ef2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efc:	e853 3f00 	ldrex	r3, [r3]
 8004f00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f08:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f12:	637b      	str	r3, [r7, #52]	; 0x34
 8004f14:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f1a:	e841 2300 	strex	r3, r2, [r1]
 8004f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1e6      	bne.n	8004ef4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	3308      	adds	r3, #8
 8004f2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	e853 3f00 	ldrex	r3, [r3]
 8004f34:	613b      	str	r3, [r7, #16]
   return(result);
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	f023 0301 	bic.w	r3, r3, #1
 8004f3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	3308      	adds	r3, #8
 8004f44:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f46:	623a      	str	r2, [r7, #32]
 8004f48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4a:	69f9      	ldr	r1, [r7, #28]
 8004f4c:	6a3a      	ldr	r2, [r7, #32]
 8004f4e:	e841 2300 	strex	r3, r2, [r1]
 8004f52:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1e5      	bne.n	8004f26 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2220      	movs	r2, #32
 8004f64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e010      	b.n	8004f9e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	69da      	ldr	r2, [r3, #28]
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	4013      	ands	r3, r2
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	bf0c      	ite	eq
 8004f8c:	2301      	moveq	r3, #1
 8004f8e:	2300      	movne	r3, #0
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	461a      	mov	r2, r3
 8004f94:	79fb      	ldrb	r3, [r7, #7]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	f43f af48 	beq.w	8004e2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3770      	adds	r7, #112	; 0x70
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
	...

08004fa8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b097      	sub	sp, #92	; 0x5c
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	88fa      	ldrh	r2, [r7, #6]
 8004fc0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	88fa      	ldrh	r2, [r7, #6]
 8004fc8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fda:	d10e      	bne.n	8004ffa <UART_Start_Receive_IT+0x52>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d105      	bne.n	8004ff0 <UART_Start_Receive_IT+0x48>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004fea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004fee:	e02d      	b.n	800504c <UART_Start_Receive_IT+0xa4>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	22ff      	movs	r2, #255	; 0xff
 8004ff4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ff8:	e028      	b.n	800504c <UART_Start_Receive_IT+0xa4>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10d      	bne.n	800501e <UART_Start_Receive_IT+0x76>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d104      	bne.n	8005014 <UART_Start_Receive_IT+0x6c>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	22ff      	movs	r2, #255	; 0xff
 800500e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005012:	e01b      	b.n	800504c <UART_Start_Receive_IT+0xa4>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	227f      	movs	r2, #127	; 0x7f
 8005018:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800501c:	e016      	b.n	800504c <UART_Start_Receive_IT+0xa4>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005026:	d10d      	bne.n	8005044 <UART_Start_Receive_IT+0x9c>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d104      	bne.n	800503a <UART_Start_Receive_IT+0x92>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	227f      	movs	r2, #127	; 0x7f
 8005034:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005038:	e008      	b.n	800504c <UART_Start_Receive_IT+0xa4>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	223f      	movs	r2, #63	; 0x3f
 800503e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005042:	e003      	b.n	800504c <UART_Start_Receive_IT+0xa4>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2222      	movs	r2, #34	; 0x22
 8005058:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	3308      	adds	r3, #8
 8005062:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005066:	e853 3f00 	ldrex	r3, [r3]
 800506a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800506c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506e:	f043 0301 	orr.w	r3, r3, #1
 8005072:	657b      	str	r3, [r7, #84]	; 0x54
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	3308      	adds	r3, #8
 800507a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800507c:	64ba      	str	r2, [r7, #72]	; 0x48
 800507e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005080:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005082:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005084:	e841 2300 	strex	r3, r2, [r1]
 8005088:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800508a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1e5      	bne.n	800505c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005098:	d107      	bne.n	80050aa <UART_Start_Receive_IT+0x102>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d103      	bne.n	80050aa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	4a21      	ldr	r2, [pc, #132]	; (800512c <UART_Start_Receive_IT+0x184>)
 80050a6:	669a      	str	r2, [r3, #104]	; 0x68
 80050a8:	e002      	b.n	80050b0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	4a20      	ldr	r2, [pc, #128]	; (8005130 <UART_Start_Receive_IT+0x188>)
 80050ae:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d019      	beq.n	80050ec <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c0:	e853 3f00 	ldrex	r3, [r3]
 80050c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80050cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	461a      	mov	r2, r3
 80050d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050d6:	637b      	str	r3, [r7, #52]	; 0x34
 80050d8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050de:	e841 2300 	strex	r3, r2, [r1]
 80050e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80050e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1e6      	bne.n	80050b8 <UART_Start_Receive_IT+0x110>
 80050ea:	e018      	b.n	800511e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	e853 3f00 	ldrex	r3, [r3]
 80050f8:	613b      	str	r3, [r7, #16]
   return(result);
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	f043 0320 	orr.w	r3, r3, #32
 8005100:	653b      	str	r3, [r7, #80]	; 0x50
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	461a      	mov	r2, r3
 8005108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800510a:	623b      	str	r3, [r7, #32]
 800510c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510e:	69f9      	ldr	r1, [r7, #28]
 8005110:	6a3a      	ldr	r2, [r7, #32]
 8005112:	e841 2300 	strex	r3, r2, [r1]
 8005116:	61bb      	str	r3, [r7, #24]
   return(result);
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1e6      	bne.n	80050ec <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	375c      	adds	r7, #92	; 0x5c
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	08005559 	.word	0x08005559
 8005130:	080053f3 	.word	0x080053f3

08005134 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005134:	b480      	push	{r7}
 8005136:	b095      	sub	sp, #84	; 0x54
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005144:	e853 3f00 	ldrex	r3, [r3]
 8005148:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800514a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005150:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	461a      	mov	r2, r3
 8005158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800515a:	643b      	str	r3, [r7, #64]	; 0x40
 800515c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005160:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005162:	e841 2300 	strex	r3, r2, [r1]
 8005166:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1e6      	bne.n	800513c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	3308      	adds	r3, #8
 8005174:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	e853 3f00 	ldrex	r3, [r3]
 800517c:	61fb      	str	r3, [r7, #28]
   return(result);
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	f023 0301 	bic.w	r3, r3, #1
 8005184:	64bb      	str	r3, [r7, #72]	; 0x48
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	3308      	adds	r3, #8
 800518c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800518e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005190:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005192:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005196:	e841 2300 	strex	r3, r2, [r1]
 800519a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1e5      	bne.n	800516e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d118      	bne.n	80051dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	e853 3f00 	ldrex	r3, [r3]
 80051b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	f023 0310 	bic.w	r3, r3, #16
 80051be:	647b      	str	r3, [r7, #68]	; 0x44
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	461a      	mov	r2, r3
 80051c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051c8:	61bb      	str	r3, [r7, #24]
 80051ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051cc:	6979      	ldr	r1, [r7, #20]
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	e841 2300 	strex	r3, r2, [r1]
 80051d4:	613b      	str	r3, [r7, #16]
   return(result);
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1e6      	bne.n	80051aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2220      	movs	r2, #32
 80051e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	669a      	str	r2, [r3, #104]	; 0x68
}
 80051f0:	bf00      	nop
 80051f2:	3754      	adds	r7, #84	; 0x54
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005208:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f7ff fa8a 	bl	8004734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005220:	bf00      	nop
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005228:	b480      	push	{r7}
 800522a:	b08f      	sub	sp, #60	; 0x3c
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005234:	2b21      	cmp	r3, #33	; 0x21
 8005236:	d14c      	bne.n	80052d2 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800523e:	b29b      	uxth	r3, r3
 8005240:	2b00      	cmp	r3, #0
 8005242:	d132      	bne.n	80052aa <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	e853 3f00 	ldrex	r3, [r3]
 8005250:	61fb      	str	r3, [r7, #28]
   return(result);
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005258:	637b      	str	r3, [r7, #52]	; 0x34
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	461a      	mov	r2, r3
 8005260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005262:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005264:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005266:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005268:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800526a:	e841 2300 	strex	r3, r2, [r1]
 800526e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1e6      	bne.n	8005244 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	e853 3f00 	ldrex	r3, [r3]
 8005282:	60bb      	str	r3, [r7, #8]
   return(result);
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800528a:	633b      	str	r3, [r7, #48]	; 0x30
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	461a      	mov	r2, r3
 8005292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005294:	61bb      	str	r3, [r7, #24]
 8005296:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005298:	6979      	ldr	r1, [r7, #20]
 800529a:	69ba      	ldr	r2, [r7, #24]
 800529c:	e841 2300 	strex	r3, r2, [r1]
 80052a0:	613b      	str	r3, [r7, #16]
   return(result);
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1e6      	bne.n	8005276 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80052a8:	e013      	b.n	80052d2 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ae:	781a      	ldrb	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ba:	1c5a      	adds	r2, r3, #1
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	3b01      	subs	r3, #1
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80052d2:	bf00      	nop
 80052d4:	373c      	adds	r7, #60	; 0x3c
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80052de:	b480      	push	{r7}
 80052e0:	b091      	sub	sp, #68	; 0x44
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052ea:	2b21      	cmp	r3, #33	; 0x21
 80052ec:	d151      	bne.n	8005392 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d132      	bne.n	8005360 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	e853 3f00 	ldrex	r3, [r3]
 8005306:	623b      	str	r3, [r7, #32]
   return(result);
 8005308:	6a3b      	ldr	r3, [r7, #32]
 800530a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800530e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	461a      	mov	r2, r3
 8005316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005318:	633b      	str	r3, [r7, #48]	; 0x30
 800531a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800531e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005320:	e841 2300 	strex	r3, r2, [r1]
 8005324:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1e6      	bne.n	80052fa <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	e853 3f00 	ldrex	r3, [r3]
 8005338:	60fb      	str	r3, [r7, #12]
   return(result);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005340:	637b      	str	r3, [r7, #52]	; 0x34
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	461a      	mov	r2, r3
 8005348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800534a:	61fb      	str	r3, [r7, #28]
 800534c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534e:	69b9      	ldr	r1, [r7, #24]
 8005350:	69fa      	ldr	r2, [r7, #28]
 8005352:	e841 2300 	strex	r3, r2, [r1]
 8005356:	617b      	str	r3, [r7, #20]
   return(result);
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1e6      	bne.n	800532c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800535e:	e018      	b.n	8005392 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005364:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005368:	881b      	ldrh	r3, [r3, #0]
 800536a:	461a      	mov	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005374:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800537a:	1c9a      	adds	r2, r3, #2
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005386:	b29b      	uxth	r3, r3
 8005388:	3b01      	subs	r3, #1
 800538a:	b29a      	uxth	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005392:	bf00      	nop
 8005394:	3744      	adds	r7, #68	; 0x44
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b088      	sub	sp, #32
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	e853 3f00 	ldrex	r3, [r3]
 80053b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053ba:	61fb      	str	r3, [r7, #28]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	461a      	mov	r2, r3
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	61bb      	str	r3, [r7, #24]
 80053c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c8:	6979      	ldr	r1, [r7, #20]
 80053ca:	69ba      	ldr	r2, [r7, #24]
 80053cc:	e841 2300 	strex	r3, r2, [r1]
 80053d0:	613b      	str	r3, [r7, #16]
   return(result);
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1e6      	bne.n	80053a6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2220      	movs	r2, #32
 80053dc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7ff f99b 	bl	8004720 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053ea:	bf00      	nop
 80053ec:	3720      	adds	r7, #32
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b096      	sub	sp, #88	; 0x58
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005400:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800540a:	2b22      	cmp	r3, #34	; 0x22
 800540c:	f040 8098 	bne.w	8005540 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005416:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800541a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800541e:	b2d9      	uxtb	r1, r3
 8005420:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005424:	b2da      	uxtb	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542a:	400a      	ands	r2, r1
 800542c:	b2d2      	uxtb	r2, r2
 800542e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005434:	1c5a      	adds	r2, r3, #1
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005440:	b29b      	uxth	r3, r3
 8005442:	3b01      	subs	r3, #1
 8005444:	b29a      	uxth	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005452:	b29b      	uxth	r3, r3
 8005454:	2b00      	cmp	r3, #0
 8005456:	d17b      	bne.n	8005550 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005460:	e853 3f00 	ldrex	r3, [r3]
 8005464:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005468:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800546c:	653b      	str	r3, [r7, #80]	; 0x50
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	461a      	mov	r2, r3
 8005474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005476:	647b      	str	r3, [r7, #68]	; 0x44
 8005478:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800547c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800547e:	e841 2300 	strex	r3, r2, [r1]
 8005482:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1e6      	bne.n	8005458 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	3308      	adds	r3, #8
 8005490:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005494:	e853 3f00 	ldrex	r3, [r3]
 8005498:	623b      	str	r3, [r7, #32]
   return(result);
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	f023 0301 	bic.w	r3, r3, #1
 80054a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	3308      	adds	r3, #8
 80054a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054aa:	633a      	str	r2, [r7, #48]	; 0x30
 80054ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054b2:	e841 2300 	strex	r3, r2, [r1]
 80054b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1e5      	bne.n	800548a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2220      	movs	r2, #32
 80054c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d12e      	bne.n	8005538 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	e853 3f00 	ldrex	r3, [r3]
 80054ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f023 0310 	bic.w	r3, r3, #16
 80054f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	461a      	mov	r2, r3
 80054fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054fe:	61fb      	str	r3, [r7, #28]
 8005500:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005502:	69b9      	ldr	r1, [r7, #24]
 8005504:	69fa      	ldr	r2, [r7, #28]
 8005506:	e841 2300 	strex	r3, r2, [r1]
 800550a:	617b      	str	r3, [r7, #20]
   return(result);
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1e6      	bne.n	80054e0 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	f003 0310 	and.w	r3, r3, #16
 800551c:	2b10      	cmp	r3, #16
 800551e:	d103      	bne.n	8005528 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2210      	movs	r2, #16
 8005526:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800552e:	4619      	mov	r1, r3
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f7ff f909 	bl	8004748 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005536:	e00b      	b.n	8005550 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f7fb faf1 	bl	8000b20 <HAL_UART_RxCpltCallback>
}
 800553e:	e007      	b.n	8005550 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	699a      	ldr	r2, [r3, #24]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f042 0208 	orr.w	r2, r2, #8
 800554e:	619a      	str	r2, [r3, #24]
}
 8005550:	bf00      	nop
 8005552:	3758      	adds	r7, #88	; 0x58
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b096      	sub	sp, #88	; 0x58
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005566:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005570:	2b22      	cmp	r3, #34	; 0x22
 8005572:	f040 8098 	bne.w	80056a6 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005584:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005586:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800558a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800558e:	4013      	ands	r3, r2
 8005590:	b29a      	uxth	r2, r3
 8005592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005594:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800559a:	1c9a      	adds	r2, r3, #2
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	3b01      	subs	r3, #1
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d17b      	bne.n	80056b6 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055c6:	e853 3f00 	ldrex	r3, [r3]
 80055ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	461a      	mov	r2, r3
 80055da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055dc:	643b      	str	r3, [r7, #64]	; 0x40
 80055de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055e4:	e841 2300 	strex	r3, r2, [r1]
 80055e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1e6      	bne.n	80055be <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	3308      	adds	r3, #8
 80055f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f8:	6a3b      	ldr	r3, [r7, #32]
 80055fa:	e853 3f00 	ldrex	r3, [r3]
 80055fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	f023 0301 	bic.w	r3, r3, #1
 8005606:	64bb      	str	r3, [r7, #72]	; 0x48
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3308      	adds	r3, #8
 800560e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005610:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005612:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005614:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005618:	e841 2300 	strex	r3, r2, [r1]
 800561c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1e5      	bne.n	80055f0 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2220      	movs	r2, #32
 8005628:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800563c:	2b01      	cmp	r3, #1
 800563e:	d12e      	bne.n	800569e <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	e853 3f00 	ldrex	r3, [r3]
 8005652:	60bb      	str	r3, [r7, #8]
   return(result);
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	f023 0310 	bic.w	r3, r3, #16
 800565a:	647b      	str	r3, [r7, #68]	; 0x44
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	461a      	mov	r2, r3
 8005662:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005664:	61bb      	str	r3, [r7, #24]
 8005666:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005668:	6979      	ldr	r1, [r7, #20]
 800566a:	69ba      	ldr	r2, [r7, #24]
 800566c:	e841 2300 	strex	r3, r2, [r1]
 8005670:	613b      	str	r3, [r7, #16]
   return(result);
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1e6      	bne.n	8005646 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	f003 0310 	and.w	r3, r3, #16
 8005682:	2b10      	cmp	r3, #16
 8005684:	d103      	bne.n	800568e <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2210      	movs	r2, #16
 800568c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005694:	4619      	mov	r1, r3
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7ff f856 	bl	8004748 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800569c:	e00b      	b.n	80056b6 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f7fb fa3e 	bl	8000b20 <HAL_UART_RxCpltCallback>
}
 80056a4:	e007      	b.n	80056b6 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	699a      	ldr	r2, [r3, #24]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f042 0208 	orr.w	r2, r2, #8
 80056b4:	619a      	str	r2, [r3, #24]
}
 80056b6:	bf00      	nop
 80056b8:	3758      	adds	r7, #88	; 0x58
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
	...

080056c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056c0:	b084      	sub	sp, #16
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b084      	sub	sp, #16
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
 80056ca:	f107 001c 	add.w	r0, r7, #28
 80056ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d120      	bne.n	800571a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	68da      	ldr	r2, [r3, #12]
 80056e8:	4b20      	ldr	r3, [pc, #128]	; (800576c <USB_CoreInit+0xac>)
 80056ea:	4013      	ands	r3, r2
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80056fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d105      	bne.n	800570e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 fa96 	bl	8005c40 <USB_CoreReset>
 8005714:	4603      	mov	r3, r0
 8005716:	73fb      	strb	r3, [r7, #15]
 8005718:	e010      	b.n	800573c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 fa8a 	bl	8005c40 <USB_CoreReset>
 800572c:	4603      	mov	r3, r0
 800572e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005734:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800573c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573e:	2b01      	cmp	r3, #1
 8005740:	d10b      	bne.n	800575a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f043 0206 	orr.w	r2, r3, #6
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f043 0220 	orr.w	r2, r3, #32
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800575a:	7bfb      	ldrb	r3, [r7, #15]
}
 800575c:	4618      	mov	r0, r3
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005766:	b004      	add	sp, #16
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	ffbdffbf 	.word	0xffbdffbf

08005770 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f023 0201 	bic.w	r2, r3, #1
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b084      	sub	sp, #16
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
 800579a:	460b      	mov	r3, r1
 800579c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800579e:	2300      	movs	r3, #0
 80057a0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80057ae:	78fb      	ldrb	r3, [r7, #3]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d115      	bne.n	80057e0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80057c0:	2001      	movs	r0, #1
 80057c2:	f7fc fac1 	bl	8001d48 <HAL_Delay>
      ms++;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	3301      	adds	r3, #1
 80057ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 fa29 	bl	8005c24 <USB_GetMode>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d01e      	beq.n	8005816 <USB_SetCurrentMode+0x84>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2b31      	cmp	r3, #49	; 0x31
 80057dc:	d9f0      	bls.n	80057c0 <USB_SetCurrentMode+0x2e>
 80057de:	e01a      	b.n	8005816 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80057e0:	78fb      	ldrb	r3, [r7, #3]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d115      	bne.n	8005812 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80057f2:	2001      	movs	r0, #1
 80057f4:	f7fc faa8 	bl	8001d48 <HAL_Delay>
      ms++;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	3301      	adds	r3, #1
 80057fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 fa10 	bl	8005c24 <USB_GetMode>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d005      	beq.n	8005816 <USB_SetCurrentMode+0x84>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2b31      	cmp	r3, #49	; 0x31
 800580e:	d9f0      	bls.n	80057f2 <USB_SetCurrentMode+0x60>
 8005810:	e001      	b.n	8005816 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e005      	b.n	8005822 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2b32      	cmp	r3, #50	; 0x32
 800581a:	d101      	bne.n	8005820 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e000      	b.n	8005822 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
	...

0800582c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800582c:	b084      	sub	sp, #16
 800582e:	b580      	push	{r7, lr}
 8005830:	b086      	sub	sp, #24
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
 8005836:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800583a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800583e:	2300      	movs	r3, #0
 8005840:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005846:	2300      	movs	r3, #0
 8005848:	613b      	str	r3, [r7, #16]
 800584a:	e009      	b.n	8005860 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	3340      	adds	r3, #64	; 0x40
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	2200      	movs	r2, #0
 8005858:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	3301      	adds	r3, #1
 800585e:	613b      	str	r3, [r7, #16]
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	2b0e      	cmp	r3, #14
 8005864:	d9f2      	bls.n	800584c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005868:	2b00      	cmp	r3, #0
 800586a:	d11c      	bne.n	80058a6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800587a:	f043 0302 	orr.w	r3, r3, #2
 800587e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005884:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	601a      	str	r2, [r3, #0]
 80058a4:	e005      	b.n	80058b2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058b8:	461a      	mov	r2, r3
 80058ba:	2300      	movs	r3, #0
 80058bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c4:	4619      	mov	r1, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058cc:	461a      	mov	r2, r3
 80058ce:	680b      	ldr	r3, [r1, #0]
 80058d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80058d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d10c      	bne.n	80058f2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80058d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d104      	bne.n	80058e8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80058de:	2100      	movs	r1, #0
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f965 	bl	8005bb0 <USB_SetDevSpeed>
 80058e6:	e008      	b.n	80058fa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80058e8:	2101      	movs	r1, #1
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f960 	bl	8005bb0 <USB_SetDevSpeed>
 80058f0:	e003      	b.n	80058fa <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80058f2:	2103      	movs	r1, #3
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 f95b 	bl	8005bb0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80058fa:	2110      	movs	r1, #16
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 f8f3 	bl	8005ae8 <USB_FlushTxFifo>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d001      	beq.n	800590c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 f91f 	bl	8005b50 <USB_FlushRxFifo>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d001      	beq.n	800591c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005922:	461a      	mov	r2, r3
 8005924:	2300      	movs	r3, #0
 8005926:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800592e:	461a      	mov	r2, r3
 8005930:	2300      	movs	r3, #0
 8005932:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800593a:	461a      	mov	r2, r3
 800593c:	2300      	movs	r3, #0
 800593e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005940:	2300      	movs	r3, #0
 8005942:	613b      	str	r3, [r7, #16]
 8005944:	e043      	b.n	80059ce <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	015a      	lsls	r2, r3, #5
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4413      	add	r3, r2
 800594e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005958:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800595c:	d118      	bne.n	8005990 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10a      	bne.n	800597a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	4413      	add	r3, r2
 800596c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005970:	461a      	mov	r2, r3
 8005972:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005976:	6013      	str	r3, [r2, #0]
 8005978:	e013      	b.n	80059a2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	015a      	lsls	r2, r3, #5
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	4413      	add	r3, r2
 8005982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005986:	461a      	mov	r2, r3
 8005988:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800598c:	6013      	str	r3, [r2, #0]
 800598e:	e008      	b.n	80059a2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4413      	add	r3, r2
 8005998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800599c:	461a      	mov	r2, r3
 800599e:	2300      	movs	r3, #0
 80059a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	015a      	lsls	r2, r3, #5
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	4413      	add	r3, r2
 80059aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ae:	461a      	mov	r2, r3
 80059b0:	2300      	movs	r3, #0
 80059b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c0:	461a      	mov	r2, r3
 80059c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80059c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	3301      	adds	r3, #1
 80059cc:	613b      	str	r3, [r7, #16]
 80059ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d3b7      	bcc.n	8005946 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059d6:	2300      	movs	r3, #0
 80059d8:	613b      	str	r3, [r7, #16]
 80059da:	e043      	b.n	8005a64 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059f2:	d118      	bne.n	8005a26 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10a      	bne.n	8005a10 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	015a      	lsls	r2, r3, #5
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	4413      	add	r3, r2
 8005a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a06:	461a      	mov	r2, r3
 8005a08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a0c:	6013      	str	r3, [r2, #0]
 8005a0e:	e013      	b.n	8005a38 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	015a      	lsls	r2, r3, #5
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	4413      	add	r3, r2
 8005a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a22:	6013      	str	r3, [r2, #0]
 8005a24:	e008      	b.n	8005a38 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	015a      	lsls	r2, r3, #5
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a32:	461a      	mov	r2, r3
 8005a34:	2300      	movs	r3, #0
 8005a36:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a44:	461a      	mov	r2, r3
 8005a46:	2300      	movs	r3, #0
 8005a48:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	015a      	lsls	r2, r3, #5
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	4413      	add	r3, r2
 8005a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a56:	461a      	mov	r2, r3
 8005a58:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a5c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	3301      	adds	r3, #1
 8005a62:	613b      	str	r3, [r7, #16]
 8005a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a66:	693a      	ldr	r2, [r7, #16]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d3b7      	bcc.n	80059dc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a7e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005a8c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d105      	bne.n	8005aa0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	f043 0210 	orr.w	r2, r3, #16
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	699a      	ldr	r2, [r3, #24]
 8005aa4:	4b0e      	ldr	r3, [pc, #56]	; (8005ae0 <USB_DevInit+0x2b4>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d005      	beq.n	8005abe <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	f043 0208 	orr.w	r2, r3, #8
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d105      	bne.n	8005ad0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	699a      	ldr	r2, [r3, #24]
 8005ac8:	4b06      	ldr	r3, [pc, #24]	; (8005ae4 <USB_DevInit+0x2b8>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3718      	adds	r7, #24
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005adc:	b004      	add	sp, #16
 8005ade:	4770      	bx	lr
 8005ae0:	803c3800 	.word	0x803c3800
 8005ae4:	40000004 	.word	0x40000004

08005ae8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005af2:	2300      	movs	r3, #0
 8005af4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	3301      	adds	r3, #1
 8005afa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	4a13      	ldr	r2, [pc, #76]	; (8005b4c <USB_FlushTxFifo+0x64>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d901      	bls.n	8005b08 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e01b      	b.n	8005b40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	daf2      	bge.n	8005af6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005b10:	2300      	movs	r3, #0
 8005b12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	019b      	lsls	r3, r3, #6
 8005b18:	f043 0220 	orr.w	r2, r3, #32
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	3301      	adds	r3, #1
 8005b24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	4a08      	ldr	r2, [pc, #32]	; (8005b4c <USB_FlushTxFifo+0x64>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d901      	bls.n	8005b32 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e006      	b.n	8005b40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	f003 0320 	and.w	r3, r3, #32
 8005b3a:	2b20      	cmp	r3, #32
 8005b3c:	d0f0      	beq.n	8005b20 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3714      	adds	r7, #20
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr
 8005b4c:	00030d40 	.word	0x00030d40

08005b50 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	4a11      	ldr	r2, [pc, #68]	; (8005bac <USB_FlushRxFifo+0x5c>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d901      	bls.n	8005b6e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e018      	b.n	8005ba0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	daf2      	bge.n	8005b5c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b76:	2300      	movs	r3, #0
 8005b78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2210      	movs	r2, #16
 8005b7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	3301      	adds	r3, #1
 8005b84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	4a08      	ldr	r2, [pc, #32]	; (8005bac <USB_FlushRxFifo+0x5c>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d901      	bls.n	8005b92 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e006      	b.n	8005ba0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	f003 0310 	and.w	r3, r3, #16
 8005b9a:	2b10      	cmp	r3, #16
 8005b9c:	d0f0      	beq.n	8005b80 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3714      	adds	r7, #20
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr
 8005bac:	00030d40 	.word	0x00030d40

08005bb0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	460b      	mov	r3, r1
 8005bba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	78fb      	ldrb	r3, [r7, #3]
 8005bca:	68f9      	ldr	r1, [r7, #12]
 8005bcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005be2:	b480      	push	{r7}
 8005be4:	b085      	sub	sp, #20
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005bfc:	f023 0303 	bic.w	r3, r3, #3
 8005c00:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c10:	f043 0302 	orr.w	r3, r3, #2
 8005c14:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	695b      	ldr	r3, [r3, #20]
 8005c30:	f003 0301 	and.w	r3, r3, #1
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	4a13      	ldr	r2, [pc, #76]	; (8005ca4 <USB_CoreReset+0x64>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d901      	bls.n	8005c5e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e01b      	b.n	8005c96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	daf2      	bge.n	8005c4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c66:	2300      	movs	r3, #0
 8005c68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	f043 0201 	orr.w	r2, r3, #1
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	4a09      	ldr	r2, [pc, #36]	; (8005ca4 <USB_CoreReset+0x64>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d901      	bls.n	8005c88 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e006      	b.n	8005c96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d0f0      	beq.n	8005c76 <USB_CoreReset+0x36>

  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3714      	adds	r7, #20
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	00030d40 	.word	0x00030d40

08005ca8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005ca8:	b480      	push	{r7}
 8005caa:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005cac:	bf00      	nop
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
	...

08005cb8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cbe:	f3ef 8305 	mrs	r3, IPSR
 8005cc2:	60bb      	str	r3, [r7, #8]
  return(result);
 8005cc4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10f      	bne.n	8005cea <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cca:	f3ef 8310 	mrs	r3, PRIMASK
 8005cce:	607b      	str	r3, [r7, #4]
  return(result);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d105      	bne.n	8005ce2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005cd6:	f3ef 8311 	mrs	r3, BASEPRI
 8005cda:	603b      	str	r3, [r7, #0]
  return(result);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d007      	beq.n	8005cf2 <osKernelInitialize+0x3a>
 8005ce2:	4b0e      	ldr	r3, [pc, #56]	; (8005d1c <osKernelInitialize+0x64>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d103      	bne.n	8005cf2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005cea:	f06f 0305 	mvn.w	r3, #5
 8005cee:	60fb      	str	r3, [r7, #12]
 8005cf0:	e00c      	b.n	8005d0c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005cf2:	4b0a      	ldr	r3, [pc, #40]	; (8005d1c <osKernelInitialize+0x64>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d105      	bne.n	8005d06 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005cfa:	4b08      	ldr	r3, [pc, #32]	; (8005d1c <osKernelInitialize+0x64>)
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005d00:	2300      	movs	r3, #0
 8005d02:	60fb      	str	r3, [r7, #12]
 8005d04:	e002      	b.n	8005d0c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005d06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d0a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	20000c00 	.word	0x20000c00

08005d20 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d26:	f3ef 8305 	mrs	r3, IPSR
 8005d2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d2c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10f      	bne.n	8005d52 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d32:	f3ef 8310 	mrs	r3, PRIMASK
 8005d36:	607b      	str	r3, [r7, #4]
  return(result);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d105      	bne.n	8005d4a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d3e:	f3ef 8311 	mrs	r3, BASEPRI
 8005d42:	603b      	str	r3, [r7, #0]
  return(result);
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d007      	beq.n	8005d5a <osKernelStart+0x3a>
 8005d4a:	4b0f      	ldr	r3, [pc, #60]	; (8005d88 <osKernelStart+0x68>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d103      	bne.n	8005d5a <osKernelStart+0x3a>
    stat = osErrorISR;
 8005d52:	f06f 0305 	mvn.w	r3, #5
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	e010      	b.n	8005d7c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005d5a:	4b0b      	ldr	r3, [pc, #44]	; (8005d88 <osKernelStart+0x68>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d109      	bne.n	8005d76 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005d62:	f7ff ffa1 	bl	8005ca8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005d66:	4b08      	ldr	r3, [pc, #32]	; (8005d88 <osKernelStart+0x68>)
 8005d68:	2202      	movs	r2, #2
 8005d6a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005d6c:	f001 fafe 	bl	800736c <vTaskStartScheduler>
      stat = osOK;
 8005d70:	2300      	movs	r3, #0
 8005d72:	60fb      	str	r3, [r7, #12]
 8005d74:	e002      	b.n	8005d7c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005d76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d7a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	20000c00 	.word	0x20000c00

08005d8c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b090      	sub	sp, #64	; 0x40
 8005d90:	af04      	add	r7, sp, #16
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d9c:	f3ef 8305 	mrs	r3, IPSR
 8005da0:	61fb      	str	r3, [r7, #28]
  return(result);
 8005da2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f040 808f 	bne.w	8005ec8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005daa:	f3ef 8310 	mrs	r3, PRIMASK
 8005dae:	61bb      	str	r3, [r7, #24]
  return(result);
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d105      	bne.n	8005dc2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005db6:	f3ef 8311 	mrs	r3, BASEPRI
 8005dba:	617b      	str	r3, [r7, #20]
  return(result);
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <osThreadNew+0x3e>
 8005dc2:	4b44      	ldr	r3, [pc, #272]	; (8005ed4 <osThreadNew+0x148>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d07e      	beq.n	8005ec8 <osThreadNew+0x13c>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d07b      	beq.n	8005ec8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005dd0:	2380      	movs	r3, #128	; 0x80
 8005dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005dd4:	2318      	movs	r3, #24
 8005dd6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005ddc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005de0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d045      	beq.n	8005e74 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d002      	beq.n	8005df6 <osThreadNew+0x6a>
        name = attr->name;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d002      	beq.n	8005e04 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d008      	beq.n	8005e1c <osThreadNew+0x90>
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	2b38      	cmp	r3, #56	; 0x38
 8005e0e:	d805      	bhi.n	8005e1c <osThreadNew+0x90>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d001      	beq.n	8005e20 <osThreadNew+0x94>
        return (NULL);
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	e054      	b.n	8005eca <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d003      	beq.n	8005e30 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	695b      	ldr	r3, [r3, #20]
 8005e2c:	089b      	lsrs	r3, r3, #2
 8005e2e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00e      	beq.n	8005e56 <osThreadNew+0xca>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	2bbb      	cmp	r3, #187	; 0xbb
 8005e3e:	d90a      	bls.n	8005e56 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d006      	beq.n	8005e56 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	695b      	ldr	r3, [r3, #20]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d002      	beq.n	8005e56 <osThreadNew+0xca>
        mem = 1;
 8005e50:	2301      	movs	r3, #1
 8005e52:	623b      	str	r3, [r7, #32]
 8005e54:	e010      	b.n	8005e78 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10c      	bne.n	8005e78 <osThreadNew+0xec>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d108      	bne.n	8005e78 <osThreadNew+0xec>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d104      	bne.n	8005e78 <osThreadNew+0xec>
          mem = 0;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	623b      	str	r3, [r7, #32]
 8005e72:	e001      	b.n	8005e78 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005e74:	2300      	movs	r3, #0
 8005e76:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005e78:	6a3b      	ldr	r3, [r7, #32]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d110      	bne.n	8005ea0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005e86:	9202      	str	r2, [sp, #8]
 8005e88:	9301      	str	r3, [sp, #4]
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8c:	9300      	str	r3, [sp, #0]
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f001 f873 	bl	8006f80 <xTaskCreateStatic>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	613b      	str	r3, [r7, #16]
 8005e9e:	e013      	b.n	8005ec8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005ea0:	6a3b      	ldr	r3, [r7, #32]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d110      	bne.n	8005ec8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	f107 0310 	add.w	r3, r7, #16
 8005eae:	9301      	str	r3, [sp, #4]
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f001 f8c4 	bl	8007046 <xTaskCreate>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d001      	beq.n	8005ec8 <osThreadNew+0x13c>
          hTask = NULL;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005ec8:	693b      	ldr	r3, [r7, #16]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3730      	adds	r7, #48	; 0x30
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	20000c00 	.word	0x20000c00

08005ed8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b086      	sub	sp, #24
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ee0:	f3ef 8305 	mrs	r3, IPSR
 8005ee4:	613b      	str	r3, [r7, #16]
  return(result);
 8005ee6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10f      	bne.n	8005f0c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eec:	f3ef 8310 	mrs	r3, PRIMASK
 8005ef0:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d105      	bne.n	8005f04 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005ef8:	f3ef 8311 	mrs	r3, BASEPRI
 8005efc:	60bb      	str	r3, [r7, #8]
  return(result);
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d007      	beq.n	8005f14 <osDelay+0x3c>
 8005f04:	4b0a      	ldr	r3, [pc, #40]	; (8005f30 <osDelay+0x58>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d103      	bne.n	8005f14 <osDelay+0x3c>
    stat = osErrorISR;
 8005f0c:	f06f 0305 	mvn.w	r3, #5
 8005f10:	617b      	str	r3, [r7, #20]
 8005f12:	e007      	b.n	8005f24 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005f14:	2300      	movs	r3, #0
 8005f16:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d002      	beq.n	8005f24 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f001 f9ee 	bl	8007300 <vTaskDelay>
    }
  }

  return (stat);
 8005f24:	697b      	ldr	r3, [r7, #20]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3718      	adds	r7, #24
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	20000c00 	.word	0x20000c00

08005f34 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b08c      	sub	sp, #48	; 0x30
 8005f38:	af02      	add	r7, sp, #8
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005f40:	2300      	movs	r3, #0
 8005f42:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f44:	f3ef 8305 	mrs	r3, IPSR
 8005f48:	61bb      	str	r3, [r7, #24]
  return(result);
 8005f4a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d16f      	bne.n	8006030 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f50:	f3ef 8310 	mrs	r3, PRIMASK
 8005f54:	617b      	str	r3, [r7, #20]
  return(result);
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d105      	bne.n	8005f68 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f5c:	f3ef 8311 	mrs	r3, BASEPRI
 8005f60:	613b      	str	r3, [r7, #16]
  return(result);
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d003      	beq.n	8005f70 <osMessageQueueNew+0x3c>
 8005f68:	4b34      	ldr	r3, [pc, #208]	; (800603c <osMessageQueueNew+0x108>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d05f      	beq.n	8006030 <osMessageQueueNew+0xfc>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d05c      	beq.n	8006030 <osMessageQueueNew+0xfc>
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d059      	beq.n	8006030 <osMessageQueueNew+0xfc>
    mem = -1;
 8005f7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f80:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d029      	beq.n	8005fdc <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d012      	beq.n	8005fb6 <osMessageQueueNew+0x82>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	2b4f      	cmp	r3, #79	; 0x4f
 8005f96:	d90e      	bls.n	8005fb6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00a      	beq.n	8005fb6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	695a      	ldr	r2, [r3, #20]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	68b9      	ldr	r1, [r7, #8]
 8005fa8:	fb01 f303 	mul.w	r3, r1, r3
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d302      	bcc.n	8005fb6 <osMessageQueueNew+0x82>
        mem = 1;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	623b      	str	r3, [r7, #32]
 8005fb4:	e014      	b.n	8005fe0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d110      	bne.n	8005fe0 <osMessageQueueNew+0xac>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d10c      	bne.n	8005fe0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d108      	bne.n	8005fe0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d104      	bne.n	8005fe0 <osMessageQueueNew+0xac>
          mem = 0;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	623b      	str	r3, [r7, #32]
 8005fda:	e001      	b.n	8005fe0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d10b      	bne.n	8005ffe <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	691a      	ldr	r2, [r3, #16]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	2100      	movs	r1, #0
 8005ff0:	9100      	str	r1, [sp, #0]
 8005ff2:	68b9      	ldr	r1, [r7, #8]
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 fa5b 	bl	80064b0 <xQueueGenericCreateStatic>
 8005ffa:	6278      	str	r0, [r7, #36]	; 0x24
 8005ffc:	e008      	b.n	8006010 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8005ffe:	6a3b      	ldr	r3, [r7, #32]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d105      	bne.n	8006010 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006004:	2200      	movs	r2, #0
 8006006:	68b9      	ldr	r1, [r7, #8]
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	f000 fad3 	bl	80065b4 <xQueueGenericCreate>
 800600e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00c      	beq.n	8006030 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d003      	beq.n	8006024 <osMessageQueueNew+0xf0>
        name = attr->name;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	61fb      	str	r3, [r7, #28]
 8006022:	e001      	b.n	8006028 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8006024:	2300      	movs	r3, #0
 8006026:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006028:	69f9      	ldr	r1, [r7, #28]
 800602a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800602c:	f000 ff4a 	bl	8006ec4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006032:	4618      	mov	r0, r3
 8006034:	3728      	adds	r7, #40	; 0x28
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	20000c00 	.word	0x20000c00

08006040 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006040:	b580      	push	{r7, lr}
 8006042:	b08a      	sub	sp, #40	; 0x28
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	603b      	str	r3, [r7, #0]
 800604c:	4613      	mov	r3, r2
 800604e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006054:	2300      	movs	r3, #0
 8006056:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006058:	f3ef 8305 	mrs	r3, IPSR
 800605c:	61fb      	str	r3, [r7, #28]
  return(result);
 800605e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006060:	2b00      	cmp	r3, #0
 8006062:	d10f      	bne.n	8006084 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006064:	f3ef 8310 	mrs	r3, PRIMASK
 8006068:	61bb      	str	r3, [r7, #24]
  return(result);
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d105      	bne.n	800607c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006070:	f3ef 8311 	mrs	r3, BASEPRI
 8006074:	617b      	str	r3, [r7, #20]
  return(result);
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d02c      	beq.n	80060d6 <osMessageQueuePut+0x96>
 800607c:	4b28      	ldr	r3, [pc, #160]	; (8006120 <osMessageQueuePut+0xe0>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2b02      	cmp	r3, #2
 8006082:	d128      	bne.n	80060d6 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006084:	6a3b      	ldr	r3, [r7, #32]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d005      	beq.n	8006096 <osMessageQueuePut+0x56>
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d002      	beq.n	8006096 <osMessageQueuePut+0x56>
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d003      	beq.n	800609e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8006096:	f06f 0303 	mvn.w	r3, #3
 800609a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800609c:	e039      	b.n	8006112 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800609e:	2300      	movs	r3, #0
 80060a0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80060a2:	f107 0210 	add.w	r2, r7, #16
 80060a6:	2300      	movs	r3, #0
 80060a8:	68b9      	ldr	r1, [r7, #8]
 80060aa:	6a38      	ldr	r0, [r7, #32]
 80060ac:	f000 fbee 	bl	800688c <xQueueGenericSendFromISR>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d003      	beq.n	80060be <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80060b6:	f06f 0302 	mvn.w	r3, #2
 80060ba:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80060bc:	e029      	b.n	8006112 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d026      	beq.n	8006112 <osMessageQueuePut+0xd2>
 80060c4:	4b17      	ldr	r3, [pc, #92]	; (8006124 <osMessageQueuePut+0xe4>)
 80060c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060ca:	601a      	str	r2, [r3, #0]
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80060d4:	e01d      	b.n	8006112 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80060d6:	6a3b      	ldr	r3, [r7, #32]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d002      	beq.n	80060e2 <osMessageQueuePut+0xa2>
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d103      	bne.n	80060ea <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80060e2:	f06f 0303 	mvn.w	r3, #3
 80060e6:	627b      	str	r3, [r7, #36]	; 0x24
 80060e8:	e014      	b.n	8006114 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80060ea:	2300      	movs	r3, #0
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	68b9      	ldr	r1, [r7, #8]
 80060f0:	6a38      	ldr	r0, [r7, #32]
 80060f2:	f000 fac5 	bl	8006680 <xQueueGenericSend>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d00b      	beq.n	8006114 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d003      	beq.n	800610a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8006102:	f06f 0301 	mvn.w	r3, #1
 8006106:	627b      	str	r3, [r7, #36]	; 0x24
 8006108:	e004      	b.n	8006114 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800610a:	f06f 0302 	mvn.w	r3, #2
 800610e:	627b      	str	r3, [r7, #36]	; 0x24
 8006110:	e000      	b.n	8006114 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006112:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006116:	4618      	mov	r0, r3
 8006118:	3728      	adds	r7, #40	; 0x28
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	20000c00 	.word	0x20000c00
 8006124:	e000ed04 	.word	0xe000ed04

08006128 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006128:	b580      	push	{r7, lr}
 800612a:	b08a      	sub	sp, #40	; 0x28
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
 8006134:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800613a:	2300      	movs	r3, #0
 800613c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800613e:	f3ef 8305 	mrs	r3, IPSR
 8006142:	61fb      	str	r3, [r7, #28]
  return(result);
 8006144:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10f      	bne.n	800616a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800614a:	f3ef 8310 	mrs	r3, PRIMASK
 800614e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d105      	bne.n	8006162 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006156:	f3ef 8311 	mrs	r3, BASEPRI
 800615a:	617b      	str	r3, [r7, #20]
  return(result);
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d02c      	beq.n	80061bc <osMessageQueueGet+0x94>
 8006162:	4b28      	ldr	r3, [pc, #160]	; (8006204 <osMessageQueueGet+0xdc>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2b02      	cmp	r3, #2
 8006168:	d128      	bne.n	80061bc <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800616a:	6a3b      	ldr	r3, [r7, #32]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d005      	beq.n	800617c <osMessageQueueGet+0x54>
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d002      	beq.n	800617c <osMessageQueueGet+0x54>
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d003      	beq.n	8006184 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800617c:	f06f 0303 	mvn.w	r3, #3
 8006180:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006182:	e038      	b.n	80061f6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8006184:	2300      	movs	r3, #0
 8006186:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006188:	f107 0310 	add.w	r3, r7, #16
 800618c:	461a      	mov	r2, r3
 800618e:	68b9      	ldr	r1, [r7, #8]
 8006190:	6a38      	ldr	r0, [r7, #32]
 8006192:	f000 fd01 	bl	8006b98 <xQueueReceiveFromISR>
 8006196:	4603      	mov	r3, r0
 8006198:	2b01      	cmp	r3, #1
 800619a:	d003      	beq.n	80061a4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800619c:	f06f 0302 	mvn.w	r3, #2
 80061a0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80061a2:	e028      	b.n	80061f6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d025      	beq.n	80061f6 <osMessageQueueGet+0xce>
 80061aa:	4b17      	ldr	r3, [pc, #92]	; (8006208 <osMessageQueueGet+0xe0>)
 80061ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061b0:	601a      	str	r2, [r3, #0]
 80061b2:	f3bf 8f4f 	dsb	sy
 80061b6:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80061ba:	e01c      	b.n	80061f6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80061bc:	6a3b      	ldr	r3, [r7, #32]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d002      	beq.n	80061c8 <osMessageQueueGet+0xa0>
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d103      	bne.n	80061d0 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80061c8:	f06f 0303 	mvn.w	r3, #3
 80061cc:	627b      	str	r3, [r7, #36]	; 0x24
 80061ce:	e013      	b.n	80061f8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80061d0:	683a      	ldr	r2, [r7, #0]
 80061d2:	68b9      	ldr	r1, [r7, #8]
 80061d4:	6a38      	ldr	r0, [r7, #32]
 80061d6:	f000 fbf9 	bl	80069cc <xQueueReceive>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d00b      	beq.n	80061f8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d003      	beq.n	80061ee <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80061e6:	f06f 0301 	mvn.w	r3, #1
 80061ea:	627b      	str	r3, [r7, #36]	; 0x24
 80061ec:	e004      	b.n	80061f8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80061ee:	f06f 0302 	mvn.w	r3, #2
 80061f2:	627b      	str	r3, [r7, #36]	; 0x24
 80061f4:	e000      	b.n	80061f8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80061f6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3728      	adds	r7, #40	; 0x28
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	20000c00 	.word	0x20000c00
 8006208:	e000ed04 	.word	0xe000ed04

0800620c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4a07      	ldr	r2, [pc, #28]	; (8006238 <vApplicationGetIdleTaskMemory+0x2c>)
 800621c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	4a06      	ldr	r2, [pc, #24]	; (800623c <vApplicationGetIdleTaskMemory+0x30>)
 8006222:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2280      	movs	r2, #128	; 0x80
 8006228:	601a      	str	r2, [r3, #0]
}
 800622a:	bf00      	nop
 800622c:	3714      	adds	r7, #20
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	20000c04 	.word	0x20000c04
 800623c:	20000cc0 	.word	0x20000cc0

08006240 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	4a07      	ldr	r2, [pc, #28]	; (800626c <vApplicationGetTimerTaskMemory+0x2c>)
 8006250:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	4a06      	ldr	r2, [pc, #24]	; (8006270 <vApplicationGetTimerTaskMemory+0x30>)
 8006256:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800625e:	601a      	str	r2, [r3, #0]
}
 8006260:	bf00      	nop
 8006262:	3714      	adds	r7, #20
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	20000ec0 	.word	0x20000ec0
 8006270:	20000f7c 	.word	0x20000f7c

08006274 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f103 0208 	add.w	r2, r3, #8
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800628c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f103 0208 	add.w	r2, r3, #8
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f103 0208 	add.w	r2, r3, #8
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80062a8:	bf00      	nop
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80062c2:	bf00      	nop
 80062c4:	370c      	adds	r7, #12
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062ce:	b480      	push	{r7}
 80062d0:	b085      	sub	sp, #20
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
 80062d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	689a      	ldr	r2, [r3, #8]
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	683a      	ldr	r2, [r7, #0]
 80062f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	683a      	ldr	r2, [r7, #0]
 80062f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	1c5a      	adds	r2, r3, #1
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	601a      	str	r2, [r3, #0]
}
 800630a:	bf00      	nop
 800630c:	3714      	adds	r7, #20
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006316:	b480      	push	{r7}
 8006318:	b085      	sub	sp, #20
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
 800631e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800632c:	d103      	bne.n	8006336 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	60fb      	str	r3, [r7, #12]
 8006334:	e00c      	b.n	8006350 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	3308      	adds	r3, #8
 800633a:	60fb      	str	r3, [r7, #12]
 800633c:	e002      	b.n	8006344 <vListInsert+0x2e>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	60fb      	str	r3, [r7, #12]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	429a      	cmp	r2, r3
 800634e:	d2f6      	bcs.n	800633e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	685a      	ldr	r2, [r3, #4]
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	683a      	ldr	r2, [r7, #0]
 800635e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	683a      	ldr	r2, [r7, #0]
 800636a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	1c5a      	adds	r2, r3, #1
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	601a      	str	r2, [r3, #0]
}
 800637c:	bf00      	nop
 800637e:	3714      	adds	r7, #20
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	6892      	ldr	r2, [r2, #8]
 800639e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	6852      	ldr	r2, [r2, #4]
 80063a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d103      	bne.n	80063bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	689a      	ldr	r2, [r3, #8]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	1e5a      	subs	r2, r3, #1
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3714      	adds	r7, #20
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d10c      	bne.n	800640a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80063f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f4:	b672      	cpsid	i
 80063f6:	f383 8811 	msr	BASEPRI, r3
 80063fa:	f3bf 8f6f 	isb	sy
 80063fe:	f3bf 8f4f 	dsb	sy
 8006402:	b662      	cpsie	i
 8006404:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006406:	bf00      	nop
 8006408:	e7fe      	b.n	8006408 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800640a:	f002 f96f 	bl	80086ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006416:	68f9      	ldr	r1, [r7, #12]
 8006418:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800641a:	fb01 f303 	mul.w	r3, r1, r3
 800641e:	441a      	add	r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800643a:	3b01      	subs	r3, #1
 800643c:	68f9      	ldr	r1, [r7, #12]
 800643e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006440:	fb01 f303 	mul.w	r3, r1, r3
 8006444:	441a      	add	r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	22ff      	movs	r2, #255	; 0xff
 800644e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	22ff      	movs	r2, #255	; 0xff
 8006456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d114      	bne.n	800648a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d01a      	beq.n	800649e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	3310      	adds	r3, #16
 800646c:	4618      	mov	r0, r3
 800646e:	f001 fa25 	bl	80078bc <xTaskRemoveFromEventList>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d012      	beq.n	800649e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006478:	4b0c      	ldr	r3, [pc, #48]	; (80064ac <xQueueGenericReset+0xd0>)
 800647a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800647e:	601a      	str	r2, [r3, #0]
 8006480:	f3bf 8f4f 	dsb	sy
 8006484:	f3bf 8f6f 	isb	sy
 8006488:	e009      	b.n	800649e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	3310      	adds	r3, #16
 800648e:	4618      	mov	r0, r3
 8006490:	f7ff fef0 	bl	8006274 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	3324      	adds	r3, #36	; 0x24
 8006498:	4618      	mov	r0, r3
 800649a:	f7ff feeb 	bl	8006274 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800649e:	f002 f959 	bl	8008754 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80064a2:	2301      	movs	r3, #1
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3710      	adds	r7, #16
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	e000ed04 	.word	0xe000ed04

080064b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b08e      	sub	sp, #56	; 0x38
 80064b4:	af02      	add	r7, sp, #8
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
 80064bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d10c      	bne.n	80064de <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80064c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c8:	b672      	cpsid	i
 80064ca:	f383 8811 	msr	BASEPRI, r3
 80064ce:	f3bf 8f6f 	isb	sy
 80064d2:	f3bf 8f4f 	dsb	sy
 80064d6:	b662      	cpsie	i
 80064d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80064da:	bf00      	nop
 80064dc:	e7fe      	b.n	80064dc <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d10c      	bne.n	80064fe <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80064e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e8:	b672      	cpsid	i
 80064ea:	f383 8811 	msr	BASEPRI, r3
 80064ee:	f3bf 8f6f 	isb	sy
 80064f2:	f3bf 8f4f 	dsb	sy
 80064f6:	b662      	cpsie	i
 80064f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80064fa:	bf00      	nop
 80064fc:	e7fe      	b.n	80064fc <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d002      	beq.n	800650a <xQueueGenericCreateStatic+0x5a>
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d001      	beq.n	800650e <xQueueGenericCreateStatic+0x5e>
 800650a:	2301      	movs	r3, #1
 800650c:	e000      	b.n	8006510 <xQueueGenericCreateStatic+0x60>
 800650e:	2300      	movs	r3, #0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10c      	bne.n	800652e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006518:	b672      	cpsid	i
 800651a:	f383 8811 	msr	BASEPRI, r3
 800651e:	f3bf 8f6f 	isb	sy
 8006522:	f3bf 8f4f 	dsb	sy
 8006526:	b662      	cpsie	i
 8006528:	623b      	str	r3, [r7, #32]
}
 800652a:	bf00      	nop
 800652c:	e7fe      	b.n	800652c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d102      	bne.n	800653a <xQueueGenericCreateStatic+0x8a>
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <xQueueGenericCreateStatic+0x8e>
 800653a:	2301      	movs	r3, #1
 800653c:	e000      	b.n	8006540 <xQueueGenericCreateStatic+0x90>
 800653e:	2300      	movs	r3, #0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10c      	bne.n	800655e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8006544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006548:	b672      	cpsid	i
 800654a:	f383 8811 	msr	BASEPRI, r3
 800654e:	f3bf 8f6f 	isb	sy
 8006552:	f3bf 8f4f 	dsb	sy
 8006556:	b662      	cpsie	i
 8006558:	61fb      	str	r3, [r7, #28]
}
 800655a:	bf00      	nop
 800655c:	e7fe      	b.n	800655c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800655e:	2350      	movs	r3, #80	; 0x50
 8006560:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	2b50      	cmp	r3, #80	; 0x50
 8006566:	d00c      	beq.n	8006582 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656c:	b672      	cpsid	i
 800656e:	f383 8811 	msr	BASEPRI, r3
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	f3bf 8f4f 	dsb	sy
 800657a:	b662      	cpsie	i
 800657c:	61bb      	str	r3, [r7, #24]
}
 800657e:	bf00      	nop
 8006580:	e7fe      	b.n	8006580 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006582:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00d      	beq.n	80065aa <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800658e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006590:	2201      	movs	r2, #1
 8006592:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006596:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800659a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800659c:	9300      	str	r3, [sp, #0]
 800659e:	4613      	mov	r3, r2
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	68b9      	ldr	r1, [r7, #8]
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f000 f847 	bl	8006638 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80065aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3730      	adds	r7, #48	; 0x30
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b08a      	sub	sp, #40	; 0x28
 80065b8:	af02      	add	r7, sp, #8
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	4613      	mov	r3, r2
 80065c0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10c      	bne.n	80065e2 <xQueueGenericCreate+0x2e>
	__asm volatile
 80065c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065cc:	b672      	cpsid	i
 80065ce:	f383 8811 	msr	BASEPRI, r3
 80065d2:	f3bf 8f6f 	isb	sy
 80065d6:	f3bf 8f4f 	dsb	sy
 80065da:	b662      	cpsie	i
 80065dc:	613b      	str	r3, [r7, #16]
}
 80065de:	bf00      	nop
 80065e0:	e7fe      	b.n	80065e0 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d102      	bne.n	80065ee <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80065e8:	2300      	movs	r3, #0
 80065ea:	61fb      	str	r3, [r7, #28]
 80065ec:	e004      	b.n	80065f8 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	68ba      	ldr	r2, [r7, #8]
 80065f2:	fb02 f303 	mul.w	r3, r2, r3
 80065f6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	3350      	adds	r3, #80	; 0x50
 80065fc:	4618      	mov	r0, r3
 80065fe:	f002 f9a1 	bl	8008944 <pvPortMalloc>
 8006602:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d011      	beq.n	800662e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	3350      	adds	r3, #80	; 0x50
 8006612:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	2200      	movs	r2, #0
 8006618:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800661c:	79fa      	ldrb	r2, [r7, #7]
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	9300      	str	r3, [sp, #0]
 8006622:	4613      	mov	r3, r2
 8006624:	697a      	ldr	r2, [r7, #20]
 8006626:	68b9      	ldr	r1, [r7, #8]
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f000 f805 	bl	8006638 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800662e:	69bb      	ldr	r3, [r7, #24]
	}
 8006630:	4618      	mov	r0, r3
 8006632:	3720      	adds	r7, #32
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]
 8006644:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d103      	bne.n	8006654 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	69ba      	ldr	r2, [r7, #24]
 8006650:	601a      	str	r2, [r3, #0]
 8006652:	e002      	b.n	800665a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006666:	2101      	movs	r1, #1
 8006668:	69b8      	ldr	r0, [r7, #24]
 800666a:	f7ff feb7 	bl	80063dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	78fa      	ldrb	r2, [r7, #3]
 8006672:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006676:	bf00      	nop
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
	...

08006680 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b08e      	sub	sp, #56	; 0x38
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
 800668c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800668e:	2300      	movs	r3, #0
 8006690:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10c      	bne.n	80066b6 <xQueueGenericSend+0x36>
	__asm volatile
 800669c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a0:	b672      	cpsid	i
 80066a2:	f383 8811 	msr	BASEPRI, r3
 80066a6:	f3bf 8f6f 	isb	sy
 80066aa:	f3bf 8f4f 	dsb	sy
 80066ae:	b662      	cpsie	i
 80066b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80066b2:	bf00      	nop
 80066b4:	e7fe      	b.n	80066b4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d103      	bne.n	80066c4 <xQueueGenericSend+0x44>
 80066bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d101      	bne.n	80066c8 <xQueueGenericSend+0x48>
 80066c4:	2301      	movs	r3, #1
 80066c6:	e000      	b.n	80066ca <xQueueGenericSend+0x4a>
 80066c8:	2300      	movs	r3, #0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d10c      	bne.n	80066e8 <xQueueGenericSend+0x68>
	__asm volatile
 80066ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d2:	b672      	cpsid	i
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	b662      	cpsie	i
 80066e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80066e4:	bf00      	nop
 80066e6:	e7fe      	b.n	80066e6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d103      	bne.n	80066f6 <xQueueGenericSend+0x76>
 80066ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d101      	bne.n	80066fa <xQueueGenericSend+0x7a>
 80066f6:	2301      	movs	r3, #1
 80066f8:	e000      	b.n	80066fc <xQueueGenericSend+0x7c>
 80066fa:	2300      	movs	r3, #0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d10c      	bne.n	800671a <xQueueGenericSend+0x9a>
	__asm volatile
 8006700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006704:	b672      	cpsid	i
 8006706:	f383 8811 	msr	BASEPRI, r3
 800670a:	f3bf 8f6f 	isb	sy
 800670e:	f3bf 8f4f 	dsb	sy
 8006712:	b662      	cpsie	i
 8006714:	623b      	str	r3, [r7, #32]
}
 8006716:	bf00      	nop
 8006718:	e7fe      	b.n	8006718 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800671a:	f001 fa99 	bl	8007c50 <xTaskGetSchedulerState>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d102      	bne.n	800672a <xQueueGenericSend+0xaa>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d101      	bne.n	800672e <xQueueGenericSend+0xae>
 800672a:	2301      	movs	r3, #1
 800672c:	e000      	b.n	8006730 <xQueueGenericSend+0xb0>
 800672e:	2300      	movs	r3, #0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10c      	bne.n	800674e <xQueueGenericSend+0xce>
	__asm volatile
 8006734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006738:	b672      	cpsid	i
 800673a:	f383 8811 	msr	BASEPRI, r3
 800673e:	f3bf 8f6f 	isb	sy
 8006742:	f3bf 8f4f 	dsb	sy
 8006746:	b662      	cpsie	i
 8006748:	61fb      	str	r3, [r7, #28]
}
 800674a:	bf00      	nop
 800674c:	e7fe      	b.n	800674c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800674e:	f001 ffcd 	bl	80086ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006754:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800675a:	429a      	cmp	r2, r3
 800675c:	d302      	bcc.n	8006764 <xQueueGenericSend+0xe4>
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	2b02      	cmp	r3, #2
 8006762:	d129      	bne.n	80067b8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006764:	683a      	ldr	r2, [r7, #0]
 8006766:	68b9      	ldr	r1, [r7, #8]
 8006768:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800676a:	f000 fa9b 	bl	8006ca4 <prvCopyDataToQueue>
 800676e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006774:	2b00      	cmp	r3, #0
 8006776:	d010      	beq.n	800679a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677a:	3324      	adds	r3, #36	; 0x24
 800677c:	4618      	mov	r0, r3
 800677e:	f001 f89d 	bl	80078bc <xTaskRemoveFromEventList>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d013      	beq.n	80067b0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006788:	4b3f      	ldr	r3, [pc, #252]	; (8006888 <xQueueGenericSend+0x208>)
 800678a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800678e:	601a      	str	r2, [r3, #0]
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	f3bf 8f6f 	isb	sy
 8006798:	e00a      	b.n	80067b0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800679a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800679c:	2b00      	cmp	r3, #0
 800679e:	d007      	beq.n	80067b0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80067a0:	4b39      	ldr	r3, [pc, #228]	; (8006888 <xQueueGenericSend+0x208>)
 80067a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067a6:	601a      	str	r2, [r3, #0]
 80067a8:	f3bf 8f4f 	dsb	sy
 80067ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80067b0:	f001 ffd0 	bl	8008754 <vPortExitCritical>
				return pdPASS;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e063      	b.n	8006880 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d103      	bne.n	80067c6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80067be:	f001 ffc9 	bl	8008754 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80067c2:	2300      	movs	r3, #0
 80067c4:	e05c      	b.n	8006880 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80067c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d106      	bne.n	80067da <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067cc:	f107 0314 	add.w	r3, r7, #20
 80067d0:	4618      	mov	r0, r3
 80067d2:	f001 f8d9 	bl	8007988 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067d6:	2301      	movs	r3, #1
 80067d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067da:	f001 ffbb 	bl	8008754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067de:	f000 fe39 	bl	8007454 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067e2:	f001 ff83 	bl	80086ec <vPortEnterCritical>
 80067e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067ec:	b25b      	sxtb	r3, r3
 80067ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067f2:	d103      	bne.n	80067fc <xQueueGenericSend+0x17c>
 80067f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006802:	b25b      	sxtb	r3, r3
 8006804:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006808:	d103      	bne.n	8006812 <xQueueGenericSend+0x192>
 800680a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680c:	2200      	movs	r2, #0
 800680e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006812:	f001 ff9f 	bl	8008754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006816:	1d3a      	adds	r2, r7, #4
 8006818:	f107 0314 	add.w	r3, r7, #20
 800681c:	4611      	mov	r1, r2
 800681e:	4618      	mov	r0, r3
 8006820:	f001 f8c8 	bl	80079b4 <xTaskCheckForTimeOut>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d124      	bne.n	8006874 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800682a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800682c:	f000 fb32 	bl	8006e94 <prvIsQueueFull>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d018      	beq.n	8006868 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006838:	3310      	adds	r3, #16
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	4611      	mov	r1, r2
 800683e:	4618      	mov	r0, r3
 8006840:	f000 ffe8 	bl	8007814 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006844:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006846:	f000 fabd 	bl	8006dc4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800684a:	f000 fe11 	bl	8007470 <xTaskResumeAll>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	f47f af7c 	bne.w	800674e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8006856:	4b0c      	ldr	r3, [pc, #48]	; (8006888 <xQueueGenericSend+0x208>)
 8006858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800685c:	601a      	str	r2, [r3, #0]
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	f3bf 8f6f 	isb	sy
 8006866:	e772      	b.n	800674e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006868:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800686a:	f000 faab 	bl	8006dc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800686e:	f000 fdff 	bl	8007470 <xTaskResumeAll>
 8006872:	e76c      	b.n	800674e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006874:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006876:	f000 faa5 	bl	8006dc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800687a:	f000 fdf9 	bl	8007470 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800687e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006880:	4618      	mov	r0, r3
 8006882:	3738      	adds	r7, #56	; 0x38
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	e000ed04 	.word	0xe000ed04

0800688c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b08e      	sub	sp, #56	; 0x38
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
 8006898:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800689e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d10c      	bne.n	80068be <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80068a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a8:	b672      	cpsid	i
 80068aa:	f383 8811 	msr	BASEPRI, r3
 80068ae:	f3bf 8f6f 	isb	sy
 80068b2:	f3bf 8f4f 	dsb	sy
 80068b6:	b662      	cpsie	i
 80068b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80068ba:	bf00      	nop
 80068bc:	e7fe      	b.n	80068bc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d103      	bne.n	80068cc <xQueueGenericSendFromISR+0x40>
 80068c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d101      	bne.n	80068d0 <xQueueGenericSendFromISR+0x44>
 80068cc:	2301      	movs	r3, #1
 80068ce:	e000      	b.n	80068d2 <xQueueGenericSendFromISR+0x46>
 80068d0:	2300      	movs	r3, #0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d10c      	bne.n	80068f0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80068d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068da:	b672      	cpsid	i
 80068dc:	f383 8811 	msr	BASEPRI, r3
 80068e0:	f3bf 8f6f 	isb	sy
 80068e4:	f3bf 8f4f 	dsb	sy
 80068e8:	b662      	cpsie	i
 80068ea:	623b      	str	r3, [r7, #32]
}
 80068ec:	bf00      	nop
 80068ee:	e7fe      	b.n	80068ee <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d103      	bne.n	80068fe <xQueueGenericSendFromISR+0x72>
 80068f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d101      	bne.n	8006902 <xQueueGenericSendFromISR+0x76>
 80068fe:	2301      	movs	r3, #1
 8006900:	e000      	b.n	8006904 <xQueueGenericSendFromISR+0x78>
 8006902:	2300      	movs	r3, #0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10c      	bne.n	8006922 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8006908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690c:	b672      	cpsid	i
 800690e:	f383 8811 	msr	BASEPRI, r3
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	b662      	cpsie	i
 800691c:	61fb      	str	r3, [r7, #28]
}
 800691e:	bf00      	nop
 8006920:	e7fe      	b.n	8006920 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006922:	f001 ffcb 	bl	80088bc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006926:	f3ef 8211 	mrs	r2, BASEPRI
 800692a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692e:	b672      	cpsid	i
 8006930:	f383 8811 	msr	BASEPRI, r3
 8006934:	f3bf 8f6f 	isb	sy
 8006938:	f3bf 8f4f 	dsb	sy
 800693c:	b662      	cpsie	i
 800693e:	61ba      	str	r2, [r7, #24]
 8006940:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006942:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006944:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800694a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800694e:	429a      	cmp	r2, r3
 8006950:	d302      	bcc.n	8006958 <xQueueGenericSendFromISR+0xcc>
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	2b02      	cmp	r3, #2
 8006956:	d12c      	bne.n	80069b2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800695e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006962:	683a      	ldr	r2, [r7, #0]
 8006964:	68b9      	ldr	r1, [r7, #8]
 8006966:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006968:	f000 f99c 	bl	8006ca4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800696c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006970:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006974:	d112      	bne.n	800699c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697a:	2b00      	cmp	r3, #0
 800697c:	d016      	beq.n	80069ac <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800697e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006980:	3324      	adds	r3, #36	; 0x24
 8006982:	4618      	mov	r0, r3
 8006984:	f000 ff9a 	bl	80078bc <xTaskRemoveFromEventList>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00e      	beq.n	80069ac <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00b      	beq.n	80069ac <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	601a      	str	r2, [r3, #0]
 800699a:	e007      	b.n	80069ac <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800699c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80069a0:	3301      	adds	r3, #1
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	b25a      	sxtb	r2, r3
 80069a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80069ac:	2301      	movs	r3, #1
 80069ae:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80069b0:	e001      	b.n	80069b6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80069b2:	2300      	movs	r3, #0
 80069b4:	637b      	str	r3, [r7, #52]	; 0x34
 80069b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80069c0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80069c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3738      	adds	r7, #56	; 0x38
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b08c      	sub	sp, #48	; 0x30
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80069d8:	2300      	movs	r3, #0
 80069da:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80069e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10c      	bne.n	8006a00 <xQueueReceive+0x34>
	__asm volatile
 80069e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ea:	b672      	cpsid	i
 80069ec:	f383 8811 	msr	BASEPRI, r3
 80069f0:	f3bf 8f6f 	isb	sy
 80069f4:	f3bf 8f4f 	dsb	sy
 80069f8:	b662      	cpsie	i
 80069fa:	623b      	str	r3, [r7, #32]
}
 80069fc:	bf00      	nop
 80069fe:	e7fe      	b.n	80069fe <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d103      	bne.n	8006a0e <xQueueReceive+0x42>
 8006a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d101      	bne.n	8006a12 <xQueueReceive+0x46>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e000      	b.n	8006a14 <xQueueReceive+0x48>
 8006a12:	2300      	movs	r3, #0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d10c      	bne.n	8006a32 <xQueueReceive+0x66>
	__asm volatile
 8006a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1c:	b672      	cpsid	i
 8006a1e:	f383 8811 	msr	BASEPRI, r3
 8006a22:	f3bf 8f6f 	isb	sy
 8006a26:	f3bf 8f4f 	dsb	sy
 8006a2a:	b662      	cpsie	i
 8006a2c:	61fb      	str	r3, [r7, #28]
}
 8006a2e:	bf00      	nop
 8006a30:	e7fe      	b.n	8006a30 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a32:	f001 f90d 	bl	8007c50 <xTaskGetSchedulerState>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d102      	bne.n	8006a42 <xQueueReceive+0x76>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d101      	bne.n	8006a46 <xQueueReceive+0x7a>
 8006a42:	2301      	movs	r3, #1
 8006a44:	e000      	b.n	8006a48 <xQueueReceive+0x7c>
 8006a46:	2300      	movs	r3, #0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d10c      	bne.n	8006a66 <xQueueReceive+0x9a>
	__asm volatile
 8006a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a50:	b672      	cpsid	i
 8006a52:	f383 8811 	msr	BASEPRI, r3
 8006a56:	f3bf 8f6f 	isb	sy
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	b662      	cpsie	i
 8006a60:	61bb      	str	r3, [r7, #24]
}
 8006a62:	bf00      	nop
 8006a64:	e7fe      	b.n	8006a64 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a66:	f001 fe41 	bl	80086ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d01f      	beq.n	8006ab6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a76:	68b9      	ldr	r1, [r7, #8]
 8006a78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a7a:	f000 f97d 	bl	8006d78 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a80:	1e5a      	subs	r2, r3, #1
 8006a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a84:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00f      	beq.n	8006aae <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a90:	3310      	adds	r3, #16
 8006a92:	4618      	mov	r0, r3
 8006a94:	f000 ff12 	bl	80078bc <xTaskRemoveFromEventList>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d007      	beq.n	8006aae <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a9e:	4b3d      	ldr	r3, [pc, #244]	; (8006b94 <xQueueReceive+0x1c8>)
 8006aa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aa4:	601a      	str	r2, [r3, #0]
 8006aa6:	f3bf 8f4f 	dsb	sy
 8006aaa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006aae:	f001 fe51 	bl	8008754 <vPortExitCritical>
				return pdPASS;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e069      	b.n	8006b8a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d103      	bne.n	8006ac4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006abc:	f001 fe4a 	bl	8008754 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	e062      	b.n	8006b8a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d106      	bne.n	8006ad8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006aca:	f107 0310 	add.w	r3, r7, #16
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f000 ff5a 	bl	8007988 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ad8:	f001 fe3c 	bl	8008754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006adc:	f000 fcba 	bl	8007454 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ae0:	f001 fe04 	bl	80086ec <vPortEnterCritical>
 8006ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006aea:	b25b      	sxtb	r3, r3
 8006aec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006af0:	d103      	bne.n	8006afa <xQueueReceive+0x12e>
 8006af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b00:	b25b      	sxtb	r3, r3
 8006b02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b06:	d103      	bne.n	8006b10 <xQueueReceive+0x144>
 8006b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b10:	f001 fe20 	bl	8008754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b14:	1d3a      	adds	r2, r7, #4
 8006b16:	f107 0310 	add.w	r3, r7, #16
 8006b1a:	4611      	mov	r1, r2
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f000 ff49 	bl	80079b4 <xTaskCheckForTimeOut>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d123      	bne.n	8006b70 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b2a:	f000 f99d 	bl	8006e68 <prvIsQueueEmpty>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d017      	beq.n	8006b64 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b36:	3324      	adds	r3, #36	; 0x24
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	4611      	mov	r1, r2
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f000 fe69 	bl	8007814 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b44:	f000 f93e 	bl	8006dc4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b48:	f000 fc92 	bl	8007470 <xTaskResumeAll>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d189      	bne.n	8006a66 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8006b52:	4b10      	ldr	r3, [pc, #64]	; (8006b94 <xQueueReceive+0x1c8>)
 8006b54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b58:	601a      	str	r2, [r3, #0]
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	f3bf 8f6f 	isb	sy
 8006b62:	e780      	b.n	8006a66 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006b64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b66:	f000 f92d 	bl	8006dc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b6a:	f000 fc81 	bl	8007470 <xTaskResumeAll>
 8006b6e:	e77a      	b.n	8006a66 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006b70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b72:	f000 f927 	bl	8006dc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b76:	f000 fc7b 	bl	8007470 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b7c:	f000 f974 	bl	8006e68 <prvIsQueueEmpty>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f43f af6f 	beq.w	8006a66 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3730      	adds	r7, #48	; 0x30
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	e000ed04 	.word	0xe000ed04

08006b98 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b08e      	sub	sp, #56	; 0x38
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10c      	bne.n	8006bc8 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8006bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb2:	b672      	cpsid	i
 8006bb4:	f383 8811 	msr	BASEPRI, r3
 8006bb8:	f3bf 8f6f 	isb	sy
 8006bbc:	f3bf 8f4f 	dsb	sy
 8006bc0:	b662      	cpsie	i
 8006bc2:	623b      	str	r3, [r7, #32]
}
 8006bc4:	bf00      	nop
 8006bc6:	e7fe      	b.n	8006bc6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d103      	bne.n	8006bd6 <xQueueReceiveFromISR+0x3e>
 8006bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d101      	bne.n	8006bda <xQueueReceiveFromISR+0x42>
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e000      	b.n	8006bdc <xQueueReceiveFromISR+0x44>
 8006bda:	2300      	movs	r3, #0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10c      	bne.n	8006bfa <xQueueReceiveFromISR+0x62>
	__asm volatile
 8006be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be4:	b672      	cpsid	i
 8006be6:	f383 8811 	msr	BASEPRI, r3
 8006bea:	f3bf 8f6f 	isb	sy
 8006bee:	f3bf 8f4f 	dsb	sy
 8006bf2:	b662      	cpsie	i
 8006bf4:	61fb      	str	r3, [r7, #28]
}
 8006bf6:	bf00      	nop
 8006bf8:	e7fe      	b.n	8006bf8 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006bfa:	f001 fe5f 	bl	80088bc <vPortValidateInterruptPriority>
	__asm volatile
 8006bfe:	f3ef 8211 	mrs	r2, BASEPRI
 8006c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c06:	b672      	cpsid	i
 8006c08:	f383 8811 	msr	BASEPRI, r3
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	b662      	cpsie	i
 8006c16:	61ba      	str	r2, [r7, #24]
 8006c18:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006c1a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c22:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d02f      	beq.n	8006c8a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c34:	68b9      	ldr	r1, [r7, #8]
 8006c36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c38:	f000 f89e 	bl	8006d78 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3e:	1e5a      	subs	r2, r3, #1
 8006c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c42:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006c44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006c48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c4c:	d112      	bne.n	8006c74 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d016      	beq.n	8006c84 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c58:	3310      	adds	r3, #16
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f000 fe2e 	bl	80078bc <xTaskRemoveFromEventList>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00e      	beq.n	8006c84 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00b      	beq.n	8006c84 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	e007      	b.n	8006c84 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006c74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c78:	3301      	adds	r3, #1
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	b25a      	sxtb	r2, r3
 8006c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006c84:	2301      	movs	r3, #1
 8006c86:	637b      	str	r3, [r7, #52]	; 0x34
 8006c88:	e001      	b.n	8006c8e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	637b      	str	r3, [r7, #52]	; 0x34
 8006c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c90:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	f383 8811 	msr	BASEPRI, r3
}
 8006c98:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3738      	adds	r7, #56	; 0x38
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b086      	sub	sp, #24
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d10d      	bne.n	8006cde <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d14d      	bne.n	8006d66 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f000 ffdc 	bl	8007c8c <xTaskPriorityDisinherit>
 8006cd4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	609a      	str	r2, [r3, #8]
 8006cdc:	e043      	b.n	8006d66 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d119      	bne.n	8006d18 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6858      	ldr	r0, [r3, #4]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cec:	461a      	mov	r2, r3
 8006cee:	68b9      	ldr	r1, [r7, #8]
 8006cf0:	f002 f872 	bl	8008dd8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	685a      	ldr	r2, [r3, #4]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfc:	441a      	add	r2, r3
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	685a      	ldr	r2, [r3, #4]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d32b      	bcc.n	8006d66 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	605a      	str	r2, [r3, #4]
 8006d16:	e026      	b.n	8006d66 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	68d8      	ldr	r0, [r3, #12]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d20:	461a      	mov	r2, r3
 8006d22:	68b9      	ldr	r1, [r7, #8]
 8006d24:	f002 f858 	bl	8008dd8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	68da      	ldr	r2, [r3, #12]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d30:	425b      	negs	r3, r3
 8006d32:	441a      	add	r2, r3
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	68da      	ldr	r2, [r3, #12]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d207      	bcs.n	8006d54 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	689a      	ldr	r2, [r3, #8]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4c:	425b      	negs	r3, r3
 8006d4e:	441a      	add	r2, r3
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d105      	bne.n	8006d66 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d002      	beq.n	8006d66 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	3b01      	subs	r3, #1
 8006d64:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	1c5a      	adds	r2, r3, #1
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006d6e:	697b      	ldr	r3, [r7, #20]
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3718      	adds	r7, #24
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d018      	beq.n	8006dbc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	68da      	ldr	r2, [r3, #12]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d92:	441a      	add	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	68da      	ldr	r2, [r3, #12]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d303      	bcc.n	8006dac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	68d9      	ldr	r1, [r3, #12]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db4:	461a      	mov	r2, r3
 8006db6:	6838      	ldr	r0, [r7, #0]
 8006db8:	f002 f80e 	bl	8008dd8 <memcpy>
	}
}
 8006dbc:	bf00      	nop
 8006dbe:	3708      	adds	r7, #8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006dcc:	f001 fc8e 	bl	80086ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006dd6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006dd8:	e011      	b.n	8006dfe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d012      	beq.n	8006e08 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	3324      	adds	r3, #36	; 0x24
 8006de6:	4618      	mov	r0, r3
 8006de8:	f000 fd68 	bl	80078bc <xTaskRemoveFromEventList>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d001      	beq.n	8006df6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006df2:	f000 fe45 	bl	8007a80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006df6:	7bfb      	ldrb	r3, [r7, #15]
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	dce9      	bgt.n	8006dda <prvUnlockQueue+0x16>
 8006e06:	e000      	b.n	8006e0a <prvUnlockQueue+0x46>
					break;
 8006e08:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	22ff      	movs	r2, #255	; 0xff
 8006e0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006e12:	f001 fc9f 	bl	8008754 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006e16:	f001 fc69 	bl	80086ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e20:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e22:	e011      	b.n	8006e48 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	691b      	ldr	r3, [r3, #16]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d012      	beq.n	8006e52 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	3310      	adds	r3, #16
 8006e30:	4618      	mov	r0, r3
 8006e32:	f000 fd43 	bl	80078bc <xTaskRemoveFromEventList>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d001      	beq.n	8006e40 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006e3c:	f000 fe20 	bl	8007a80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006e40:	7bbb      	ldrb	r3, [r7, #14]
 8006e42:	3b01      	subs	r3, #1
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	dce9      	bgt.n	8006e24 <prvUnlockQueue+0x60>
 8006e50:	e000      	b.n	8006e54 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006e52:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	22ff      	movs	r2, #255	; 0xff
 8006e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006e5c:	f001 fc7a 	bl	8008754 <vPortExitCritical>
}
 8006e60:	bf00      	nop
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e70:	f001 fc3c 	bl	80086ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d102      	bne.n	8006e82 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	60fb      	str	r3, [r7, #12]
 8006e80:	e001      	b.n	8006e86 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006e82:	2300      	movs	r3, #0
 8006e84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e86:	f001 fc65 	bl	8008754 <vPortExitCritical>

	return xReturn;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3710      	adds	r7, #16
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e9c:	f001 fc26 	bl	80086ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d102      	bne.n	8006eb2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006eac:	2301      	movs	r3, #1
 8006eae:	60fb      	str	r3, [r7, #12]
 8006eb0:	e001      	b.n	8006eb6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006eb6:	f001 fc4d 	bl	8008754 <vPortExitCritical>

	return xReturn;
 8006eba:	68fb      	ldr	r3, [r7, #12]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ece:	2300      	movs	r3, #0
 8006ed0:	60fb      	str	r3, [r7, #12]
 8006ed2:	e014      	b.n	8006efe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006ed4:	4a0f      	ldr	r2, [pc, #60]	; (8006f14 <vQueueAddToRegistry+0x50>)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d10b      	bne.n	8006ef8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006ee0:	490c      	ldr	r1, [pc, #48]	; (8006f14 <vQueueAddToRegistry+0x50>)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	683a      	ldr	r2, [r7, #0]
 8006ee6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006eea:	4a0a      	ldr	r2, [pc, #40]	; (8006f14 <vQueueAddToRegistry+0x50>)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	4413      	add	r3, r2
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006ef6:	e006      	b.n	8006f06 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	3301      	adds	r3, #1
 8006efc:	60fb      	str	r3, [r7, #12]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2b07      	cmp	r3, #7
 8006f02:	d9e7      	bls.n	8006ed4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006f04:	bf00      	nop
 8006f06:	bf00      	nop
 8006f08:	3714      	adds	r7, #20
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	2000137c 	.word	0x2000137c

08006f18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b086      	sub	sp, #24
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006f28:	f001 fbe0 	bl	80086ec <vPortEnterCritical>
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f32:	b25b      	sxtb	r3, r3
 8006f34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f38:	d103      	bne.n	8006f42 <vQueueWaitForMessageRestricted+0x2a>
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f48:	b25b      	sxtb	r3, r3
 8006f4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f4e:	d103      	bne.n	8006f58 <vQueueWaitForMessageRestricted+0x40>
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f58:	f001 fbfc 	bl	8008754 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d106      	bne.n	8006f72 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	3324      	adds	r3, #36	; 0x24
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	68b9      	ldr	r1, [r7, #8]
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f000 fc77 	bl	8007860 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006f72:	6978      	ldr	r0, [r7, #20]
 8006f74:	f7ff ff26 	bl	8006dc4 <prvUnlockQueue>
	}
 8006f78:	bf00      	nop
 8006f7a:	3718      	adds	r7, #24
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b08e      	sub	sp, #56	; 0x38
 8006f84:	af04      	add	r7, sp, #16
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	607a      	str	r2, [r7, #4]
 8006f8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10c      	bne.n	8006fae <xTaskCreateStatic+0x2e>
	__asm volatile
 8006f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f98:	b672      	cpsid	i
 8006f9a:	f383 8811 	msr	BASEPRI, r3
 8006f9e:	f3bf 8f6f 	isb	sy
 8006fa2:	f3bf 8f4f 	dsb	sy
 8006fa6:	b662      	cpsie	i
 8006fa8:	623b      	str	r3, [r7, #32]
}
 8006faa:	bf00      	nop
 8006fac:	e7fe      	b.n	8006fac <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10c      	bne.n	8006fce <xTaskCreateStatic+0x4e>
	__asm volatile
 8006fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb8:	b672      	cpsid	i
 8006fba:	f383 8811 	msr	BASEPRI, r3
 8006fbe:	f3bf 8f6f 	isb	sy
 8006fc2:	f3bf 8f4f 	dsb	sy
 8006fc6:	b662      	cpsie	i
 8006fc8:	61fb      	str	r3, [r7, #28]
}
 8006fca:	bf00      	nop
 8006fcc:	e7fe      	b.n	8006fcc <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006fce:	23bc      	movs	r3, #188	; 0xbc
 8006fd0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	2bbc      	cmp	r3, #188	; 0xbc
 8006fd6:	d00c      	beq.n	8006ff2 <xTaskCreateStatic+0x72>
	__asm volatile
 8006fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fdc:	b672      	cpsid	i
 8006fde:	f383 8811 	msr	BASEPRI, r3
 8006fe2:	f3bf 8f6f 	isb	sy
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	b662      	cpsie	i
 8006fec:	61bb      	str	r3, [r7, #24]
}
 8006fee:	bf00      	nop
 8006ff0:	e7fe      	b.n	8006ff0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006ff2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d01e      	beq.n	8007038 <xTaskCreateStatic+0xb8>
 8006ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d01b      	beq.n	8007038 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007002:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007006:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007008:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800700a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700c:	2202      	movs	r2, #2
 800700e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007012:	2300      	movs	r3, #0
 8007014:	9303      	str	r3, [sp, #12]
 8007016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007018:	9302      	str	r3, [sp, #8]
 800701a:	f107 0314 	add.w	r3, r7, #20
 800701e:	9301      	str	r3, [sp, #4]
 8007020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007022:	9300      	str	r3, [sp, #0]
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	68b9      	ldr	r1, [r7, #8]
 800702a:	68f8      	ldr	r0, [r7, #12]
 800702c:	f000 f850 	bl	80070d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007030:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007032:	f000 f8f5 	bl	8007220 <prvAddNewTaskToReadyList>
 8007036:	e001      	b.n	800703c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8007038:	2300      	movs	r3, #0
 800703a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800703c:	697b      	ldr	r3, [r7, #20]
	}
 800703e:	4618      	mov	r0, r3
 8007040:	3728      	adds	r7, #40	; 0x28
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007046:	b580      	push	{r7, lr}
 8007048:	b08c      	sub	sp, #48	; 0x30
 800704a:	af04      	add	r7, sp, #16
 800704c:	60f8      	str	r0, [r7, #12]
 800704e:	60b9      	str	r1, [r7, #8]
 8007050:	603b      	str	r3, [r7, #0]
 8007052:	4613      	mov	r3, r2
 8007054:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007056:	88fb      	ldrh	r3, [r7, #6]
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	4618      	mov	r0, r3
 800705c:	f001 fc72 	bl	8008944 <pvPortMalloc>
 8007060:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00e      	beq.n	8007086 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007068:	20bc      	movs	r0, #188	; 0xbc
 800706a:	f001 fc6b 	bl	8008944 <pvPortMalloc>
 800706e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d003      	beq.n	800707e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	697a      	ldr	r2, [r7, #20]
 800707a:	631a      	str	r2, [r3, #48]	; 0x30
 800707c:	e005      	b.n	800708a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800707e:	6978      	ldr	r0, [r7, #20]
 8007080:	f001 fd2a 	bl	8008ad8 <vPortFree>
 8007084:	e001      	b.n	800708a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007086:	2300      	movs	r3, #0
 8007088:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d017      	beq.n	80070c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007098:	88fa      	ldrh	r2, [r7, #6]
 800709a:	2300      	movs	r3, #0
 800709c:	9303      	str	r3, [sp, #12]
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	9302      	str	r3, [sp, #8]
 80070a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a4:	9301      	str	r3, [sp, #4]
 80070a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a8:	9300      	str	r3, [sp, #0]
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	68b9      	ldr	r1, [r7, #8]
 80070ae:	68f8      	ldr	r0, [r7, #12]
 80070b0:	f000 f80e 	bl	80070d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070b4:	69f8      	ldr	r0, [r7, #28]
 80070b6:	f000 f8b3 	bl	8007220 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80070ba:	2301      	movs	r3, #1
 80070bc:	61bb      	str	r3, [r7, #24]
 80070be:	e002      	b.n	80070c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80070c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80070c6:	69bb      	ldr	r3, [r7, #24]
	}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3720      	adds	r7, #32
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b088      	sub	sp, #32
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]
 80070dc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80070de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	461a      	mov	r2, r3
 80070e8:	21a5      	movs	r1, #165	; 0xa5
 80070ea:	f001 fe83 	bl	8008df4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80070ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070f2:	6879      	ldr	r1, [r7, #4]
 80070f4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80070f8:	440b      	add	r3, r1
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	4413      	add	r3, r2
 80070fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	f023 0307 	bic.w	r3, r3, #7
 8007106:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	f003 0307 	and.w	r3, r3, #7
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00c      	beq.n	800712c <prvInitialiseNewTask+0x5c>
	__asm volatile
 8007112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007116:	b672      	cpsid	i
 8007118:	f383 8811 	msr	BASEPRI, r3
 800711c:	f3bf 8f6f 	isb	sy
 8007120:	f3bf 8f4f 	dsb	sy
 8007124:	b662      	cpsie	i
 8007126:	617b      	str	r3, [r7, #20]
}
 8007128:	bf00      	nop
 800712a:	e7fe      	b.n	800712a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d01f      	beq.n	8007172 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007132:	2300      	movs	r3, #0
 8007134:	61fb      	str	r3, [r7, #28]
 8007136:	e012      	b.n	800715e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007138:	68ba      	ldr	r2, [r7, #8]
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	4413      	add	r3, r2
 800713e:	7819      	ldrb	r1, [r3, #0]
 8007140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	4413      	add	r3, r2
 8007146:	3334      	adds	r3, #52	; 0x34
 8007148:	460a      	mov	r2, r1
 800714a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800714c:	68ba      	ldr	r2, [r7, #8]
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	4413      	add	r3, r2
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d006      	beq.n	8007166 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	3301      	adds	r3, #1
 800715c:	61fb      	str	r3, [r7, #28]
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	2b0f      	cmp	r3, #15
 8007162:	d9e9      	bls.n	8007138 <prvInitialiseNewTask+0x68>
 8007164:	e000      	b.n	8007168 <prvInitialiseNewTask+0x98>
			{
				break;
 8007166:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716a:	2200      	movs	r2, #0
 800716c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007170:	e003      	b.n	800717a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007174:	2200      	movs	r2, #0
 8007176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800717a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717c:	2b37      	cmp	r3, #55	; 0x37
 800717e:	d901      	bls.n	8007184 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007180:	2337      	movs	r3, #55	; 0x37
 8007182:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007186:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007188:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800718a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800718e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007192:	2200      	movs	r2, #0
 8007194:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007198:	3304      	adds	r3, #4
 800719a:	4618      	mov	r0, r3
 800719c:	f7ff f88a 	bl	80062b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80071a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a2:	3318      	adds	r3, #24
 80071a4:	4618      	mov	r0, r3
 80071a6:	f7ff f885 	bl	80062b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80071aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80071b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80071ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80071c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c2:	2200      	movs	r2, #0
 80071c4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80071c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ca:	2200      	movs	r2, #0
 80071cc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80071d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d2:	3354      	adds	r3, #84	; 0x54
 80071d4:	2260      	movs	r2, #96	; 0x60
 80071d6:	2100      	movs	r1, #0
 80071d8:	4618      	mov	r0, r3
 80071da:	f001 fe0b 	bl	8008df4 <memset>
 80071de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e0:	4a0c      	ldr	r2, [pc, #48]	; (8007214 <prvInitialiseNewTask+0x144>)
 80071e2:	659a      	str	r2, [r3, #88]	; 0x58
 80071e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e6:	4a0c      	ldr	r2, [pc, #48]	; (8007218 <prvInitialiseNewTask+0x148>)
 80071e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80071ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ec:	4a0b      	ldr	r2, [pc, #44]	; (800721c <prvInitialiseNewTask+0x14c>)
 80071ee:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80071f0:	683a      	ldr	r2, [r7, #0]
 80071f2:	68f9      	ldr	r1, [r7, #12]
 80071f4:	69b8      	ldr	r0, [r7, #24]
 80071f6:	f001 f96b 	bl	80084d0 <pxPortInitialiseStack>
 80071fa:	4602      	mov	r2, r0
 80071fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007202:	2b00      	cmp	r3, #0
 8007204:	d002      	beq.n	800720c <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800720a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800720c:	bf00      	nop
 800720e:	3720      	adds	r7, #32
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	080091f4 	.word	0x080091f4
 8007218:	08009214 	.word	0x08009214
 800721c:	080091d4 	.word	0x080091d4

08007220 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007228:	f001 fa60 	bl	80086ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800722c:	4b2d      	ldr	r3, [pc, #180]	; (80072e4 <prvAddNewTaskToReadyList+0xc4>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	3301      	adds	r3, #1
 8007232:	4a2c      	ldr	r2, [pc, #176]	; (80072e4 <prvAddNewTaskToReadyList+0xc4>)
 8007234:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007236:	4b2c      	ldr	r3, [pc, #176]	; (80072e8 <prvAddNewTaskToReadyList+0xc8>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d109      	bne.n	8007252 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800723e:	4a2a      	ldr	r2, [pc, #168]	; (80072e8 <prvAddNewTaskToReadyList+0xc8>)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007244:	4b27      	ldr	r3, [pc, #156]	; (80072e4 <prvAddNewTaskToReadyList+0xc4>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2b01      	cmp	r3, #1
 800724a:	d110      	bne.n	800726e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800724c:	f000 fc3c 	bl	8007ac8 <prvInitialiseTaskLists>
 8007250:	e00d      	b.n	800726e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007252:	4b26      	ldr	r3, [pc, #152]	; (80072ec <prvAddNewTaskToReadyList+0xcc>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d109      	bne.n	800726e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800725a:	4b23      	ldr	r3, [pc, #140]	; (80072e8 <prvAddNewTaskToReadyList+0xc8>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007264:	429a      	cmp	r2, r3
 8007266:	d802      	bhi.n	800726e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007268:	4a1f      	ldr	r2, [pc, #124]	; (80072e8 <prvAddNewTaskToReadyList+0xc8>)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800726e:	4b20      	ldr	r3, [pc, #128]	; (80072f0 <prvAddNewTaskToReadyList+0xd0>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	3301      	adds	r3, #1
 8007274:	4a1e      	ldr	r2, [pc, #120]	; (80072f0 <prvAddNewTaskToReadyList+0xd0>)
 8007276:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007278:	4b1d      	ldr	r3, [pc, #116]	; (80072f0 <prvAddNewTaskToReadyList+0xd0>)
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007284:	4b1b      	ldr	r3, [pc, #108]	; (80072f4 <prvAddNewTaskToReadyList+0xd4>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	429a      	cmp	r2, r3
 800728a:	d903      	bls.n	8007294 <prvAddNewTaskToReadyList+0x74>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007290:	4a18      	ldr	r2, [pc, #96]	; (80072f4 <prvAddNewTaskToReadyList+0xd4>)
 8007292:	6013      	str	r3, [r2, #0]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007298:	4613      	mov	r3, r2
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	4413      	add	r3, r2
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	4a15      	ldr	r2, [pc, #84]	; (80072f8 <prvAddNewTaskToReadyList+0xd8>)
 80072a2:	441a      	add	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	3304      	adds	r3, #4
 80072a8:	4619      	mov	r1, r3
 80072aa:	4610      	mov	r0, r2
 80072ac:	f7ff f80f 	bl	80062ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80072b0:	f001 fa50 	bl	8008754 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80072b4:	4b0d      	ldr	r3, [pc, #52]	; (80072ec <prvAddNewTaskToReadyList+0xcc>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00e      	beq.n	80072da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80072bc:	4b0a      	ldr	r3, [pc, #40]	; (80072e8 <prvAddNewTaskToReadyList+0xc8>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d207      	bcs.n	80072da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80072ca:	4b0c      	ldr	r3, [pc, #48]	; (80072fc <prvAddNewTaskToReadyList+0xdc>)
 80072cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072d0:	601a      	str	r2, [r3, #0]
 80072d2:	f3bf 8f4f 	dsb	sy
 80072d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072da:	bf00      	nop
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	20001890 	.word	0x20001890
 80072e8:	200013bc 	.word	0x200013bc
 80072ec:	2000189c 	.word	0x2000189c
 80072f0:	200018ac 	.word	0x200018ac
 80072f4:	20001898 	.word	0x20001898
 80072f8:	200013c0 	.word	0x200013c0
 80072fc:	e000ed04 	.word	0xe000ed04

08007300 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007308:	2300      	movs	r3, #0
 800730a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d019      	beq.n	8007346 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007312:	4b14      	ldr	r3, [pc, #80]	; (8007364 <vTaskDelay+0x64>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00c      	beq.n	8007334 <vTaskDelay+0x34>
	__asm volatile
 800731a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731e:	b672      	cpsid	i
 8007320:	f383 8811 	msr	BASEPRI, r3
 8007324:	f3bf 8f6f 	isb	sy
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	b662      	cpsie	i
 800732e:	60bb      	str	r3, [r7, #8]
}
 8007330:	bf00      	nop
 8007332:	e7fe      	b.n	8007332 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007334:	f000 f88e 	bl	8007454 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007338:	2100      	movs	r1, #0
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 fd18 	bl	8007d70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007340:	f000 f896 	bl	8007470 <xTaskResumeAll>
 8007344:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d107      	bne.n	800735c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800734c:	4b06      	ldr	r3, [pc, #24]	; (8007368 <vTaskDelay+0x68>)
 800734e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007352:	601a      	str	r2, [r3, #0]
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800735c:	bf00      	nop
 800735e:	3710      	adds	r7, #16
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}
 8007364:	200018b8 	.word	0x200018b8
 8007368:	e000ed04 	.word	0xe000ed04

0800736c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b08a      	sub	sp, #40	; 0x28
 8007370:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007372:	2300      	movs	r3, #0
 8007374:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007376:	2300      	movs	r3, #0
 8007378:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800737a:	463a      	mov	r2, r7
 800737c:	1d39      	adds	r1, r7, #4
 800737e:	f107 0308 	add.w	r3, r7, #8
 8007382:	4618      	mov	r0, r3
 8007384:	f7fe ff42 	bl	800620c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007388:	6839      	ldr	r1, [r7, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	68ba      	ldr	r2, [r7, #8]
 800738e:	9202      	str	r2, [sp, #8]
 8007390:	9301      	str	r3, [sp, #4]
 8007392:	2300      	movs	r3, #0
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	2300      	movs	r3, #0
 8007398:	460a      	mov	r2, r1
 800739a:	4926      	ldr	r1, [pc, #152]	; (8007434 <vTaskStartScheduler+0xc8>)
 800739c:	4826      	ldr	r0, [pc, #152]	; (8007438 <vTaskStartScheduler+0xcc>)
 800739e:	f7ff fdef 	bl	8006f80 <xTaskCreateStatic>
 80073a2:	4603      	mov	r3, r0
 80073a4:	4a25      	ldr	r2, [pc, #148]	; (800743c <vTaskStartScheduler+0xd0>)
 80073a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80073a8:	4b24      	ldr	r3, [pc, #144]	; (800743c <vTaskStartScheduler+0xd0>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d002      	beq.n	80073b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80073b0:	2301      	movs	r3, #1
 80073b2:	617b      	str	r3, [r7, #20]
 80073b4:	e001      	b.n	80073ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80073b6:	2300      	movs	r3, #0
 80073b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d102      	bne.n	80073c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80073c0:	f000 fd2a 	bl	8007e18 <xTimerCreateTimerTask>
 80073c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d11d      	bne.n	8007408 <vTaskStartScheduler+0x9c>
	__asm volatile
 80073cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d0:	b672      	cpsid	i
 80073d2:	f383 8811 	msr	BASEPRI, r3
 80073d6:	f3bf 8f6f 	isb	sy
 80073da:	f3bf 8f4f 	dsb	sy
 80073de:	b662      	cpsie	i
 80073e0:	613b      	str	r3, [r7, #16]
}
 80073e2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80073e4:	4b16      	ldr	r3, [pc, #88]	; (8007440 <vTaskStartScheduler+0xd4>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	3354      	adds	r3, #84	; 0x54
 80073ea:	4a16      	ldr	r2, [pc, #88]	; (8007444 <vTaskStartScheduler+0xd8>)
 80073ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80073ee:	4b16      	ldr	r3, [pc, #88]	; (8007448 <vTaskStartScheduler+0xdc>)
 80073f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80073f6:	4b15      	ldr	r3, [pc, #84]	; (800744c <vTaskStartScheduler+0xe0>)
 80073f8:	2201      	movs	r2, #1
 80073fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80073fc:	4b14      	ldr	r3, [pc, #80]	; (8007450 <vTaskStartScheduler+0xe4>)
 80073fe:	2200      	movs	r2, #0
 8007400:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007402:	f001 f8f5 	bl	80085f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007406:	e010      	b.n	800742a <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800740e:	d10c      	bne.n	800742a <vTaskStartScheduler+0xbe>
	__asm volatile
 8007410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007414:	b672      	cpsid	i
 8007416:	f383 8811 	msr	BASEPRI, r3
 800741a:	f3bf 8f6f 	isb	sy
 800741e:	f3bf 8f4f 	dsb	sy
 8007422:	b662      	cpsie	i
 8007424:	60fb      	str	r3, [r7, #12]
}
 8007426:	bf00      	nop
 8007428:	e7fe      	b.n	8007428 <vTaskStartScheduler+0xbc>
}
 800742a:	bf00      	nop
 800742c:	3718      	adds	r7, #24
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	08009100 	.word	0x08009100
 8007438:	08007a99 	.word	0x08007a99
 800743c:	200018b4 	.word	0x200018b4
 8007440:	200013bc 	.word	0x200013bc
 8007444:	20000014 	.word	0x20000014
 8007448:	200018b0 	.word	0x200018b0
 800744c:	2000189c 	.word	0x2000189c
 8007450:	20001894 	.word	0x20001894

08007454 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007454:	b480      	push	{r7}
 8007456:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007458:	4b04      	ldr	r3, [pc, #16]	; (800746c <vTaskSuspendAll+0x18>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	3301      	adds	r3, #1
 800745e:	4a03      	ldr	r2, [pc, #12]	; (800746c <vTaskSuspendAll+0x18>)
 8007460:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007462:	bf00      	nop
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr
 800746c:	200018b8 	.word	0x200018b8

08007470 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007476:	2300      	movs	r3, #0
 8007478:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800747a:	2300      	movs	r3, #0
 800747c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800747e:	4b43      	ldr	r3, [pc, #268]	; (800758c <xTaskResumeAll+0x11c>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d10c      	bne.n	80074a0 <xTaskResumeAll+0x30>
	__asm volatile
 8007486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748a:	b672      	cpsid	i
 800748c:	f383 8811 	msr	BASEPRI, r3
 8007490:	f3bf 8f6f 	isb	sy
 8007494:	f3bf 8f4f 	dsb	sy
 8007498:	b662      	cpsie	i
 800749a:	603b      	str	r3, [r7, #0]
}
 800749c:	bf00      	nop
 800749e:	e7fe      	b.n	800749e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80074a0:	f001 f924 	bl	80086ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80074a4:	4b39      	ldr	r3, [pc, #228]	; (800758c <xTaskResumeAll+0x11c>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	3b01      	subs	r3, #1
 80074aa:	4a38      	ldr	r2, [pc, #224]	; (800758c <xTaskResumeAll+0x11c>)
 80074ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074ae:	4b37      	ldr	r3, [pc, #220]	; (800758c <xTaskResumeAll+0x11c>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d162      	bne.n	800757c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80074b6:	4b36      	ldr	r3, [pc, #216]	; (8007590 <xTaskResumeAll+0x120>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d05e      	beq.n	800757c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074be:	e02f      	b.n	8007520 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074c0:	4b34      	ldr	r3, [pc, #208]	; (8007594 <xTaskResumeAll+0x124>)
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	3318      	adds	r3, #24
 80074cc:	4618      	mov	r0, r3
 80074ce:	f7fe ff5b 	bl	8006388 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	3304      	adds	r3, #4
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7fe ff56 	bl	8006388 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074e0:	4b2d      	ldr	r3, [pc, #180]	; (8007598 <xTaskResumeAll+0x128>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d903      	bls.n	80074f0 <xTaskResumeAll+0x80>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ec:	4a2a      	ldr	r2, [pc, #168]	; (8007598 <xTaskResumeAll+0x128>)
 80074ee:	6013      	str	r3, [r2, #0]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f4:	4613      	mov	r3, r2
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	4413      	add	r3, r2
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	4a27      	ldr	r2, [pc, #156]	; (800759c <xTaskResumeAll+0x12c>)
 80074fe:	441a      	add	r2, r3
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	3304      	adds	r3, #4
 8007504:	4619      	mov	r1, r3
 8007506:	4610      	mov	r0, r2
 8007508:	f7fe fee1 	bl	80062ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007510:	4b23      	ldr	r3, [pc, #140]	; (80075a0 <xTaskResumeAll+0x130>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007516:	429a      	cmp	r2, r3
 8007518:	d302      	bcc.n	8007520 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800751a:	4b22      	ldr	r3, [pc, #136]	; (80075a4 <xTaskResumeAll+0x134>)
 800751c:	2201      	movs	r2, #1
 800751e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007520:	4b1c      	ldr	r3, [pc, #112]	; (8007594 <xTaskResumeAll+0x124>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d1cb      	bne.n	80074c0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d001      	beq.n	8007532 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800752e:	f000 fb6f 	bl	8007c10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007532:	4b1d      	ldr	r3, [pc, #116]	; (80075a8 <xTaskResumeAll+0x138>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d010      	beq.n	8007560 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800753e:	f000 f847 	bl	80075d0 <xTaskIncrementTick>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d002      	beq.n	800754e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8007548:	4b16      	ldr	r3, [pc, #88]	; (80075a4 <xTaskResumeAll+0x134>)
 800754a:	2201      	movs	r2, #1
 800754c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	3b01      	subs	r3, #1
 8007552:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d1f1      	bne.n	800753e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800755a:	4b13      	ldr	r3, [pc, #76]	; (80075a8 <xTaskResumeAll+0x138>)
 800755c:	2200      	movs	r2, #0
 800755e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007560:	4b10      	ldr	r3, [pc, #64]	; (80075a4 <xTaskResumeAll+0x134>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d009      	beq.n	800757c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007568:	2301      	movs	r3, #1
 800756a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800756c:	4b0f      	ldr	r3, [pc, #60]	; (80075ac <xTaskResumeAll+0x13c>)
 800756e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007572:	601a      	str	r2, [r3, #0]
 8007574:	f3bf 8f4f 	dsb	sy
 8007578:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800757c:	f001 f8ea 	bl	8008754 <vPortExitCritical>

	return xAlreadyYielded;
 8007580:	68bb      	ldr	r3, [r7, #8]
}
 8007582:	4618      	mov	r0, r3
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	200018b8 	.word	0x200018b8
 8007590:	20001890 	.word	0x20001890
 8007594:	20001850 	.word	0x20001850
 8007598:	20001898 	.word	0x20001898
 800759c:	200013c0 	.word	0x200013c0
 80075a0:	200013bc 	.word	0x200013bc
 80075a4:	200018a4 	.word	0x200018a4
 80075a8:	200018a0 	.word	0x200018a0
 80075ac:	e000ed04 	.word	0xe000ed04

080075b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80075b6:	4b05      	ldr	r3, [pc, #20]	; (80075cc <xTaskGetTickCount+0x1c>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80075bc:	687b      	ldr	r3, [r7, #4]
}
 80075be:	4618      	mov	r0, r3
 80075c0:	370c      	adds	r7, #12
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop
 80075cc:	20001894 	.word	0x20001894

080075d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b086      	sub	sp, #24
 80075d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80075d6:	2300      	movs	r3, #0
 80075d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075da:	4b50      	ldr	r3, [pc, #320]	; (800771c <xTaskIncrementTick+0x14c>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	f040 808b 	bne.w	80076fa <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80075e4:	4b4e      	ldr	r3, [pc, #312]	; (8007720 <xTaskIncrementTick+0x150>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	3301      	adds	r3, #1
 80075ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80075ec:	4a4c      	ldr	r2, [pc, #304]	; (8007720 <xTaskIncrementTick+0x150>)
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d122      	bne.n	800763e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80075f8:	4b4a      	ldr	r3, [pc, #296]	; (8007724 <xTaskIncrementTick+0x154>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00c      	beq.n	800761c <xTaskIncrementTick+0x4c>
	__asm volatile
 8007602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007606:	b672      	cpsid	i
 8007608:	f383 8811 	msr	BASEPRI, r3
 800760c:	f3bf 8f6f 	isb	sy
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	b662      	cpsie	i
 8007616:	603b      	str	r3, [r7, #0]
}
 8007618:	bf00      	nop
 800761a:	e7fe      	b.n	800761a <xTaskIncrementTick+0x4a>
 800761c:	4b41      	ldr	r3, [pc, #260]	; (8007724 <xTaskIncrementTick+0x154>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	60fb      	str	r3, [r7, #12]
 8007622:	4b41      	ldr	r3, [pc, #260]	; (8007728 <xTaskIncrementTick+0x158>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a3f      	ldr	r2, [pc, #252]	; (8007724 <xTaskIncrementTick+0x154>)
 8007628:	6013      	str	r3, [r2, #0]
 800762a:	4a3f      	ldr	r2, [pc, #252]	; (8007728 <xTaskIncrementTick+0x158>)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6013      	str	r3, [r2, #0]
 8007630:	4b3e      	ldr	r3, [pc, #248]	; (800772c <xTaskIncrementTick+0x15c>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	3301      	adds	r3, #1
 8007636:	4a3d      	ldr	r2, [pc, #244]	; (800772c <xTaskIncrementTick+0x15c>)
 8007638:	6013      	str	r3, [r2, #0]
 800763a:	f000 fae9 	bl	8007c10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800763e:	4b3c      	ldr	r3, [pc, #240]	; (8007730 <xTaskIncrementTick+0x160>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	693a      	ldr	r2, [r7, #16]
 8007644:	429a      	cmp	r2, r3
 8007646:	d349      	bcc.n	80076dc <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007648:	4b36      	ldr	r3, [pc, #216]	; (8007724 <xTaskIncrementTick+0x154>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d104      	bne.n	800765c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007652:	4b37      	ldr	r3, [pc, #220]	; (8007730 <xTaskIncrementTick+0x160>)
 8007654:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007658:	601a      	str	r2, [r3, #0]
					break;
 800765a:	e03f      	b.n	80076dc <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800765c:	4b31      	ldr	r3, [pc, #196]	; (8007724 <xTaskIncrementTick+0x154>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800766c:	693a      	ldr	r2, [r7, #16]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	429a      	cmp	r2, r3
 8007672:	d203      	bcs.n	800767c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007674:	4a2e      	ldr	r2, [pc, #184]	; (8007730 <xTaskIncrementTick+0x160>)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800767a:	e02f      	b.n	80076dc <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	3304      	adds	r3, #4
 8007680:	4618      	mov	r0, r3
 8007682:	f7fe fe81 	bl	8006388 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800768a:	2b00      	cmp	r3, #0
 800768c:	d004      	beq.n	8007698 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	3318      	adds	r3, #24
 8007692:	4618      	mov	r0, r3
 8007694:	f7fe fe78 	bl	8006388 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800769c:	4b25      	ldr	r3, [pc, #148]	; (8007734 <xTaskIncrementTick+0x164>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d903      	bls.n	80076ac <xTaskIncrementTick+0xdc>
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a8:	4a22      	ldr	r2, [pc, #136]	; (8007734 <xTaskIncrementTick+0x164>)
 80076aa:	6013      	str	r3, [r2, #0]
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b0:	4613      	mov	r3, r2
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	4413      	add	r3, r2
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	4a1f      	ldr	r2, [pc, #124]	; (8007738 <xTaskIncrementTick+0x168>)
 80076ba:	441a      	add	r2, r3
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	3304      	adds	r3, #4
 80076c0:	4619      	mov	r1, r3
 80076c2:	4610      	mov	r0, r2
 80076c4:	f7fe fe03 	bl	80062ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076cc:	4b1b      	ldr	r3, [pc, #108]	; (800773c <xTaskIncrementTick+0x16c>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d3b8      	bcc.n	8007648 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80076d6:	2301      	movs	r3, #1
 80076d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076da:	e7b5      	b.n	8007648 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80076dc:	4b17      	ldr	r3, [pc, #92]	; (800773c <xTaskIncrementTick+0x16c>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076e2:	4915      	ldr	r1, [pc, #84]	; (8007738 <xTaskIncrementTick+0x168>)
 80076e4:	4613      	mov	r3, r2
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	4413      	add	r3, r2
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	440b      	add	r3, r1
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d907      	bls.n	8007704 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80076f4:	2301      	movs	r3, #1
 80076f6:	617b      	str	r3, [r7, #20]
 80076f8:	e004      	b.n	8007704 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80076fa:	4b11      	ldr	r3, [pc, #68]	; (8007740 <xTaskIncrementTick+0x170>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	3301      	adds	r3, #1
 8007700:	4a0f      	ldr	r2, [pc, #60]	; (8007740 <xTaskIncrementTick+0x170>)
 8007702:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007704:	4b0f      	ldr	r3, [pc, #60]	; (8007744 <xTaskIncrementTick+0x174>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d001      	beq.n	8007710 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800770c:	2301      	movs	r3, #1
 800770e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007710:	697b      	ldr	r3, [r7, #20]
}
 8007712:	4618      	mov	r0, r3
 8007714:	3718      	adds	r7, #24
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	200018b8 	.word	0x200018b8
 8007720:	20001894 	.word	0x20001894
 8007724:	20001848 	.word	0x20001848
 8007728:	2000184c 	.word	0x2000184c
 800772c:	200018a8 	.word	0x200018a8
 8007730:	200018b0 	.word	0x200018b0
 8007734:	20001898 	.word	0x20001898
 8007738:	200013c0 	.word	0x200013c0
 800773c:	200013bc 	.word	0x200013bc
 8007740:	200018a0 	.word	0x200018a0
 8007744:	200018a4 	.word	0x200018a4

08007748 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800774e:	4b2b      	ldr	r3, [pc, #172]	; (80077fc <vTaskSwitchContext+0xb4>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d003      	beq.n	800775e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007756:	4b2a      	ldr	r3, [pc, #168]	; (8007800 <vTaskSwitchContext+0xb8>)
 8007758:	2201      	movs	r2, #1
 800775a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800775c:	e048      	b.n	80077f0 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800775e:	4b28      	ldr	r3, [pc, #160]	; (8007800 <vTaskSwitchContext+0xb8>)
 8007760:	2200      	movs	r2, #0
 8007762:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007764:	4b27      	ldr	r3, [pc, #156]	; (8007804 <vTaskSwitchContext+0xbc>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	60fb      	str	r3, [r7, #12]
 800776a:	e012      	b.n	8007792 <vTaskSwitchContext+0x4a>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d10c      	bne.n	800778c <vTaskSwitchContext+0x44>
	__asm volatile
 8007772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007776:	b672      	cpsid	i
 8007778:	f383 8811 	msr	BASEPRI, r3
 800777c:	f3bf 8f6f 	isb	sy
 8007780:	f3bf 8f4f 	dsb	sy
 8007784:	b662      	cpsie	i
 8007786:	607b      	str	r3, [r7, #4]
}
 8007788:	bf00      	nop
 800778a:	e7fe      	b.n	800778a <vTaskSwitchContext+0x42>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	3b01      	subs	r3, #1
 8007790:	60fb      	str	r3, [r7, #12]
 8007792:	491d      	ldr	r1, [pc, #116]	; (8007808 <vTaskSwitchContext+0xc0>)
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	4613      	mov	r3, r2
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	4413      	add	r3, r2
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	440b      	add	r3, r1
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d0e2      	beq.n	800776c <vTaskSwitchContext+0x24>
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	4613      	mov	r3, r2
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	4413      	add	r3, r2
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	4a15      	ldr	r2, [pc, #84]	; (8007808 <vTaskSwitchContext+0xc0>)
 80077b2:	4413      	add	r3, r2
 80077b4:	60bb      	str	r3, [r7, #8]
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	685a      	ldr	r2, [r3, #4]
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	605a      	str	r2, [r3, #4]
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	685a      	ldr	r2, [r3, #4]
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	3308      	adds	r3, #8
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d104      	bne.n	80077d6 <vTaskSwitchContext+0x8e>
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	685a      	ldr	r2, [r3, #4]
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	605a      	str	r2, [r3, #4]
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	4a0b      	ldr	r2, [pc, #44]	; (800780c <vTaskSwitchContext+0xc4>)
 80077de:	6013      	str	r3, [r2, #0]
 80077e0:	4a08      	ldr	r2, [pc, #32]	; (8007804 <vTaskSwitchContext+0xbc>)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80077e6:	4b09      	ldr	r3, [pc, #36]	; (800780c <vTaskSwitchContext+0xc4>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	3354      	adds	r3, #84	; 0x54
 80077ec:	4a08      	ldr	r2, [pc, #32]	; (8007810 <vTaskSwitchContext+0xc8>)
 80077ee:	6013      	str	r3, [r2, #0]
}
 80077f0:	bf00      	nop
 80077f2:	3714      	adds	r7, #20
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr
 80077fc:	200018b8 	.word	0x200018b8
 8007800:	200018a4 	.word	0x200018a4
 8007804:	20001898 	.word	0x20001898
 8007808:	200013c0 	.word	0x200013c0
 800780c:	200013bc 	.word	0x200013bc
 8007810:	20000014 	.word	0x20000014

08007814 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10c      	bne.n	800783e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8007824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007828:	b672      	cpsid	i
 800782a:	f383 8811 	msr	BASEPRI, r3
 800782e:	f3bf 8f6f 	isb	sy
 8007832:	f3bf 8f4f 	dsb	sy
 8007836:	b662      	cpsie	i
 8007838:	60fb      	str	r3, [r7, #12]
}
 800783a:	bf00      	nop
 800783c:	e7fe      	b.n	800783c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800783e:	4b07      	ldr	r3, [pc, #28]	; (800785c <vTaskPlaceOnEventList+0x48>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	3318      	adds	r3, #24
 8007844:	4619      	mov	r1, r3
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f7fe fd65 	bl	8006316 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800784c:	2101      	movs	r1, #1
 800784e:	6838      	ldr	r0, [r7, #0]
 8007850:	f000 fa8e 	bl	8007d70 <prvAddCurrentTaskToDelayedList>
}
 8007854:	bf00      	nop
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	200013bc 	.word	0x200013bc

08007860 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007860:	b580      	push	{r7, lr}
 8007862:	b086      	sub	sp, #24
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10c      	bne.n	800788c <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8007872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007876:	b672      	cpsid	i
 8007878:	f383 8811 	msr	BASEPRI, r3
 800787c:	f3bf 8f6f 	isb	sy
 8007880:	f3bf 8f4f 	dsb	sy
 8007884:	b662      	cpsie	i
 8007886:	617b      	str	r3, [r7, #20]
}
 8007888:	bf00      	nop
 800788a:	e7fe      	b.n	800788a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800788c:	4b0a      	ldr	r3, [pc, #40]	; (80078b8 <vTaskPlaceOnEventListRestricted+0x58>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	3318      	adds	r3, #24
 8007892:	4619      	mov	r1, r3
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f7fe fd1a 	bl	80062ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d002      	beq.n	80078a6 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80078a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078a4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80078a6:	6879      	ldr	r1, [r7, #4]
 80078a8:	68b8      	ldr	r0, [r7, #8]
 80078aa:	f000 fa61 	bl	8007d70 <prvAddCurrentTaskToDelayedList>
	}
 80078ae:	bf00      	nop
 80078b0:	3718      	adds	r7, #24
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	200013bc 	.word	0x200013bc

080078bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b086      	sub	sp, #24
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d10c      	bne.n	80078ec <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80078d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d6:	b672      	cpsid	i
 80078d8:	f383 8811 	msr	BASEPRI, r3
 80078dc:	f3bf 8f6f 	isb	sy
 80078e0:	f3bf 8f4f 	dsb	sy
 80078e4:	b662      	cpsie	i
 80078e6:	60fb      	str	r3, [r7, #12]
}
 80078e8:	bf00      	nop
 80078ea:	e7fe      	b.n	80078ea <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	3318      	adds	r3, #24
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7fe fd49 	bl	8006388 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078f6:	4b1e      	ldr	r3, [pc, #120]	; (8007970 <xTaskRemoveFromEventList+0xb4>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d11d      	bne.n	800793a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	3304      	adds	r3, #4
 8007902:	4618      	mov	r0, r3
 8007904:	f7fe fd40 	bl	8006388 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800790c:	4b19      	ldr	r3, [pc, #100]	; (8007974 <xTaskRemoveFromEventList+0xb8>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	429a      	cmp	r2, r3
 8007912:	d903      	bls.n	800791c <xTaskRemoveFromEventList+0x60>
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007918:	4a16      	ldr	r2, [pc, #88]	; (8007974 <xTaskRemoveFromEventList+0xb8>)
 800791a:	6013      	str	r3, [r2, #0]
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007920:	4613      	mov	r3, r2
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	4413      	add	r3, r2
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	4a13      	ldr	r2, [pc, #76]	; (8007978 <xTaskRemoveFromEventList+0xbc>)
 800792a:	441a      	add	r2, r3
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	3304      	adds	r3, #4
 8007930:	4619      	mov	r1, r3
 8007932:	4610      	mov	r0, r2
 8007934:	f7fe fccb 	bl	80062ce <vListInsertEnd>
 8007938:	e005      	b.n	8007946 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	3318      	adds	r3, #24
 800793e:	4619      	mov	r1, r3
 8007940:	480e      	ldr	r0, [pc, #56]	; (800797c <xTaskRemoveFromEventList+0xc0>)
 8007942:	f7fe fcc4 	bl	80062ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794a:	4b0d      	ldr	r3, [pc, #52]	; (8007980 <xTaskRemoveFromEventList+0xc4>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007950:	429a      	cmp	r2, r3
 8007952:	d905      	bls.n	8007960 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007954:	2301      	movs	r3, #1
 8007956:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007958:	4b0a      	ldr	r3, [pc, #40]	; (8007984 <xTaskRemoveFromEventList+0xc8>)
 800795a:	2201      	movs	r2, #1
 800795c:	601a      	str	r2, [r3, #0]
 800795e:	e001      	b.n	8007964 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8007960:	2300      	movs	r3, #0
 8007962:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007964:	697b      	ldr	r3, [r7, #20]
}
 8007966:	4618      	mov	r0, r3
 8007968:	3718      	adds	r7, #24
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	200018b8 	.word	0x200018b8
 8007974:	20001898 	.word	0x20001898
 8007978:	200013c0 	.word	0x200013c0
 800797c:	20001850 	.word	0x20001850
 8007980:	200013bc 	.word	0x200013bc
 8007984:	200018a4 	.word	0x200018a4

08007988 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007990:	4b06      	ldr	r3, [pc, #24]	; (80079ac <vTaskInternalSetTimeOutState+0x24>)
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007998:	4b05      	ldr	r3, [pc, #20]	; (80079b0 <vTaskInternalSetTimeOutState+0x28>)
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	605a      	str	r2, [r3, #4]
}
 80079a0:	bf00      	nop
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr
 80079ac:	200018a8 	.word	0x200018a8
 80079b0:	20001894 	.word	0x20001894

080079b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b088      	sub	sp, #32
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d10c      	bne.n	80079de <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80079c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c8:	b672      	cpsid	i
 80079ca:	f383 8811 	msr	BASEPRI, r3
 80079ce:	f3bf 8f6f 	isb	sy
 80079d2:	f3bf 8f4f 	dsb	sy
 80079d6:	b662      	cpsie	i
 80079d8:	613b      	str	r3, [r7, #16]
}
 80079da:	bf00      	nop
 80079dc:	e7fe      	b.n	80079dc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d10c      	bne.n	80079fe <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80079e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e8:	b672      	cpsid	i
 80079ea:	f383 8811 	msr	BASEPRI, r3
 80079ee:	f3bf 8f6f 	isb	sy
 80079f2:	f3bf 8f4f 	dsb	sy
 80079f6:	b662      	cpsie	i
 80079f8:	60fb      	str	r3, [r7, #12]
}
 80079fa:	bf00      	nop
 80079fc:	e7fe      	b.n	80079fc <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80079fe:	f000 fe75 	bl	80086ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007a02:	4b1d      	ldr	r3, [pc, #116]	; (8007a78 <xTaskCheckForTimeOut+0xc4>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	69ba      	ldr	r2, [r7, #24]
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a1a:	d102      	bne.n	8007a22 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	61fb      	str	r3, [r7, #28]
 8007a20:	e023      	b.n	8007a6a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	4b15      	ldr	r3, [pc, #84]	; (8007a7c <xTaskCheckForTimeOut+0xc8>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d007      	beq.n	8007a3e <xTaskCheckForTimeOut+0x8a>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	69ba      	ldr	r2, [r7, #24]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d302      	bcc.n	8007a3e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	61fb      	str	r3, [r7, #28]
 8007a3c:	e015      	b.n	8007a6a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d20b      	bcs.n	8007a60 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	1ad2      	subs	r2, r2, r3
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f7ff ff97 	bl	8007988 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	61fb      	str	r3, [r7, #28]
 8007a5e:	e004      	b.n	8007a6a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	2200      	movs	r2, #0
 8007a64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a66:	2301      	movs	r3, #1
 8007a68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a6a:	f000 fe73 	bl	8008754 <vPortExitCritical>

	return xReturn;
 8007a6e:	69fb      	ldr	r3, [r7, #28]
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3720      	adds	r7, #32
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	20001894 	.word	0x20001894
 8007a7c:	200018a8 	.word	0x200018a8

08007a80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a80:	b480      	push	{r7}
 8007a82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a84:	4b03      	ldr	r3, [pc, #12]	; (8007a94 <vTaskMissedYield+0x14>)
 8007a86:	2201      	movs	r2, #1
 8007a88:	601a      	str	r2, [r3, #0]
}
 8007a8a:	bf00      	nop
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr
 8007a94:	200018a4 	.word	0x200018a4

08007a98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007aa0:	f000 f852 	bl	8007b48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007aa4:	4b06      	ldr	r3, [pc, #24]	; (8007ac0 <prvIdleTask+0x28>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d9f9      	bls.n	8007aa0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007aac:	4b05      	ldr	r3, [pc, #20]	; (8007ac4 <prvIdleTask+0x2c>)
 8007aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ab2:	601a      	str	r2, [r3, #0]
 8007ab4:	f3bf 8f4f 	dsb	sy
 8007ab8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007abc:	e7f0      	b.n	8007aa0 <prvIdleTask+0x8>
 8007abe:	bf00      	nop
 8007ac0:	200013c0 	.word	0x200013c0
 8007ac4:	e000ed04 	.word	0xe000ed04

08007ac8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ace:	2300      	movs	r3, #0
 8007ad0:	607b      	str	r3, [r7, #4]
 8007ad2:	e00c      	b.n	8007aee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	4413      	add	r3, r2
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	4a12      	ldr	r2, [pc, #72]	; (8007b28 <prvInitialiseTaskLists+0x60>)
 8007ae0:	4413      	add	r3, r2
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f7fe fbc6 	bl	8006274 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	3301      	adds	r3, #1
 8007aec:	607b      	str	r3, [r7, #4]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2b37      	cmp	r3, #55	; 0x37
 8007af2:	d9ef      	bls.n	8007ad4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007af4:	480d      	ldr	r0, [pc, #52]	; (8007b2c <prvInitialiseTaskLists+0x64>)
 8007af6:	f7fe fbbd 	bl	8006274 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007afa:	480d      	ldr	r0, [pc, #52]	; (8007b30 <prvInitialiseTaskLists+0x68>)
 8007afc:	f7fe fbba 	bl	8006274 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007b00:	480c      	ldr	r0, [pc, #48]	; (8007b34 <prvInitialiseTaskLists+0x6c>)
 8007b02:	f7fe fbb7 	bl	8006274 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007b06:	480c      	ldr	r0, [pc, #48]	; (8007b38 <prvInitialiseTaskLists+0x70>)
 8007b08:	f7fe fbb4 	bl	8006274 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b0c:	480b      	ldr	r0, [pc, #44]	; (8007b3c <prvInitialiseTaskLists+0x74>)
 8007b0e:	f7fe fbb1 	bl	8006274 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b12:	4b0b      	ldr	r3, [pc, #44]	; (8007b40 <prvInitialiseTaskLists+0x78>)
 8007b14:	4a05      	ldr	r2, [pc, #20]	; (8007b2c <prvInitialiseTaskLists+0x64>)
 8007b16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b18:	4b0a      	ldr	r3, [pc, #40]	; (8007b44 <prvInitialiseTaskLists+0x7c>)
 8007b1a:	4a05      	ldr	r2, [pc, #20]	; (8007b30 <prvInitialiseTaskLists+0x68>)
 8007b1c:	601a      	str	r2, [r3, #0]
}
 8007b1e:	bf00      	nop
 8007b20:	3708      	adds	r7, #8
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	200013c0 	.word	0x200013c0
 8007b2c:	20001820 	.word	0x20001820
 8007b30:	20001834 	.word	0x20001834
 8007b34:	20001850 	.word	0x20001850
 8007b38:	20001864 	.word	0x20001864
 8007b3c:	2000187c 	.word	0x2000187c
 8007b40:	20001848 	.word	0x20001848
 8007b44:	2000184c 	.word	0x2000184c

08007b48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b4e:	e019      	b.n	8007b84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b50:	f000 fdcc 	bl	80086ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b54:	4b10      	ldr	r3, [pc, #64]	; (8007b98 <prvCheckTasksWaitingTermination+0x50>)
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	3304      	adds	r3, #4
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7fe fc11 	bl	8006388 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b66:	4b0d      	ldr	r3, [pc, #52]	; (8007b9c <prvCheckTasksWaitingTermination+0x54>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	4a0b      	ldr	r2, [pc, #44]	; (8007b9c <prvCheckTasksWaitingTermination+0x54>)
 8007b6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b70:	4b0b      	ldr	r3, [pc, #44]	; (8007ba0 <prvCheckTasksWaitingTermination+0x58>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	3b01      	subs	r3, #1
 8007b76:	4a0a      	ldr	r2, [pc, #40]	; (8007ba0 <prvCheckTasksWaitingTermination+0x58>)
 8007b78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b7a:	f000 fdeb 	bl	8008754 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 f810 	bl	8007ba4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b84:	4b06      	ldr	r3, [pc, #24]	; (8007ba0 <prvCheckTasksWaitingTermination+0x58>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d1e1      	bne.n	8007b50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b8c:	bf00      	nop
 8007b8e:	bf00      	nop
 8007b90:	3708      	adds	r7, #8
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	20001864 	.word	0x20001864
 8007b9c:	20001890 	.word	0x20001890
 8007ba0:	20001878 	.word	0x20001878

08007ba4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	3354      	adds	r3, #84	; 0x54
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f001 f935 	bl	8008e20 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d108      	bne.n	8007bd2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f000 ff87 	bl	8008ad8 <vPortFree>
				vPortFree( pxTCB );
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 ff84 	bl	8008ad8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007bd0:	e01a      	b.n	8007c08 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d103      	bne.n	8007be4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 ff7b 	bl	8008ad8 <vPortFree>
	}
 8007be2:	e011      	b.n	8007c08 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007bea:	2b02      	cmp	r3, #2
 8007bec:	d00c      	beq.n	8007c08 <prvDeleteTCB+0x64>
	__asm volatile
 8007bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf2:	b672      	cpsid	i
 8007bf4:	f383 8811 	msr	BASEPRI, r3
 8007bf8:	f3bf 8f6f 	isb	sy
 8007bfc:	f3bf 8f4f 	dsb	sy
 8007c00:	b662      	cpsie	i
 8007c02:	60fb      	str	r3, [r7, #12]
}
 8007c04:	bf00      	nop
 8007c06:	e7fe      	b.n	8007c06 <prvDeleteTCB+0x62>
	}
 8007c08:	bf00      	nop
 8007c0a:	3710      	adds	r7, #16
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c16:	4b0c      	ldr	r3, [pc, #48]	; (8007c48 <prvResetNextTaskUnblockTime+0x38>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d104      	bne.n	8007c2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c20:	4b0a      	ldr	r3, [pc, #40]	; (8007c4c <prvResetNextTaskUnblockTime+0x3c>)
 8007c22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c28:	e008      	b.n	8007c3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c2a:	4b07      	ldr	r3, [pc, #28]	; (8007c48 <prvResetNextTaskUnblockTime+0x38>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	4a04      	ldr	r2, [pc, #16]	; (8007c4c <prvResetNextTaskUnblockTime+0x3c>)
 8007c3a:	6013      	str	r3, [r2, #0]
}
 8007c3c:	bf00      	nop
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr
 8007c48:	20001848 	.word	0x20001848
 8007c4c:	200018b0 	.word	0x200018b0

08007c50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c56:	4b0b      	ldr	r3, [pc, #44]	; (8007c84 <xTaskGetSchedulerState+0x34>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d102      	bne.n	8007c64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	607b      	str	r3, [r7, #4]
 8007c62:	e008      	b.n	8007c76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c64:	4b08      	ldr	r3, [pc, #32]	; (8007c88 <xTaskGetSchedulerState+0x38>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d102      	bne.n	8007c72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c6c:	2302      	movs	r3, #2
 8007c6e:	607b      	str	r3, [r7, #4]
 8007c70:	e001      	b.n	8007c76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c72:	2300      	movs	r3, #0
 8007c74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c76:	687b      	ldr	r3, [r7, #4]
	}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr
 8007c84:	2000189c 	.word	0x2000189c
 8007c88:	200018b8 	.word	0x200018b8

08007c8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b086      	sub	sp, #24
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d05a      	beq.n	8007d58 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007ca2:	4b30      	ldr	r3, [pc, #192]	; (8007d64 <xTaskPriorityDisinherit+0xd8>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	693a      	ldr	r2, [r7, #16]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d00c      	beq.n	8007cc6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8007cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb0:	b672      	cpsid	i
 8007cb2:	f383 8811 	msr	BASEPRI, r3
 8007cb6:	f3bf 8f6f 	isb	sy
 8007cba:	f3bf 8f4f 	dsb	sy
 8007cbe:	b662      	cpsie	i
 8007cc0:	60fb      	str	r3, [r7, #12]
}
 8007cc2:	bf00      	nop
 8007cc4:	e7fe      	b.n	8007cc4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d10c      	bne.n	8007ce8 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8007cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd2:	b672      	cpsid	i
 8007cd4:	f383 8811 	msr	BASEPRI, r3
 8007cd8:	f3bf 8f6f 	isb	sy
 8007cdc:	f3bf 8f4f 	dsb	sy
 8007ce0:	b662      	cpsie	i
 8007ce2:	60bb      	str	r3, [r7, #8]
}
 8007ce4:	bf00      	nop
 8007ce6:	e7fe      	b.n	8007ce6 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cec:	1e5a      	subs	r2, r3, #1
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d02c      	beq.n	8007d58 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d128      	bne.n	8007d58 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	3304      	adds	r3, #4
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7fe fb3c 	bl	8006388 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d28:	4b0f      	ldr	r3, [pc, #60]	; (8007d68 <xTaskPriorityDisinherit+0xdc>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d903      	bls.n	8007d38 <xTaskPriorityDisinherit+0xac>
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d34:	4a0c      	ldr	r2, [pc, #48]	; (8007d68 <xTaskPriorityDisinherit+0xdc>)
 8007d36:	6013      	str	r3, [r2, #0]
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	4413      	add	r3, r2
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	4a09      	ldr	r2, [pc, #36]	; (8007d6c <xTaskPriorityDisinherit+0xe0>)
 8007d46:	441a      	add	r2, r3
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	3304      	adds	r3, #4
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	4610      	mov	r0, r2
 8007d50:	f7fe fabd 	bl	80062ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007d54:	2301      	movs	r3, #1
 8007d56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d58:	697b      	ldr	r3, [r7, #20]
	}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3718      	adds	r7, #24
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	200013bc 	.word	0x200013bc
 8007d68:	20001898 	.word	0x20001898
 8007d6c:	200013c0 	.word	0x200013c0

08007d70 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d7a:	4b21      	ldr	r3, [pc, #132]	; (8007e00 <prvAddCurrentTaskToDelayedList+0x90>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d80:	4b20      	ldr	r3, [pc, #128]	; (8007e04 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	3304      	adds	r3, #4
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7fe fafe 	bl	8006388 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d92:	d10a      	bne.n	8007daa <prvAddCurrentTaskToDelayedList+0x3a>
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d007      	beq.n	8007daa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d9a:	4b1a      	ldr	r3, [pc, #104]	; (8007e04 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	3304      	adds	r3, #4
 8007da0:	4619      	mov	r1, r3
 8007da2:	4819      	ldr	r0, [pc, #100]	; (8007e08 <prvAddCurrentTaskToDelayedList+0x98>)
 8007da4:	f7fe fa93 	bl	80062ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007da8:	e026      	b.n	8007df8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	4413      	add	r3, r2
 8007db0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007db2:	4b14      	ldr	r3, [pc, #80]	; (8007e04 <prvAddCurrentTaskToDelayedList+0x94>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	68ba      	ldr	r2, [r7, #8]
 8007db8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007dba:	68ba      	ldr	r2, [r7, #8]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d209      	bcs.n	8007dd6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dc2:	4b12      	ldr	r3, [pc, #72]	; (8007e0c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	4b0f      	ldr	r3, [pc, #60]	; (8007e04 <prvAddCurrentTaskToDelayedList+0x94>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	3304      	adds	r3, #4
 8007dcc:	4619      	mov	r1, r3
 8007dce:	4610      	mov	r0, r2
 8007dd0:	f7fe faa1 	bl	8006316 <vListInsert>
}
 8007dd4:	e010      	b.n	8007df8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dd6:	4b0e      	ldr	r3, [pc, #56]	; (8007e10 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	4b0a      	ldr	r3, [pc, #40]	; (8007e04 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	3304      	adds	r3, #4
 8007de0:	4619      	mov	r1, r3
 8007de2:	4610      	mov	r0, r2
 8007de4:	f7fe fa97 	bl	8006316 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007de8:	4b0a      	ldr	r3, [pc, #40]	; (8007e14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	68ba      	ldr	r2, [r7, #8]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d202      	bcs.n	8007df8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007df2:	4a08      	ldr	r2, [pc, #32]	; (8007e14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	6013      	str	r3, [r2, #0]
}
 8007df8:	bf00      	nop
 8007dfa:	3710      	adds	r7, #16
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	20001894 	.word	0x20001894
 8007e04:	200013bc 	.word	0x200013bc
 8007e08:	2000187c 	.word	0x2000187c
 8007e0c:	2000184c 	.word	0x2000184c
 8007e10:	20001848 	.word	0x20001848
 8007e14:	200018b0 	.word	0x200018b0

08007e18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b08a      	sub	sp, #40	; 0x28
 8007e1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007e22:	f000 fb15 	bl	8008450 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007e26:	4b1d      	ldr	r3, [pc, #116]	; (8007e9c <xTimerCreateTimerTask+0x84>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d021      	beq.n	8007e72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007e32:	2300      	movs	r3, #0
 8007e34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007e36:	1d3a      	adds	r2, r7, #4
 8007e38:	f107 0108 	add.w	r1, r7, #8
 8007e3c:	f107 030c 	add.w	r3, r7, #12
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7fe f9fd 	bl	8006240 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007e46:	6879      	ldr	r1, [r7, #4]
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	68fa      	ldr	r2, [r7, #12]
 8007e4c:	9202      	str	r2, [sp, #8]
 8007e4e:	9301      	str	r3, [sp, #4]
 8007e50:	2302      	movs	r3, #2
 8007e52:	9300      	str	r3, [sp, #0]
 8007e54:	2300      	movs	r3, #0
 8007e56:	460a      	mov	r2, r1
 8007e58:	4911      	ldr	r1, [pc, #68]	; (8007ea0 <xTimerCreateTimerTask+0x88>)
 8007e5a:	4812      	ldr	r0, [pc, #72]	; (8007ea4 <xTimerCreateTimerTask+0x8c>)
 8007e5c:	f7ff f890 	bl	8006f80 <xTaskCreateStatic>
 8007e60:	4603      	mov	r3, r0
 8007e62:	4a11      	ldr	r2, [pc, #68]	; (8007ea8 <xTimerCreateTimerTask+0x90>)
 8007e64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007e66:	4b10      	ldr	r3, [pc, #64]	; (8007ea8 <xTimerCreateTimerTask+0x90>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d001      	beq.n	8007e72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d10c      	bne.n	8007e92 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8007e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e7c:	b672      	cpsid	i
 8007e7e:	f383 8811 	msr	BASEPRI, r3
 8007e82:	f3bf 8f6f 	isb	sy
 8007e86:	f3bf 8f4f 	dsb	sy
 8007e8a:	b662      	cpsie	i
 8007e8c:	613b      	str	r3, [r7, #16]
}
 8007e8e:	bf00      	nop
 8007e90:	e7fe      	b.n	8007e90 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8007e92:	697b      	ldr	r3, [r7, #20]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3718      	adds	r7, #24
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	200018ec 	.word	0x200018ec
 8007ea0:	08009108 	.word	0x08009108
 8007ea4:	08007fe9 	.word	0x08007fe9
 8007ea8:	200018f0 	.word	0x200018f0

08007eac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b08a      	sub	sp, #40	; 0x28
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]
 8007eb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d10c      	bne.n	8007ede <xTimerGenericCommand+0x32>
	__asm volatile
 8007ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec8:	b672      	cpsid	i
 8007eca:	f383 8811 	msr	BASEPRI, r3
 8007ece:	f3bf 8f6f 	isb	sy
 8007ed2:	f3bf 8f4f 	dsb	sy
 8007ed6:	b662      	cpsie	i
 8007ed8:	623b      	str	r3, [r7, #32]
}
 8007eda:	bf00      	nop
 8007edc:	e7fe      	b.n	8007edc <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007ede:	4b1a      	ldr	r3, [pc, #104]	; (8007f48 <xTimerGenericCommand+0x9c>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d02a      	beq.n	8007f3c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	2b05      	cmp	r3, #5
 8007ef6:	dc18      	bgt.n	8007f2a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007ef8:	f7ff feaa 	bl	8007c50 <xTaskGetSchedulerState>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d109      	bne.n	8007f16 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007f02:	4b11      	ldr	r3, [pc, #68]	; (8007f48 <xTimerGenericCommand+0x9c>)
 8007f04:	6818      	ldr	r0, [r3, #0]
 8007f06:	f107 0110 	add.w	r1, r7, #16
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f0e:	f7fe fbb7 	bl	8006680 <xQueueGenericSend>
 8007f12:	6278      	str	r0, [r7, #36]	; 0x24
 8007f14:	e012      	b.n	8007f3c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007f16:	4b0c      	ldr	r3, [pc, #48]	; (8007f48 <xTimerGenericCommand+0x9c>)
 8007f18:	6818      	ldr	r0, [r3, #0]
 8007f1a:	f107 0110 	add.w	r1, r7, #16
 8007f1e:	2300      	movs	r3, #0
 8007f20:	2200      	movs	r2, #0
 8007f22:	f7fe fbad 	bl	8006680 <xQueueGenericSend>
 8007f26:	6278      	str	r0, [r7, #36]	; 0x24
 8007f28:	e008      	b.n	8007f3c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007f2a:	4b07      	ldr	r3, [pc, #28]	; (8007f48 <xTimerGenericCommand+0x9c>)
 8007f2c:	6818      	ldr	r0, [r3, #0]
 8007f2e:	f107 0110 	add.w	r1, r7, #16
 8007f32:	2300      	movs	r3, #0
 8007f34:	683a      	ldr	r2, [r7, #0]
 8007f36:	f7fe fca9 	bl	800688c <xQueueGenericSendFromISR>
 8007f3a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3728      	adds	r7, #40	; 0x28
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	200018ec 	.word	0x200018ec

08007f4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b088      	sub	sp, #32
 8007f50:	af02      	add	r7, sp, #8
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f56:	4b23      	ldr	r3, [pc, #140]	; (8007fe4 <prvProcessExpiredTimer+0x98>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	3304      	adds	r3, #4
 8007f64:	4618      	mov	r0, r3
 8007f66:	f7fe fa0f 	bl	8006388 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f70:	f003 0304 	and.w	r3, r3, #4
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d024      	beq.n	8007fc2 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	699a      	ldr	r2, [r3, #24]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	18d1      	adds	r1, r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	683a      	ldr	r2, [r7, #0]
 8007f84:	6978      	ldr	r0, [r7, #20]
 8007f86:	f000 f8d3 	bl	8008130 <prvInsertTimerInActiveList>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d021      	beq.n	8007fd4 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f90:	2300      	movs	r3, #0
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	2300      	movs	r3, #0
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	2100      	movs	r1, #0
 8007f9a:	6978      	ldr	r0, [r7, #20]
 8007f9c:	f7ff ff86 	bl	8007eac <xTimerGenericCommand>
 8007fa0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d115      	bne.n	8007fd4 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8007fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fac:	b672      	cpsid	i
 8007fae:	f383 8811 	msr	BASEPRI, r3
 8007fb2:	f3bf 8f6f 	isb	sy
 8007fb6:	f3bf 8f4f 	dsb	sy
 8007fba:	b662      	cpsie	i
 8007fbc:	60fb      	str	r3, [r7, #12]
}
 8007fbe:	bf00      	nop
 8007fc0:	e7fe      	b.n	8007fc0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fc8:	f023 0301 	bic.w	r3, r3, #1
 8007fcc:	b2da      	uxtb	r2, r3
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	6a1b      	ldr	r3, [r3, #32]
 8007fd8:	6978      	ldr	r0, [r7, #20]
 8007fda:	4798      	blx	r3
}
 8007fdc:	bf00      	nop
 8007fde:	3718      	adds	r7, #24
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	200018e4 	.word	0x200018e4

08007fe8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ff0:	f107 0308 	add.w	r3, r7, #8
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f000 f857 	bl	80080a8 <prvGetNextExpireTime>
 8007ffa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	4619      	mov	r1, r3
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f000 f803 	bl	800800c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008006:	f000 f8d5 	bl	80081b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800800a:	e7f1      	b.n	8007ff0 <prvTimerTask+0x8>

0800800c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008016:	f7ff fa1d 	bl	8007454 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800801a:	f107 0308 	add.w	r3, r7, #8
 800801e:	4618      	mov	r0, r3
 8008020:	f000 f866 	bl	80080f0 <prvSampleTimeNow>
 8008024:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d130      	bne.n	800808e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d10a      	bne.n	8008048 <prvProcessTimerOrBlockTask+0x3c>
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	429a      	cmp	r2, r3
 8008038:	d806      	bhi.n	8008048 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800803a:	f7ff fa19 	bl	8007470 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800803e:	68f9      	ldr	r1, [r7, #12]
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f7ff ff83 	bl	8007f4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008046:	e024      	b.n	8008092 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d008      	beq.n	8008060 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800804e:	4b13      	ldr	r3, [pc, #76]	; (800809c <prvProcessTimerOrBlockTask+0x90>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d101      	bne.n	800805c <prvProcessTimerOrBlockTask+0x50>
 8008058:	2301      	movs	r3, #1
 800805a:	e000      	b.n	800805e <prvProcessTimerOrBlockTask+0x52>
 800805c:	2300      	movs	r3, #0
 800805e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008060:	4b0f      	ldr	r3, [pc, #60]	; (80080a0 <prvProcessTimerOrBlockTask+0x94>)
 8008062:	6818      	ldr	r0, [r3, #0]
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	683a      	ldr	r2, [r7, #0]
 800806c:	4619      	mov	r1, r3
 800806e:	f7fe ff53 	bl	8006f18 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008072:	f7ff f9fd 	bl	8007470 <xTaskResumeAll>
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d10a      	bne.n	8008092 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800807c:	4b09      	ldr	r3, [pc, #36]	; (80080a4 <prvProcessTimerOrBlockTask+0x98>)
 800807e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008082:	601a      	str	r2, [r3, #0]
 8008084:	f3bf 8f4f 	dsb	sy
 8008088:	f3bf 8f6f 	isb	sy
}
 800808c:	e001      	b.n	8008092 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800808e:	f7ff f9ef 	bl	8007470 <xTaskResumeAll>
}
 8008092:	bf00      	nop
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	200018e8 	.word	0x200018e8
 80080a0:	200018ec 	.word	0x200018ec
 80080a4:	e000ed04 	.word	0xe000ed04

080080a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80080b0:	4b0e      	ldr	r3, [pc, #56]	; (80080ec <prvGetNextExpireTime+0x44>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d101      	bne.n	80080be <prvGetNextExpireTime+0x16>
 80080ba:	2201      	movs	r2, #1
 80080bc:	e000      	b.n	80080c0 <prvGetNextExpireTime+0x18>
 80080be:	2200      	movs	r2, #0
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d105      	bne.n	80080d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80080cc:	4b07      	ldr	r3, [pc, #28]	; (80080ec <prvGetNextExpireTime+0x44>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	60fb      	str	r3, [r7, #12]
 80080d6:	e001      	b.n	80080dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80080d8:	2300      	movs	r3, #0
 80080da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80080dc:	68fb      	ldr	r3, [r7, #12]
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3714      	adds	r7, #20
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	200018e4 	.word	0x200018e4

080080f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80080f8:	f7ff fa5a 	bl	80075b0 <xTaskGetTickCount>
 80080fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80080fe:	4b0b      	ldr	r3, [pc, #44]	; (800812c <prvSampleTimeNow+0x3c>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	429a      	cmp	r2, r3
 8008106:	d205      	bcs.n	8008114 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008108:	f000 f93c 	bl	8008384 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	601a      	str	r2, [r3, #0]
 8008112:	e002      	b.n	800811a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800811a:	4a04      	ldr	r2, [pc, #16]	; (800812c <prvSampleTimeNow+0x3c>)
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008120:	68fb      	ldr	r3, [r7, #12]
}
 8008122:	4618      	mov	r0, r3
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	200018f4 	.word	0x200018f4

08008130 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b086      	sub	sp, #24
 8008134:	af00      	add	r7, sp, #0
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	60b9      	str	r1, [r7, #8]
 800813a:	607a      	str	r2, [r7, #4]
 800813c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800813e:	2300      	movs	r3, #0
 8008140:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800814e:	68ba      	ldr	r2, [r7, #8]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	429a      	cmp	r2, r3
 8008154:	d812      	bhi.n	800817c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	1ad2      	subs	r2, r2, r3
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	699b      	ldr	r3, [r3, #24]
 8008160:	429a      	cmp	r2, r3
 8008162:	d302      	bcc.n	800816a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008164:	2301      	movs	r3, #1
 8008166:	617b      	str	r3, [r7, #20]
 8008168:	e01b      	b.n	80081a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800816a:	4b10      	ldr	r3, [pc, #64]	; (80081ac <prvInsertTimerInActiveList+0x7c>)
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	3304      	adds	r3, #4
 8008172:	4619      	mov	r1, r3
 8008174:	4610      	mov	r0, r2
 8008176:	f7fe f8ce 	bl	8006316 <vListInsert>
 800817a:	e012      	b.n	80081a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	429a      	cmp	r2, r3
 8008182:	d206      	bcs.n	8008192 <prvInsertTimerInActiveList+0x62>
 8008184:	68ba      	ldr	r2, [r7, #8]
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	429a      	cmp	r2, r3
 800818a:	d302      	bcc.n	8008192 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800818c:	2301      	movs	r3, #1
 800818e:	617b      	str	r3, [r7, #20]
 8008190:	e007      	b.n	80081a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008192:	4b07      	ldr	r3, [pc, #28]	; (80081b0 <prvInsertTimerInActiveList+0x80>)
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	3304      	adds	r3, #4
 800819a:	4619      	mov	r1, r3
 800819c:	4610      	mov	r0, r2
 800819e:	f7fe f8ba 	bl	8006316 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80081a2:	697b      	ldr	r3, [r7, #20]
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3718      	adds	r7, #24
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	200018e8 	.word	0x200018e8
 80081b0:	200018e4 	.word	0x200018e4

080081b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b08e      	sub	sp, #56	; 0x38
 80081b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80081ba:	e0d0      	b.n	800835e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	da1a      	bge.n	80081f8 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80081c2:	1d3b      	adds	r3, r7, #4
 80081c4:	3304      	adds	r3, #4
 80081c6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80081c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d10c      	bne.n	80081e8 <prvProcessReceivedCommands+0x34>
	__asm volatile
 80081ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d2:	b672      	cpsid	i
 80081d4:	f383 8811 	msr	BASEPRI, r3
 80081d8:	f3bf 8f6f 	isb	sy
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	b662      	cpsie	i
 80081e2:	61fb      	str	r3, [r7, #28]
}
 80081e4:	bf00      	nop
 80081e6:	e7fe      	b.n	80081e6 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80081e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081ee:	6850      	ldr	r0, [r2, #4]
 80081f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081f2:	6892      	ldr	r2, [r2, #8]
 80081f4:	4611      	mov	r1, r2
 80081f6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f2c0 80ae 	blt.w	800835c <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008206:	695b      	ldr	r3, [r3, #20]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d004      	beq.n	8008216 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800820c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820e:	3304      	adds	r3, #4
 8008210:	4618      	mov	r0, r3
 8008212:	f7fe f8b9 	bl	8006388 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008216:	463b      	mov	r3, r7
 8008218:	4618      	mov	r0, r3
 800821a:	f7ff ff69 	bl	80080f0 <prvSampleTimeNow>
 800821e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2b09      	cmp	r3, #9
 8008224:	f200 809b 	bhi.w	800835e <prvProcessReceivedCommands+0x1aa>
 8008228:	a201      	add	r2, pc, #4	; (adr r2, 8008230 <prvProcessReceivedCommands+0x7c>)
 800822a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800822e:	bf00      	nop
 8008230:	08008259 	.word	0x08008259
 8008234:	08008259 	.word	0x08008259
 8008238:	08008259 	.word	0x08008259
 800823c:	080082d1 	.word	0x080082d1
 8008240:	080082e5 	.word	0x080082e5
 8008244:	08008333 	.word	0x08008333
 8008248:	08008259 	.word	0x08008259
 800824c:	08008259 	.word	0x08008259
 8008250:	080082d1 	.word	0x080082d1
 8008254:	080082e5 	.word	0x080082e5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800825e:	f043 0301 	orr.w	r3, r3, #1
 8008262:	b2da      	uxtb	r2, r3
 8008264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008266:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800826a:	68ba      	ldr	r2, [r7, #8]
 800826c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826e:	699b      	ldr	r3, [r3, #24]
 8008270:	18d1      	adds	r1, r2, r3
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008276:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008278:	f7ff ff5a 	bl	8008130 <prvInsertTimerInActiveList>
 800827c:	4603      	mov	r3, r0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d06d      	beq.n	800835e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008284:	6a1b      	ldr	r3, [r3, #32]
 8008286:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008288:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800828a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008290:	f003 0304 	and.w	r3, r3, #4
 8008294:	2b00      	cmp	r3, #0
 8008296:	d062      	beq.n	800835e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829c:	699b      	ldr	r3, [r3, #24]
 800829e:	441a      	add	r2, r3
 80082a0:	2300      	movs	r3, #0
 80082a2:	9300      	str	r3, [sp, #0]
 80082a4:	2300      	movs	r3, #0
 80082a6:	2100      	movs	r1, #0
 80082a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082aa:	f7ff fdff 	bl	8007eac <xTimerGenericCommand>
 80082ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80082b0:	6a3b      	ldr	r3, [r7, #32]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d153      	bne.n	800835e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80082b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ba:	b672      	cpsid	i
 80082bc:	f383 8811 	msr	BASEPRI, r3
 80082c0:	f3bf 8f6f 	isb	sy
 80082c4:	f3bf 8f4f 	dsb	sy
 80082c8:	b662      	cpsie	i
 80082ca:	61bb      	str	r3, [r7, #24]
}
 80082cc:	bf00      	nop
 80082ce:	e7fe      	b.n	80082ce <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082d6:	f023 0301 	bic.w	r3, r3, #1
 80082da:	b2da      	uxtb	r2, r3
 80082dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80082e2:	e03c      	b.n	800835e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80082e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082ea:	f043 0301 	orr.w	r3, r3, #1
 80082ee:	b2da      	uxtb	r2, r3
 80082f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80082f6:	68ba      	ldr	r2, [r7, #8]
 80082f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80082fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fe:	699b      	ldr	r3, [r3, #24]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d10c      	bne.n	800831e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8008304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008308:	b672      	cpsid	i
 800830a:	f383 8811 	msr	BASEPRI, r3
 800830e:	f3bf 8f6f 	isb	sy
 8008312:	f3bf 8f4f 	dsb	sy
 8008316:	b662      	cpsie	i
 8008318:	617b      	str	r3, [r7, #20]
}
 800831a:	bf00      	nop
 800831c:	e7fe      	b.n	800831c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800831e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008320:	699a      	ldr	r2, [r3, #24]
 8008322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008324:	18d1      	adds	r1, r2, r3
 8008326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800832a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800832c:	f7ff ff00 	bl	8008130 <prvInsertTimerInActiveList>
					break;
 8008330:	e015      	b.n	800835e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008334:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008338:	f003 0302 	and.w	r3, r3, #2
 800833c:	2b00      	cmp	r3, #0
 800833e:	d103      	bne.n	8008348 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8008340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008342:	f000 fbc9 	bl	8008ad8 <vPortFree>
 8008346:	e00a      	b.n	800835e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800834e:	f023 0301 	bic.w	r3, r3, #1
 8008352:	b2da      	uxtb	r2, r3
 8008354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008356:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800835a:	e000      	b.n	800835e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800835c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800835e:	4b08      	ldr	r3, [pc, #32]	; (8008380 <prvProcessReceivedCommands+0x1cc>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	1d39      	adds	r1, r7, #4
 8008364:	2200      	movs	r2, #0
 8008366:	4618      	mov	r0, r3
 8008368:	f7fe fb30 	bl	80069cc <xQueueReceive>
 800836c:	4603      	mov	r3, r0
 800836e:	2b00      	cmp	r3, #0
 8008370:	f47f af24 	bne.w	80081bc <prvProcessReceivedCommands+0x8>
	}
}
 8008374:	bf00      	nop
 8008376:	bf00      	nop
 8008378:	3730      	adds	r7, #48	; 0x30
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	200018ec 	.word	0x200018ec

08008384 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b088      	sub	sp, #32
 8008388:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800838a:	e04a      	b.n	8008422 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800838c:	4b2e      	ldr	r3, [pc, #184]	; (8008448 <prvSwitchTimerLists+0xc4>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008396:	4b2c      	ldr	r3, [pc, #176]	; (8008448 <prvSwitchTimerLists+0xc4>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	68db      	ldr	r3, [r3, #12]
 800839e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	3304      	adds	r3, #4
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7fd ffef 	bl	8006388 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	6a1b      	ldr	r3, [r3, #32]
 80083ae:	68f8      	ldr	r0, [r7, #12]
 80083b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083b8:	f003 0304 	and.w	r3, r3, #4
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d030      	beq.n	8008422 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	699b      	ldr	r3, [r3, #24]
 80083c4:	693a      	ldr	r2, [r7, #16]
 80083c6:	4413      	add	r3, r2
 80083c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80083ca:	68ba      	ldr	r2, [r7, #8]
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d90e      	bls.n	80083f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80083de:	4b1a      	ldr	r3, [pc, #104]	; (8008448 <prvSwitchTimerLists+0xc4>)
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	3304      	adds	r3, #4
 80083e6:	4619      	mov	r1, r3
 80083e8:	4610      	mov	r0, r2
 80083ea:	f7fd ff94 	bl	8006316 <vListInsert>
 80083ee:	e018      	b.n	8008422 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80083f0:	2300      	movs	r3, #0
 80083f2:	9300      	str	r3, [sp, #0]
 80083f4:	2300      	movs	r3, #0
 80083f6:	693a      	ldr	r2, [r7, #16]
 80083f8:	2100      	movs	r1, #0
 80083fa:	68f8      	ldr	r0, [r7, #12]
 80083fc:	f7ff fd56 	bl	8007eac <xTimerGenericCommand>
 8008400:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d10c      	bne.n	8008422 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8008408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840c:	b672      	cpsid	i
 800840e:	f383 8811 	msr	BASEPRI, r3
 8008412:	f3bf 8f6f 	isb	sy
 8008416:	f3bf 8f4f 	dsb	sy
 800841a:	b662      	cpsie	i
 800841c:	603b      	str	r3, [r7, #0]
}
 800841e:	bf00      	nop
 8008420:	e7fe      	b.n	8008420 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008422:	4b09      	ldr	r3, [pc, #36]	; (8008448 <prvSwitchTimerLists+0xc4>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d1af      	bne.n	800838c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800842c:	4b06      	ldr	r3, [pc, #24]	; (8008448 <prvSwitchTimerLists+0xc4>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008432:	4b06      	ldr	r3, [pc, #24]	; (800844c <prvSwitchTimerLists+0xc8>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a04      	ldr	r2, [pc, #16]	; (8008448 <prvSwitchTimerLists+0xc4>)
 8008438:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800843a:	4a04      	ldr	r2, [pc, #16]	; (800844c <prvSwitchTimerLists+0xc8>)
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	6013      	str	r3, [r2, #0]
}
 8008440:	bf00      	nop
 8008442:	3718      	adds	r7, #24
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	200018e4 	.word	0x200018e4
 800844c:	200018e8 	.word	0x200018e8

08008450 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008456:	f000 f949 	bl	80086ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800845a:	4b15      	ldr	r3, [pc, #84]	; (80084b0 <prvCheckForValidListAndQueue+0x60>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d120      	bne.n	80084a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008462:	4814      	ldr	r0, [pc, #80]	; (80084b4 <prvCheckForValidListAndQueue+0x64>)
 8008464:	f7fd ff06 	bl	8006274 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008468:	4813      	ldr	r0, [pc, #76]	; (80084b8 <prvCheckForValidListAndQueue+0x68>)
 800846a:	f7fd ff03 	bl	8006274 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800846e:	4b13      	ldr	r3, [pc, #76]	; (80084bc <prvCheckForValidListAndQueue+0x6c>)
 8008470:	4a10      	ldr	r2, [pc, #64]	; (80084b4 <prvCheckForValidListAndQueue+0x64>)
 8008472:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008474:	4b12      	ldr	r3, [pc, #72]	; (80084c0 <prvCheckForValidListAndQueue+0x70>)
 8008476:	4a10      	ldr	r2, [pc, #64]	; (80084b8 <prvCheckForValidListAndQueue+0x68>)
 8008478:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800847a:	2300      	movs	r3, #0
 800847c:	9300      	str	r3, [sp, #0]
 800847e:	4b11      	ldr	r3, [pc, #68]	; (80084c4 <prvCheckForValidListAndQueue+0x74>)
 8008480:	4a11      	ldr	r2, [pc, #68]	; (80084c8 <prvCheckForValidListAndQueue+0x78>)
 8008482:	2110      	movs	r1, #16
 8008484:	200a      	movs	r0, #10
 8008486:	f7fe f813 	bl	80064b0 <xQueueGenericCreateStatic>
 800848a:	4603      	mov	r3, r0
 800848c:	4a08      	ldr	r2, [pc, #32]	; (80084b0 <prvCheckForValidListAndQueue+0x60>)
 800848e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008490:	4b07      	ldr	r3, [pc, #28]	; (80084b0 <prvCheckForValidListAndQueue+0x60>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d005      	beq.n	80084a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008498:	4b05      	ldr	r3, [pc, #20]	; (80084b0 <prvCheckForValidListAndQueue+0x60>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	490b      	ldr	r1, [pc, #44]	; (80084cc <prvCheckForValidListAndQueue+0x7c>)
 800849e:	4618      	mov	r0, r3
 80084a0:	f7fe fd10 	bl	8006ec4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084a4:	f000 f956 	bl	8008754 <vPortExitCritical>
}
 80084a8:	bf00      	nop
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	200018ec 	.word	0x200018ec
 80084b4:	200018bc 	.word	0x200018bc
 80084b8:	200018d0 	.word	0x200018d0
 80084bc:	200018e4 	.word	0x200018e4
 80084c0:	200018e8 	.word	0x200018e8
 80084c4:	20001998 	.word	0x20001998
 80084c8:	200018f8 	.word	0x200018f8
 80084cc:	08009110 	.word	0x08009110

080084d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80084d0:	b480      	push	{r7}
 80084d2:	b085      	sub	sp, #20
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	3b04      	subs	r3, #4
 80084e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80084e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	3b04      	subs	r3, #4
 80084ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	f023 0201 	bic.w	r2, r3, #1
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	3b04      	subs	r3, #4
 80084fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008500:	4a0c      	ldr	r2, [pc, #48]	; (8008534 <pxPortInitialiseStack+0x64>)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	3b14      	subs	r3, #20
 800850a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	3b04      	subs	r3, #4
 8008516:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f06f 0202 	mvn.w	r2, #2
 800851e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	3b20      	subs	r3, #32
 8008524:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008526:	68fb      	ldr	r3, [r7, #12]
}
 8008528:	4618      	mov	r0, r3
 800852a:	3714      	adds	r7, #20
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr
 8008534:	08008539 	.word	0x08008539

08008538 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008538:	b480      	push	{r7}
 800853a:	b085      	sub	sp, #20
 800853c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800853e:	2300      	movs	r3, #0
 8008540:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008542:	4b14      	ldr	r3, [pc, #80]	; (8008594 <prvTaskExitError+0x5c>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800854a:	d00c      	beq.n	8008566 <prvTaskExitError+0x2e>
	__asm volatile
 800854c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008550:	b672      	cpsid	i
 8008552:	f383 8811 	msr	BASEPRI, r3
 8008556:	f3bf 8f6f 	isb	sy
 800855a:	f3bf 8f4f 	dsb	sy
 800855e:	b662      	cpsie	i
 8008560:	60fb      	str	r3, [r7, #12]
}
 8008562:	bf00      	nop
 8008564:	e7fe      	b.n	8008564 <prvTaskExitError+0x2c>
	__asm volatile
 8008566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800856a:	b672      	cpsid	i
 800856c:	f383 8811 	msr	BASEPRI, r3
 8008570:	f3bf 8f6f 	isb	sy
 8008574:	f3bf 8f4f 	dsb	sy
 8008578:	b662      	cpsie	i
 800857a:	60bb      	str	r3, [r7, #8]
}
 800857c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800857e:	bf00      	nop
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d0fc      	beq.n	8008580 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008586:	bf00      	nop
 8008588:	bf00      	nop
 800858a:	3714      	adds	r7, #20
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr
 8008594:	2000000c 	.word	0x2000000c
	...

080085a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80085a0:	4b07      	ldr	r3, [pc, #28]	; (80085c0 <pxCurrentTCBConst2>)
 80085a2:	6819      	ldr	r1, [r3, #0]
 80085a4:	6808      	ldr	r0, [r1, #0]
 80085a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085aa:	f380 8809 	msr	PSP, r0
 80085ae:	f3bf 8f6f 	isb	sy
 80085b2:	f04f 0000 	mov.w	r0, #0
 80085b6:	f380 8811 	msr	BASEPRI, r0
 80085ba:	4770      	bx	lr
 80085bc:	f3af 8000 	nop.w

080085c0 <pxCurrentTCBConst2>:
 80085c0:	200013bc 	.word	0x200013bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80085c4:	bf00      	nop
 80085c6:	bf00      	nop

080085c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80085c8:	4808      	ldr	r0, [pc, #32]	; (80085ec <prvPortStartFirstTask+0x24>)
 80085ca:	6800      	ldr	r0, [r0, #0]
 80085cc:	6800      	ldr	r0, [r0, #0]
 80085ce:	f380 8808 	msr	MSP, r0
 80085d2:	f04f 0000 	mov.w	r0, #0
 80085d6:	f380 8814 	msr	CONTROL, r0
 80085da:	b662      	cpsie	i
 80085dc:	b661      	cpsie	f
 80085de:	f3bf 8f4f 	dsb	sy
 80085e2:	f3bf 8f6f 	isb	sy
 80085e6:	df00      	svc	0
 80085e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80085ea:	bf00      	nop
 80085ec:	e000ed08 	.word	0xe000ed08

080085f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80085f6:	4b37      	ldr	r3, [pc, #220]	; (80086d4 <xPortStartScheduler+0xe4>)
 80085f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	22ff      	movs	r2, #255	; 0xff
 8008606:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	b2db      	uxtb	r3, r3
 800860e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008610:	78fb      	ldrb	r3, [r7, #3]
 8008612:	b2db      	uxtb	r3, r3
 8008614:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008618:	b2da      	uxtb	r2, r3
 800861a:	4b2f      	ldr	r3, [pc, #188]	; (80086d8 <xPortStartScheduler+0xe8>)
 800861c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800861e:	4b2f      	ldr	r3, [pc, #188]	; (80086dc <xPortStartScheduler+0xec>)
 8008620:	2207      	movs	r2, #7
 8008622:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008624:	e009      	b.n	800863a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008626:	4b2d      	ldr	r3, [pc, #180]	; (80086dc <xPortStartScheduler+0xec>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	3b01      	subs	r3, #1
 800862c:	4a2b      	ldr	r2, [pc, #172]	; (80086dc <xPortStartScheduler+0xec>)
 800862e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008630:	78fb      	ldrb	r3, [r7, #3]
 8008632:	b2db      	uxtb	r3, r3
 8008634:	005b      	lsls	r3, r3, #1
 8008636:	b2db      	uxtb	r3, r3
 8008638:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800863a:	78fb      	ldrb	r3, [r7, #3]
 800863c:	b2db      	uxtb	r3, r3
 800863e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008642:	2b80      	cmp	r3, #128	; 0x80
 8008644:	d0ef      	beq.n	8008626 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008646:	4b25      	ldr	r3, [pc, #148]	; (80086dc <xPortStartScheduler+0xec>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f1c3 0307 	rsb	r3, r3, #7
 800864e:	2b04      	cmp	r3, #4
 8008650:	d00c      	beq.n	800866c <xPortStartScheduler+0x7c>
	__asm volatile
 8008652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008656:	b672      	cpsid	i
 8008658:	f383 8811 	msr	BASEPRI, r3
 800865c:	f3bf 8f6f 	isb	sy
 8008660:	f3bf 8f4f 	dsb	sy
 8008664:	b662      	cpsie	i
 8008666:	60bb      	str	r3, [r7, #8]
}
 8008668:	bf00      	nop
 800866a:	e7fe      	b.n	800866a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800866c:	4b1b      	ldr	r3, [pc, #108]	; (80086dc <xPortStartScheduler+0xec>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	021b      	lsls	r3, r3, #8
 8008672:	4a1a      	ldr	r2, [pc, #104]	; (80086dc <xPortStartScheduler+0xec>)
 8008674:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008676:	4b19      	ldr	r3, [pc, #100]	; (80086dc <xPortStartScheduler+0xec>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800867e:	4a17      	ldr	r2, [pc, #92]	; (80086dc <xPortStartScheduler+0xec>)
 8008680:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	b2da      	uxtb	r2, r3
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800868a:	4b15      	ldr	r3, [pc, #84]	; (80086e0 <xPortStartScheduler+0xf0>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a14      	ldr	r2, [pc, #80]	; (80086e0 <xPortStartScheduler+0xf0>)
 8008690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008694:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008696:	4b12      	ldr	r3, [pc, #72]	; (80086e0 <xPortStartScheduler+0xf0>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a11      	ldr	r2, [pc, #68]	; (80086e0 <xPortStartScheduler+0xf0>)
 800869c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80086a0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80086a2:	f000 f8dd 	bl	8008860 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80086a6:	4b0f      	ldr	r3, [pc, #60]	; (80086e4 <xPortStartScheduler+0xf4>)
 80086a8:	2200      	movs	r2, #0
 80086aa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80086ac:	f000 f8fc 	bl	80088a8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80086b0:	4b0d      	ldr	r3, [pc, #52]	; (80086e8 <xPortStartScheduler+0xf8>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a0c      	ldr	r2, [pc, #48]	; (80086e8 <xPortStartScheduler+0xf8>)
 80086b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80086ba:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80086bc:	f7ff ff84 	bl	80085c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80086c0:	f7ff f842 	bl	8007748 <vTaskSwitchContext>
	prvTaskExitError();
 80086c4:	f7ff ff38 	bl	8008538 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	e000e400 	.word	0xe000e400
 80086d8:	200019e8 	.word	0x200019e8
 80086dc:	200019ec 	.word	0x200019ec
 80086e0:	e000ed20 	.word	0xe000ed20
 80086e4:	2000000c 	.word	0x2000000c
 80086e8:	e000ef34 	.word	0xe000ef34

080086ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
	__asm volatile
 80086f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f6:	b672      	cpsid	i
 80086f8:	f383 8811 	msr	BASEPRI, r3
 80086fc:	f3bf 8f6f 	isb	sy
 8008700:	f3bf 8f4f 	dsb	sy
 8008704:	b662      	cpsie	i
 8008706:	607b      	str	r3, [r7, #4]
}
 8008708:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800870a:	4b10      	ldr	r3, [pc, #64]	; (800874c <vPortEnterCritical+0x60>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	3301      	adds	r3, #1
 8008710:	4a0e      	ldr	r2, [pc, #56]	; (800874c <vPortEnterCritical+0x60>)
 8008712:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008714:	4b0d      	ldr	r3, [pc, #52]	; (800874c <vPortEnterCritical+0x60>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2b01      	cmp	r3, #1
 800871a:	d111      	bne.n	8008740 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800871c:	4b0c      	ldr	r3, [pc, #48]	; (8008750 <vPortEnterCritical+0x64>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	b2db      	uxtb	r3, r3
 8008722:	2b00      	cmp	r3, #0
 8008724:	d00c      	beq.n	8008740 <vPortEnterCritical+0x54>
	__asm volatile
 8008726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872a:	b672      	cpsid	i
 800872c:	f383 8811 	msr	BASEPRI, r3
 8008730:	f3bf 8f6f 	isb	sy
 8008734:	f3bf 8f4f 	dsb	sy
 8008738:	b662      	cpsie	i
 800873a:	603b      	str	r3, [r7, #0]
}
 800873c:	bf00      	nop
 800873e:	e7fe      	b.n	800873e <vPortEnterCritical+0x52>
	}
}
 8008740:	bf00      	nop
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr
 800874c:	2000000c 	.word	0x2000000c
 8008750:	e000ed04 	.word	0xe000ed04

08008754 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800875a:	4b13      	ldr	r3, [pc, #76]	; (80087a8 <vPortExitCritical+0x54>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d10c      	bne.n	800877c <vPortExitCritical+0x28>
	__asm volatile
 8008762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008766:	b672      	cpsid	i
 8008768:	f383 8811 	msr	BASEPRI, r3
 800876c:	f3bf 8f6f 	isb	sy
 8008770:	f3bf 8f4f 	dsb	sy
 8008774:	b662      	cpsie	i
 8008776:	607b      	str	r3, [r7, #4]
}
 8008778:	bf00      	nop
 800877a:	e7fe      	b.n	800877a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800877c:	4b0a      	ldr	r3, [pc, #40]	; (80087a8 <vPortExitCritical+0x54>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	3b01      	subs	r3, #1
 8008782:	4a09      	ldr	r2, [pc, #36]	; (80087a8 <vPortExitCritical+0x54>)
 8008784:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008786:	4b08      	ldr	r3, [pc, #32]	; (80087a8 <vPortExitCritical+0x54>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d105      	bne.n	800879a <vPortExitCritical+0x46>
 800878e:	2300      	movs	r3, #0
 8008790:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	f383 8811 	msr	BASEPRI, r3
}
 8008798:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800879a:	bf00      	nop
 800879c:	370c      	adds	r7, #12
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop
 80087a8:	2000000c 	.word	0x2000000c
 80087ac:	00000000 	.word	0x00000000

080087b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80087b0:	f3ef 8009 	mrs	r0, PSP
 80087b4:	f3bf 8f6f 	isb	sy
 80087b8:	4b15      	ldr	r3, [pc, #84]	; (8008810 <pxCurrentTCBConst>)
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	f01e 0f10 	tst.w	lr, #16
 80087c0:	bf08      	it	eq
 80087c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80087c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ca:	6010      	str	r0, [r2, #0]
 80087cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80087d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80087d4:	b672      	cpsid	i
 80087d6:	f380 8811 	msr	BASEPRI, r0
 80087da:	f3bf 8f4f 	dsb	sy
 80087de:	f3bf 8f6f 	isb	sy
 80087e2:	b662      	cpsie	i
 80087e4:	f7fe ffb0 	bl	8007748 <vTaskSwitchContext>
 80087e8:	f04f 0000 	mov.w	r0, #0
 80087ec:	f380 8811 	msr	BASEPRI, r0
 80087f0:	bc09      	pop	{r0, r3}
 80087f2:	6819      	ldr	r1, [r3, #0]
 80087f4:	6808      	ldr	r0, [r1, #0]
 80087f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087fa:	f01e 0f10 	tst.w	lr, #16
 80087fe:	bf08      	it	eq
 8008800:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008804:	f380 8809 	msr	PSP, r0
 8008808:	f3bf 8f6f 	isb	sy
 800880c:	4770      	bx	lr
 800880e:	bf00      	nop

08008810 <pxCurrentTCBConst>:
 8008810:	200013bc 	.word	0x200013bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008814:	bf00      	nop
 8008816:	bf00      	nop

08008818 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
	__asm volatile
 800881e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008822:	b672      	cpsid	i
 8008824:	f383 8811 	msr	BASEPRI, r3
 8008828:	f3bf 8f6f 	isb	sy
 800882c:	f3bf 8f4f 	dsb	sy
 8008830:	b662      	cpsie	i
 8008832:	607b      	str	r3, [r7, #4]
}
 8008834:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008836:	f7fe fecb 	bl	80075d0 <xTaskIncrementTick>
 800883a:	4603      	mov	r3, r0
 800883c:	2b00      	cmp	r3, #0
 800883e:	d003      	beq.n	8008848 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008840:	4b06      	ldr	r3, [pc, #24]	; (800885c <SysTick_Handler+0x44>)
 8008842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008846:	601a      	str	r2, [r3, #0]
 8008848:	2300      	movs	r3, #0
 800884a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	f383 8811 	msr	BASEPRI, r3
}
 8008852:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008854:	bf00      	nop
 8008856:	3708      	adds	r7, #8
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}
 800885c:	e000ed04 	.word	0xe000ed04

08008860 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008860:	b480      	push	{r7}
 8008862:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008864:	4b0b      	ldr	r3, [pc, #44]	; (8008894 <vPortSetupTimerInterrupt+0x34>)
 8008866:	2200      	movs	r2, #0
 8008868:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800886a:	4b0b      	ldr	r3, [pc, #44]	; (8008898 <vPortSetupTimerInterrupt+0x38>)
 800886c:	2200      	movs	r2, #0
 800886e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008870:	4b0a      	ldr	r3, [pc, #40]	; (800889c <vPortSetupTimerInterrupt+0x3c>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a0a      	ldr	r2, [pc, #40]	; (80088a0 <vPortSetupTimerInterrupt+0x40>)
 8008876:	fba2 2303 	umull	r2, r3, r2, r3
 800887a:	099b      	lsrs	r3, r3, #6
 800887c:	4a09      	ldr	r2, [pc, #36]	; (80088a4 <vPortSetupTimerInterrupt+0x44>)
 800887e:	3b01      	subs	r3, #1
 8008880:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008882:	4b04      	ldr	r3, [pc, #16]	; (8008894 <vPortSetupTimerInterrupt+0x34>)
 8008884:	2207      	movs	r2, #7
 8008886:	601a      	str	r2, [r3, #0]
}
 8008888:	bf00      	nop
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop
 8008894:	e000e010 	.word	0xe000e010
 8008898:	e000e018 	.word	0xe000e018
 800889c:	20000000 	.word	0x20000000
 80088a0:	10624dd3 	.word	0x10624dd3
 80088a4:	e000e014 	.word	0xe000e014

080088a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80088a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80088b8 <vPortEnableVFP+0x10>
 80088ac:	6801      	ldr	r1, [r0, #0]
 80088ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80088b2:	6001      	str	r1, [r0, #0]
 80088b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80088b6:	bf00      	nop
 80088b8:	e000ed88 	.word	0xe000ed88

080088bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80088bc:	b480      	push	{r7}
 80088be:	b085      	sub	sp, #20
 80088c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80088c2:	f3ef 8305 	mrs	r3, IPSR
 80088c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2b0f      	cmp	r3, #15
 80088cc:	d916      	bls.n	80088fc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80088ce:	4a19      	ldr	r2, [pc, #100]	; (8008934 <vPortValidateInterruptPriority+0x78>)
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	4413      	add	r3, r2
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80088d8:	4b17      	ldr	r3, [pc, #92]	; (8008938 <vPortValidateInterruptPriority+0x7c>)
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	7afa      	ldrb	r2, [r7, #11]
 80088de:	429a      	cmp	r2, r3
 80088e0:	d20c      	bcs.n	80088fc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80088e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e6:	b672      	cpsid	i
 80088e8:	f383 8811 	msr	BASEPRI, r3
 80088ec:	f3bf 8f6f 	isb	sy
 80088f0:	f3bf 8f4f 	dsb	sy
 80088f4:	b662      	cpsie	i
 80088f6:	607b      	str	r3, [r7, #4]
}
 80088f8:	bf00      	nop
 80088fa:	e7fe      	b.n	80088fa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80088fc:	4b0f      	ldr	r3, [pc, #60]	; (800893c <vPortValidateInterruptPriority+0x80>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008904:	4b0e      	ldr	r3, [pc, #56]	; (8008940 <vPortValidateInterruptPriority+0x84>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	429a      	cmp	r2, r3
 800890a:	d90c      	bls.n	8008926 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800890c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008910:	b672      	cpsid	i
 8008912:	f383 8811 	msr	BASEPRI, r3
 8008916:	f3bf 8f6f 	isb	sy
 800891a:	f3bf 8f4f 	dsb	sy
 800891e:	b662      	cpsie	i
 8008920:	603b      	str	r3, [r7, #0]
}
 8008922:	bf00      	nop
 8008924:	e7fe      	b.n	8008924 <vPortValidateInterruptPriority+0x68>
	}
 8008926:	bf00      	nop
 8008928:	3714      	adds	r7, #20
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	e000e3f0 	.word	0xe000e3f0
 8008938:	200019e8 	.word	0x200019e8
 800893c:	e000ed0c 	.word	0xe000ed0c
 8008940:	200019ec 	.word	0x200019ec

08008944 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b08a      	sub	sp, #40	; 0x28
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800894c:	2300      	movs	r3, #0
 800894e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008950:	f7fe fd80 	bl	8007454 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008954:	4b5b      	ldr	r3, [pc, #364]	; (8008ac4 <pvPortMalloc+0x180>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d101      	bne.n	8008960 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800895c:	f000 f91a 	bl	8008b94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008960:	4b59      	ldr	r3, [pc, #356]	; (8008ac8 <pvPortMalloc+0x184>)
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	4013      	ands	r3, r2
 8008968:	2b00      	cmp	r3, #0
 800896a:	f040 8092 	bne.w	8008a92 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d01f      	beq.n	80089b4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8008974:	2208      	movs	r2, #8
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	4413      	add	r3, r2
 800897a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f003 0307 	and.w	r3, r3, #7
 8008982:	2b00      	cmp	r3, #0
 8008984:	d016      	beq.n	80089b4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f023 0307 	bic.w	r3, r3, #7
 800898c:	3308      	adds	r3, #8
 800898e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f003 0307 	and.w	r3, r3, #7
 8008996:	2b00      	cmp	r3, #0
 8008998:	d00c      	beq.n	80089b4 <pvPortMalloc+0x70>
	__asm volatile
 800899a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899e:	b672      	cpsid	i
 80089a0:	f383 8811 	msr	BASEPRI, r3
 80089a4:	f3bf 8f6f 	isb	sy
 80089a8:	f3bf 8f4f 	dsb	sy
 80089ac:	b662      	cpsie	i
 80089ae:	617b      	str	r3, [r7, #20]
}
 80089b0:	bf00      	nop
 80089b2:	e7fe      	b.n	80089b2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d06b      	beq.n	8008a92 <pvPortMalloc+0x14e>
 80089ba:	4b44      	ldr	r3, [pc, #272]	; (8008acc <pvPortMalloc+0x188>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d866      	bhi.n	8008a92 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80089c4:	4b42      	ldr	r3, [pc, #264]	; (8008ad0 <pvPortMalloc+0x18c>)
 80089c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80089c8:	4b41      	ldr	r3, [pc, #260]	; (8008ad0 <pvPortMalloc+0x18c>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089ce:	e004      	b.n	80089da <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80089d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80089d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d903      	bls.n	80089ec <pvPortMalloc+0xa8>
 80089e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d1f1      	bne.n	80089d0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80089ec:	4b35      	ldr	r3, [pc, #212]	; (8008ac4 <pvPortMalloc+0x180>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d04d      	beq.n	8008a92 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80089f6:	6a3b      	ldr	r3, [r7, #32]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	2208      	movs	r2, #8
 80089fc:	4413      	add	r3, r2
 80089fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	6a3b      	ldr	r3, [r7, #32]
 8008a06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0a:	685a      	ldr	r2, [r3, #4]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	1ad2      	subs	r2, r2, r3
 8008a10:	2308      	movs	r3, #8
 8008a12:	005b      	lsls	r3, r3, #1
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d921      	bls.n	8008a5c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	f003 0307 	and.w	r3, r3, #7
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d00c      	beq.n	8008a44 <pvPortMalloc+0x100>
	__asm volatile
 8008a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2e:	b672      	cpsid	i
 8008a30:	f383 8811 	msr	BASEPRI, r3
 8008a34:	f3bf 8f6f 	isb	sy
 8008a38:	f3bf 8f4f 	dsb	sy
 8008a3c:	b662      	cpsie	i
 8008a3e:	613b      	str	r3, [r7, #16]
}
 8008a40:	bf00      	nop
 8008a42:	e7fe      	b.n	8008a42 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a46:	685a      	ldr	r2, [r3, #4]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	1ad2      	subs	r2, r2, r3
 8008a4c:	69bb      	ldr	r3, [r7, #24]
 8008a4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a56:	69b8      	ldr	r0, [r7, #24]
 8008a58:	f000 f8fe 	bl	8008c58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a5c:	4b1b      	ldr	r3, [pc, #108]	; (8008acc <pvPortMalloc+0x188>)
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	1ad3      	subs	r3, r2, r3
 8008a66:	4a19      	ldr	r2, [pc, #100]	; (8008acc <pvPortMalloc+0x188>)
 8008a68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a6a:	4b18      	ldr	r3, [pc, #96]	; (8008acc <pvPortMalloc+0x188>)
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	4b19      	ldr	r3, [pc, #100]	; (8008ad4 <pvPortMalloc+0x190>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d203      	bcs.n	8008a7e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a76:	4b15      	ldr	r3, [pc, #84]	; (8008acc <pvPortMalloc+0x188>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a16      	ldr	r2, [pc, #88]	; (8008ad4 <pvPortMalloc+0x190>)
 8008a7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a80:	685a      	ldr	r2, [r3, #4]
 8008a82:	4b11      	ldr	r3, [pc, #68]	; (8008ac8 <pvPortMalloc+0x184>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	431a      	orrs	r2, r3
 8008a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8e:	2200      	movs	r2, #0
 8008a90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a92:	f7fe fced 	bl	8007470 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a96:	69fb      	ldr	r3, [r7, #28]
 8008a98:	f003 0307 	and.w	r3, r3, #7
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d00c      	beq.n	8008aba <pvPortMalloc+0x176>
	__asm volatile
 8008aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa4:	b672      	cpsid	i
 8008aa6:	f383 8811 	msr	BASEPRI, r3
 8008aaa:	f3bf 8f6f 	isb	sy
 8008aae:	f3bf 8f4f 	dsb	sy
 8008ab2:	b662      	cpsie	i
 8008ab4:	60fb      	str	r3, [r7, #12]
}
 8008ab6:	bf00      	nop
 8008ab8:	e7fe      	b.n	8008ab8 <pvPortMalloc+0x174>
	return pvReturn;
 8008aba:	69fb      	ldr	r3, [r7, #28]
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3728      	adds	r7, #40	; 0x28
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	200055f8 	.word	0x200055f8
 8008ac8:	20005604 	.word	0x20005604
 8008acc:	200055fc 	.word	0x200055fc
 8008ad0:	200055f0 	.word	0x200055f0
 8008ad4:	20005600 	.word	0x20005600

08008ad8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b086      	sub	sp, #24
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d04c      	beq.n	8008b84 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008aea:	2308      	movs	r3, #8
 8008aec:	425b      	negs	r3, r3
 8008aee:	697a      	ldr	r2, [r7, #20]
 8008af0:	4413      	add	r3, r2
 8008af2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	685a      	ldr	r2, [r3, #4]
 8008afc:	4b23      	ldr	r3, [pc, #140]	; (8008b8c <vPortFree+0xb4>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4013      	ands	r3, r2
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d10c      	bne.n	8008b20 <vPortFree+0x48>
	__asm volatile
 8008b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0a:	b672      	cpsid	i
 8008b0c:	f383 8811 	msr	BASEPRI, r3
 8008b10:	f3bf 8f6f 	isb	sy
 8008b14:	f3bf 8f4f 	dsb	sy
 8008b18:	b662      	cpsie	i
 8008b1a:	60fb      	str	r3, [r7, #12]
}
 8008b1c:	bf00      	nop
 8008b1e:	e7fe      	b.n	8008b1e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00c      	beq.n	8008b42 <vPortFree+0x6a>
	__asm volatile
 8008b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2c:	b672      	cpsid	i
 8008b2e:	f383 8811 	msr	BASEPRI, r3
 8008b32:	f3bf 8f6f 	isb	sy
 8008b36:	f3bf 8f4f 	dsb	sy
 8008b3a:	b662      	cpsie	i
 8008b3c:	60bb      	str	r3, [r7, #8]
}
 8008b3e:	bf00      	nop
 8008b40:	e7fe      	b.n	8008b40 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	685a      	ldr	r2, [r3, #4]
 8008b46:	4b11      	ldr	r3, [pc, #68]	; (8008b8c <vPortFree+0xb4>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d019      	beq.n	8008b84 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d115      	bne.n	8008b84 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	685a      	ldr	r2, [r3, #4]
 8008b5c:	4b0b      	ldr	r3, [pc, #44]	; (8008b8c <vPortFree+0xb4>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	43db      	mvns	r3, r3
 8008b62:	401a      	ands	r2, r3
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b68:	f7fe fc74 	bl	8007454 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	685a      	ldr	r2, [r3, #4]
 8008b70:	4b07      	ldr	r3, [pc, #28]	; (8008b90 <vPortFree+0xb8>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4413      	add	r3, r2
 8008b76:	4a06      	ldr	r2, [pc, #24]	; (8008b90 <vPortFree+0xb8>)
 8008b78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b7a:	6938      	ldr	r0, [r7, #16]
 8008b7c:	f000 f86c 	bl	8008c58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008b80:	f7fe fc76 	bl	8007470 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b84:	bf00      	nop
 8008b86:	3718      	adds	r7, #24
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	20005604 	.word	0x20005604
 8008b90:	200055fc 	.word	0x200055fc

08008b94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b94:	b480      	push	{r7}
 8008b96:	b085      	sub	sp, #20
 8008b98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008b9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ba0:	4b27      	ldr	r3, [pc, #156]	; (8008c40 <prvHeapInit+0xac>)
 8008ba2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f003 0307 	and.w	r3, r3, #7
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d00c      	beq.n	8008bc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	3307      	adds	r3, #7
 8008bb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f023 0307 	bic.w	r3, r3, #7
 8008bba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008bbc:	68ba      	ldr	r2, [r7, #8]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	1ad3      	subs	r3, r2, r3
 8008bc2:	4a1f      	ldr	r2, [pc, #124]	; (8008c40 <prvHeapInit+0xac>)
 8008bc4:	4413      	add	r3, r2
 8008bc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008bcc:	4a1d      	ldr	r2, [pc, #116]	; (8008c44 <prvHeapInit+0xb0>)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008bd2:	4b1c      	ldr	r3, [pc, #112]	; (8008c44 <prvHeapInit+0xb0>)
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	68ba      	ldr	r2, [r7, #8]
 8008bdc:	4413      	add	r3, r2
 8008bde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008be0:	2208      	movs	r2, #8
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	1a9b      	subs	r3, r3, r2
 8008be6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f023 0307 	bic.w	r3, r3, #7
 8008bee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	4a15      	ldr	r2, [pc, #84]	; (8008c48 <prvHeapInit+0xb4>)
 8008bf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008bf6:	4b14      	ldr	r3, [pc, #80]	; (8008c48 <prvHeapInit+0xb4>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008bfe:	4b12      	ldr	r3, [pc, #72]	; (8008c48 <prvHeapInit+0xb4>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	2200      	movs	r2, #0
 8008c04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	68fa      	ldr	r2, [r7, #12]
 8008c0e:	1ad2      	subs	r2, r2, r3
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008c14:	4b0c      	ldr	r3, [pc, #48]	; (8008c48 <prvHeapInit+0xb4>)
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	4a0a      	ldr	r2, [pc, #40]	; (8008c4c <prvHeapInit+0xb8>)
 8008c22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	4a09      	ldr	r2, [pc, #36]	; (8008c50 <prvHeapInit+0xbc>)
 8008c2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008c2c:	4b09      	ldr	r3, [pc, #36]	; (8008c54 <prvHeapInit+0xc0>)
 8008c2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008c32:	601a      	str	r2, [r3, #0]
}
 8008c34:	bf00      	nop
 8008c36:	3714      	adds	r7, #20
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr
 8008c40:	200019f0 	.word	0x200019f0
 8008c44:	200055f0 	.word	0x200055f0
 8008c48:	200055f8 	.word	0x200055f8
 8008c4c:	20005600 	.word	0x20005600
 8008c50:	200055fc 	.word	0x200055fc
 8008c54:	20005604 	.word	0x20005604

08008c58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b085      	sub	sp, #20
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c60:	4b28      	ldr	r3, [pc, #160]	; (8008d04 <prvInsertBlockIntoFreeList+0xac>)
 8008c62:	60fb      	str	r3, [r7, #12]
 8008c64:	e002      	b.n	8008c6c <prvInsertBlockIntoFreeList+0x14>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	60fb      	str	r3, [r7, #12]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d8f7      	bhi.n	8008c66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	68ba      	ldr	r2, [r7, #8]
 8008c80:	4413      	add	r3, r2
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d108      	bne.n	8008c9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	685a      	ldr	r2, [r3, #4]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	441a      	add	r2, r3
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	68ba      	ldr	r2, [r7, #8]
 8008ca4:	441a      	add	r2, r3
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d118      	bne.n	8008ce0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	4b15      	ldr	r3, [pc, #84]	; (8008d08 <prvInsertBlockIntoFreeList+0xb0>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d00d      	beq.n	8008cd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	685a      	ldr	r2, [r3, #4]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	441a      	add	r2, r3
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	601a      	str	r2, [r3, #0]
 8008cd4:	e008      	b.n	8008ce8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008cd6:	4b0c      	ldr	r3, [pc, #48]	; (8008d08 <prvInsertBlockIntoFreeList+0xb0>)
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	601a      	str	r2, [r3, #0]
 8008cde:	e003      	b.n	8008ce8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d002      	beq.n	8008cf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cf6:	bf00      	nop
 8008cf8:	3714      	adds	r7, #20
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr
 8008d02:	bf00      	nop
 8008d04:	200055f0 	.word	0x200055f0
 8008d08:	200055f8 	.word	0x200055f8

08008d0c <__cxa_pure_virtual>:
 8008d0c:	b508      	push	{r3, lr}
 8008d0e:	f000 f82b 	bl	8008d68 <_ZSt9terminatev>
	...

08008d14 <_ZNSt6chrono3_V212system_clock3nowEv>:
 8008d14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d16:	4604      	mov	r4, r0
 8008d18:	2100      	movs	r1, #0
 8008d1a:	4668      	mov	r0, sp
 8008d1c:	f000 f920 	bl	8008f60 <gettimeofday>
 8008d20:	490a      	ldr	r1, [pc, #40]	; (8008d4c <_ZNSt6chrono3_V212system_clock3nowEv+0x38>)
 8008d22:	9b00      	ldr	r3, [sp, #0]
 8008d24:	9801      	ldr	r0, [sp, #4]
 8008d26:	fba3 3201 	umull	r3, r2, r3, r1
 8008d2a:	fb01 2200 	mla	r2, r1, r0, r2
 8008d2e:	9902      	ldr	r1, [sp, #8]
 8008d30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008d34:	185b      	adds	r3, r3, r1
 8008d36:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 8008d3a:	fba3 3100 	umull	r3, r1, r3, r0
 8008d3e:	fb00 1202 	mla	r2, r0, r2, r1
 8008d42:	4620      	mov	r0, r4
 8008d44:	e9c4 3200 	strd	r3, r2, [r4]
 8008d48:	b004      	add	sp, #16
 8008d4a:	bd10      	pop	{r4, pc}
 8008d4c:	000f4240 	.word	0x000f4240

08008d50 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8008d50:	b508      	push	{r3, lr}
 8008d52:	4780      	blx	r0
 8008d54:	f000 f80d 	bl	8008d72 <abort>

08008d58 <_ZSt13get_terminatev>:
 8008d58:	4b02      	ldr	r3, [pc, #8]	; (8008d64 <_ZSt13get_terminatev+0xc>)
 8008d5a:	6818      	ldr	r0, [r3, #0]
 8008d5c:	f3bf 8f5b 	dmb	ish
 8008d60:	4770      	bx	lr
 8008d62:	bf00      	nop
 8008d64:	20000010 	.word	0x20000010

08008d68 <_ZSt9terminatev>:
 8008d68:	b508      	push	{r3, lr}
 8008d6a:	f7ff fff5 	bl	8008d58 <_ZSt13get_terminatev>
 8008d6e:	f7ff ffef 	bl	8008d50 <_ZN10__cxxabiv111__terminateEPFvvE>

08008d72 <abort>:
 8008d72:	b508      	push	{r3, lr}
 8008d74:	2006      	movs	r0, #6
 8008d76:	f000 f8d7 	bl	8008f28 <raise>
 8008d7a:	2001      	movs	r0, #1
 8008d7c:	f7f8 ff72 	bl	8001c64 <_exit>

08008d80 <__errno>:
 8008d80:	4b01      	ldr	r3, [pc, #4]	; (8008d88 <__errno+0x8>)
 8008d82:	6818      	ldr	r0, [r3, #0]
 8008d84:	4770      	bx	lr
 8008d86:	bf00      	nop
 8008d88:	20000014 	.word	0x20000014

08008d8c <__libc_init_array>:
 8008d8c:	b570      	push	{r4, r5, r6, lr}
 8008d8e:	4d0d      	ldr	r5, [pc, #52]	; (8008dc4 <__libc_init_array+0x38>)
 8008d90:	4c0d      	ldr	r4, [pc, #52]	; (8008dc8 <__libc_init_array+0x3c>)
 8008d92:	1b64      	subs	r4, r4, r5
 8008d94:	10a4      	asrs	r4, r4, #2
 8008d96:	2600      	movs	r6, #0
 8008d98:	42a6      	cmp	r6, r4
 8008d9a:	d109      	bne.n	8008db0 <__libc_init_array+0x24>
 8008d9c:	4d0b      	ldr	r5, [pc, #44]	; (8008dcc <__libc_init_array+0x40>)
 8008d9e:	4c0c      	ldr	r4, [pc, #48]	; (8008dd0 <__libc_init_array+0x44>)
 8008da0:	f000 f958 	bl	8009054 <_init>
 8008da4:	1b64      	subs	r4, r4, r5
 8008da6:	10a4      	asrs	r4, r4, #2
 8008da8:	2600      	movs	r6, #0
 8008daa:	42a6      	cmp	r6, r4
 8008dac:	d105      	bne.n	8008dba <__libc_init_array+0x2e>
 8008dae:	bd70      	pop	{r4, r5, r6, pc}
 8008db0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008db4:	4798      	blx	r3
 8008db6:	3601      	adds	r6, #1
 8008db8:	e7ee      	b.n	8008d98 <__libc_init_array+0xc>
 8008dba:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dbe:	4798      	blx	r3
 8008dc0:	3601      	adds	r6, #1
 8008dc2:	e7f2      	b.n	8008daa <__libc_init_array+0x1e>
 8008dc4:	0800923c 	.word	0x0800923c
 8008dc8:	0800923c 	.word	0x0800923c
 8008dcc:	0800923c 	.word	0x0800923c
 8008dd0:	0800924c 	.word	0x0800924c

08008dd4 <__retarget_lock_acquire_recursive>:
 8008dd4:	4770      	bx	lr

08008dd6 <__retarget_lock_release_recursive>:
 8008dd6:	4770      	bx	lr

08008dd8 <memcpy>:
 8008dd8:	440a      	add	r2, r1
 8008dda:	4291      	cmp	r1, r2
 8008ddc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008de0:	d100      	bne.n	8008de4 <memcpy+0xc>
 8008de2:	4770      	bx	lr
 8008de4:	b510      	push	{r4, lr}
 8008de6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008dea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008dee:	4291      	cmp	r1, r2
 8008df0:	d1f9      	bne.n	8008de6 <memcpy+0xe>
 8008df2:	bd10      	pop	{r4, pc}

08008df4 <memset>:
 8008df4:	4402      	add	r2, r0
 8008df6:	4603      	mov	r3, r0
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d100      	bne.n	8008dfe <memset+0xa>
 8008dfc:	4770      	bx	lr
 8008dfe:	f803 1b01 	strb.w	r1, [r3], #1
 8008e02:	e7f9      	b.n	8008df8 <memset+0x4>

08008e04 <cleanup_glue>:
 8008e04:	b538      	push	{r3, r4, r5, lr}
 8008e06:	460c      	mov	r4, r1
 8008e08:	6809      	ldr	r1, [r1, #0]
 8008e0a:	4605      	mov	r5, r0
 8008e0c:	b109      	cbz	r1, 8008e12 <cleanup_glue+0xe>
 8008e0e:	f7ff fff9 	bl	8008e04 <cleanup_glue>
 8008e12:	4621      	mov	r1, r4
 8008e14:	4628      	mov	r0, r5
 8008e16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e1a:	f000 b8c7 	b.w	8008fac <_free_r>
	...

08008e20 <_reclaim_reent>:
 8008e20:	4b2c      	ldr	r3, [pc, #176]	; (8008ed4 <_reclaim_reent+0xb4>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4283      	cmp	r3, r0
 8008e26:	b570      	push	{r4, r5, r6, lr}
 8008e28:	4604      	mov	r4, r0
 8008e2a:	d051      	beq.n	8008ed0 <_reclaim_reent+0xb0>
 8008e2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008e2e:	b143      	cbz	r3, 8008e42 <_reclaim_reent+0x22>
 8008e30:	68db      	ldr	r3, [r3, #12]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d14a      	bne.n	8008ecc <_reclaim_reent+0xac>
 8008e36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e38:	6819      	ldr	r1, [r3, #0]
 8008e3a:	b111      	cbz	r1, 8008e42 <_reclaim_reent+0x22>
 8008e3c:	4620      	mov	r0, r4
 8008e3e:	f000 f8b5 	bl	8008fac <_free_r>
 8008e42:	6961      	ldr	r1, [r4, #20]
 8008e44:	b111      	cbz	r1, 8008e4c <_reclaim_reent+0x2c>
 8008e46:	4620      	mov	r0, r4
 8008e48:	f000 f8b0 	bl	8008fac <_free_r>
 8008e4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008e4e:	b111      	cbz	r1, 8008e56 <_reclaim_reent+0x36>
 8008e50:	4620      	mov	r0, r4
 8008e52:	f000 f8ab 	bl	8008fac <_free_r>
 8008e56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008e58:	b111      	cbz	r1, 8008e60 <_reclaim_reent+0x40>
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	f000 f8a6 	bl	8008fac <_free_r>
 8008e60:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008e62:	b111      	cbz	r1, 8008e6a <_reclaim_reent+0x4a>
 8008e64:	4620      	mov	r0, r4
 8008e66:	f000 f8a1 	bl	8008fac <_free_r>
 8008e6a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008e6c:	b111      	cbz	r1, 8008e74 <_reclaim_reent+0x54>
 8008e6e:	4620      	mov	r0, r4
 8008e70:	f000 f89c 	bl	8008fac <_free_r>
 8008e74:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008e76:	b111      	cbz	r1, 8008e7e <_reclaim_reent+0x5e>
 8008e78:	4620      	mov	r0, r4
 8008e7a:	f000 f897 	bl	8008fac <_free_r>
 8008e7e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008e80:	b111      	cbz	r1, 8008e88 <_reclaim_reent+0x68>
 8008e82:	4620      	mov	r0, r4
 8008e84:	f000 f892 	bl	8008fac <_free_r>
 8008e88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e8a:	b111      	cbz	r1, 8008e92 <_reclaim_reent+0x72>
 8008e8c:	4620      	mov	r0, r4
 8008e8e:	f000 f88d 	bl	8008fac <_free_r>
 8008e92:	69a3      	ldr	r3, [r4, #24]
 8008e94:	b1e3      	cbz	r3, 8008ed0 <_reclaim_reent+0xb0>
 8008e96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008e98:	4620      	mov	r0, r4
 8008e9a:	4798      	blx	r3
 8008e9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008e9e:	b1b9      	cbz	r1, 8008ed0 <_reclaim_reent+0xb0>
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008ea6:	f7ff bfad 	b.w	8008e04 <cleanup_glue>
 8008eaa:	5949      	ldr	r1, [r1, r5]
 8008eac:	b941      	cbnz	r1, 8008ec0 <_reclaim_reent+0xa0>
 8008eae:	3504      	adds	r5, #4
 8008eb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008eb2:	2d80      	cmp	r5, #128	; 0x80
 8008eb4:	68d9      	ldr	r1, [r3, #12]
 8008eb6:	d1f8      	bne.n	8008eaa <_reclaim_reent+0x8a>
 8008eb8:	4620      	mov	r0, r4
 8008eba:	f000 f877 	bl	8008fac <_free_r>
 8008ebe:	e7ba      	b.n	8008e36 <_reclaim_reent+0x16>
 8008ec0:	680e      	ldr	r6, [r1, #0]
 8008ec2:	4620      	mov	r0, r4
 8008ec4:	f000 f872 	bl	8008fac <_free_r>
 8008ec8:	4631      	mov	r1, r6
 8008eca:	e7ef      	b.n	8008eac <_reclaim_reent+0x8c>
 8008ecc:	2500      	movs	r5, #0
 8008ece:	e7ef      	b.n	8008eb0 <_reclaim_reent+0x90>
 8008ed0:	bd70      	pop	{r4, r5, r6, pc}
 8008ed2:	bf00      	nop
 8008ed4:	20000014 	.word	0x20000014

08008ed8 <_raise_r>:
 8008ed8:	291f      	cmp	r1, #31
 8008eda:	b538      	push	{r3, r4, r5, lr}
 8008edc:	4604      	mov	r4, r0
 8008ede:	460d      	mov	r5, r1
 8008ee0:	d904      	bls.n	8008eec <_raise_r+0x14>
 8008ee2:	2316      	movs	r3, #22
 8008ee4:	6003      	str	r3, [r0, #0]
 8008ee6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008eea:	bd38      	pop	{r3, r4, r5, pc}
 8008eec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008eee:	b112      	cbz	r2, 8008ef6 <_raise_r+0x1e>
 8008ef0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ef4:	b94b      	cbnz	r3, 8008f0a <_raise_r+0x32>
 8008ef6:	4620      	mov	r0, r4
 8008ef8:	f000 f830 	bl	8008f5c <_getpid_r>
 8008efc:	462a      	mov	r2, r5
 8008efe:	4601      	mov	r1, r0
 8008f00:	4620      	mov	r0, r4
 8008f02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f06:	f000 b817 	b.w	8008f38 <_kill_r>
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d00a      	beq.n	8008f24 <_raise_r+0x4c>
 8008f0e:	1c59      	adds	r1, r3, #1
 8008f10:	d103      	bne.n	8008f1a <_raise_r+0x42>
 8008f12:	2316      	movs	r3, #22
 8008f14:	6003      	str	r3, [r0, #0]
 8008f16:	2001      	movs	r0, #1
 8008f18:	e7e7      	b.n	8008eea <_raise_r+0x12>
 8008f1a:	2400      	movs	r4, #0
 8008f1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008f20:	4628      	mov	r0, r5
 8008f22:	4798      	blx	r3
 8008f24:	2000      	movs	r0, #0
 8008f26:	e7e0      	b.n	8008eea <_raise_r+0x12>

08008f28 <raise>:
 8008f28:	4b02      	ldr	r3, [pc, #8]	; (8008f34 <raise+0xc>)
 8008f2a:	4601      	mov	r1, r0
 8008f2c:	6818      	ldr	r0, [r3, #0]
 8008f2e:	f7ff bfd3 	b.w	8008ed8 <_raise_r>
 8008f32:	bf00      	nop
 8008f34:	20000014 	.word	0x20000014

08008f38 <_kill_r>:
 8008f38:	b538      	push	{r3, r4, r5, lr}
 8008f3a:	4d07      	ldr	r5, [pc, #28]	; (8008f58 <_kill_r+0x20>)
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	4604      	mov	r4, r0
 8008f40:	4608      	mov	r0, r1
 8008f42:	4611      	mov	r1, r2
 8008f44:	602b      	str	r3, [r5, #0]
 8008f46:	f7f8 fe7d 	bl	8001c44 <_kill>
 8008f4a:	1c43      	adds	r3, r0, #1
 8008f4c:	d102      	bne.n	8008f54 <_kill_r+0x1c>
 8008f4e:	682b      	ldr	r3, [r5, #0]
 8008f50:	b103      	cbz	r3, 8008f54 <_kill_r+0x1c>
 8008f52:	6023      	str	r3, [r4, #0]
 8008f54:	bd38      	pop	{r3, r4, r5, pc}
 8008f56:	bf00      	nop
 8008f58:	20005610 	.word	0x20005610

08008f5c <_getpid_r>:
 8008f5c:	f7f8 be6a 	b.w	8001c34 <_getpid>

08008f60 <gettimeofday>:
 8008f60:	4b02      	ldr	r3, [pc, #8]	; (8008f6c <gettimeofday+0xc>)
 8008f62:	460a      	mov	r2, r1
 8008f64:	4601      	mov	r1, r0
 8008f66:	6818      	ldr	r0, [r3, #0]
 8008f68:	f000 b802 	b.w	8008f70 <_gettimeofday_r>
 8008f6c:	20000014 	.word	0x20000014

08008f70 <_gettimeofday_r>:
 8008f70:	b538      	push	{r3, r4, r5, lr}
 8008f72:	4d07      	ldr	r5, [pc, #28]	; (8008f90 <_gettimeofday_r+0x20>)
 8008f74:	2300      	movs	r3, #0
 8008f76:	4604      	mov	r4, r0
 8008f78:	4608      	mov	r0, r1
 8008f7a:	4611      	mov	r1, r2
 8008f7c:	602b      	str	r3, [r5, #0]
 8008f7e:	f000 f861 	bl	8009044 <_gettimeofday>
 8008f82:	1c43      	adds	r3, r0, #1
 8008f84:	d102      	bne.n	8008f8c <_gettimeofday_r+0x1c>
 8008f86:	682b      	ldr	r3, [r5, #0]
 8008f88:	b103      	cbz	r3, 8008f8c <_gettimeofday_r+0x1c>
 8008f8a:	6023      	str	r3, [r4, #0]
 8008f8c:	bd38      	pop	{r3, r4, r5, pc}
 8008f8e:	bf00      	nop
 8008f90:	20005610 	.word	0x20005610

08008f94 <__malloc_lock>:
 8008f94:	4801      	ldr	r0, [pc, #4]	; (8008f9c <__malloc_lock+0x8>)
 8008f96:	f7ff bf1d 	b.w	8008dd4 <__retarget_lock_acquire_recursive>
 8008f9a:	bf00      	nop
 8008f9c:	20005608 	.word	0x20005608

08008fa0 <__malloc_unlock>:
 8008fa0:	4801      	ldr	r0, [pc, #4]	; (8008fa8 <__malloc_unlock+0x8>)
 8008fa2:	f7ff bf18 	b.w	8008dd6 <__retarget_lock_release_recursive>
 8008fa6:	bf00      	nop
 8008fa8:	20005608 	.word	0x20005608

08008fac <_free_r>:
 8008fac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fae:	2900      	cmp	r1, #0
 8008fb0:	d044      	beq.n	800903c <_free_r+0x90>
 8008fb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fb6:	9001      	str	r0, [sp, #4]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f1a1 0404 	sub.w	r4, r1, #4
 8008fbe:	bfb8      	it	lt
 8008fc0:	18e4      	addlt	r4, r4, r3
 8008fc2:	f7ff ffe7 	bl	8008f94 <__malloc_lock>
 8008fc6:	4a1e      	ldr	r2, [pc, #120]	; (8009040 <_free_r+0x94>)
 8008fc8:	9801      	ldr	r0, [sp, #4]
 8008fca:	6813      	ldr	r3, [r2, #0]
 8008fcc:	b933      	cbnz	r3, 8008fdc <_free_r+0x30>
 8008fce:	6063      	str	r3, [r4, #4]
 8008fd0:	6014      	str	r4, [r2, #0]
 8008fd2:	b003      	add	sp, #12
 8008fd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fd8:	f7ff bfe2 	b.w	8008fa0 <__malloc_unlock>
 8008fdc:	42a3      	cmp	r3, r4
 8008fde:	d908      	bls.n	8008ff2 <_free_r+0x46>
 8008fe0:	6825      	ldr	r5, [r4, #0]
 8008fe2:	1961      	adds	r1, r4, r5
 8008fe4:	428b      	cmp	r3, r1
 8008fe6:	bf01      	itttt	eq
 8008fe8:	6819      	ldreq	r1, [r3, #0]
 8008fea:	685b      	ldreq	r3, [r3, #4]
 8008fec:	1949      	addeq	r1, r1, r5
 8008fee:	6021      	streq	r1, [r4, #0]
 8008ff0:	e7ed      	b.n	8008fce <_free_r+0x22>
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	b10b      	cbz	r3, 8008ffc <_free_r+0x50>
 8008ff8:	42a3      	cmp	r3, r4
 8008ffa:	d9fa      	bls.n	8008ff2 <_free_r+0x46>
 8008ffc:	6811      	ldr	r1, [r2, #0]
 8008ffe:	1855      	adds	r5, r2, r1
 8009000:	42a5      	cmp	r5, r4
 8009002:	d10b      	bne.n	800901c <_free_r+0x70>
 8009004:	6824      	ldr	r4, [r4, #0]
 8009006:	4421      	add	r1, r4
 8009008:	1854      	adds	r4, r2, r1
 800900a:	42a3      	cmp	r3, r4
 800900c:	6011      	str	r1, [r2, #0]
 800900e:	d1e0      	bne.n	8008fd2 <_free_r+0x26>
 8009010:	681c      	ldr	r4, [r3, #0]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	6053      	str	r3, [r2, #4]
 8009016:	4421      	add	r1, r4
 8009018:	6011      	str	r1, [r2, #0]
 800901a:	e7da      	b.n	8008fd2 <_free_r+0x26>
 800901c:	d902      	bls.n	8009024 <_free_r+0x78>
 800901e:	230c      	movs	r3, #12
 8009020:	6003      	str	r3, [r0, #0]
 8009022:	e7d6      	b.n	8008fd2 <_free_r+0x26>
 8009024:	6825      	ldr	r5, [r4, #0]
 8009026:	1961      	adds	r1, r4, r5
 8009028:	428b      	cmp	r3, r1
 800902a:	bf04      	itt	eq
 800902c:	6819      	ldreq	r1, [r3, #0]
 800902e:	685b      	ldreq	r3, [r3, #4]
 8009030:	6063      	str	r3, [r4, #4]
 8009032:	bf04      	itt	eq
 8009034:	1949      	addeq	r1, r1, r5
 8009036:	6021      	streq	r1, [r4, #0]
 8009038:	6054      	str	r4, [r2, #4]
 800903a:	e7ca      	b.n	8008fd2 <_free_r+0x26>
 800903c:	b003      	add	sp, #12
 800903e:	bd30      	pop	{r4, r5, pc}
 8009040:	2000560c 	.word	0x2000560c

08009044 <_gettimeofday>:
 8009044:	4b02      	ldr	r3, [pc, #8]	; (8009050 <_gettimeofday+0xc>)
 8009046:	2258      	movs	r2, #88	; 0x58
 8009048:	601a      	str	r2, [r3, #0]
 800904a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800904e:	4770      	bx	lr
 8009050:	20005610 	.word	0x20005610

08009054 <_init>:
 8009054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009056:	bf00      	nop
 8009058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800905a:	bc08      	pop	{r3}
 800905c:	469e      	mov	lr, r3
 800905e:	4770      	bx	lr

08009060 <_fini>:
 8009060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009062:	bf00      	nop
 8009064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009066:	bc08      	pop	{r3}
 8009068:	469e      	mov	lr, r3
 800906a:	4770      	bx	lr
